[
  {
    "id": 5599955,
    "slug": "why-so-slow-connect",
    "title": "建立连接为什么这么慢",
    "book_id": 653495,
    "book": {
      "id": 653495,
      "type": "Column",
      "slug": "blog",
      "name": "blog",
      "user_id": 236311,
      "description": "",
      "creator_id": 236311,
      "public": 0,
      "items_count": 3,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2020-03-26T16:56:17.593Z",
      "updated_at": "2020-03-26T16:56:17.000Z",
      "created_at": "2019-12-24T14:26:42.000Z",
      "namespace": "xcodebuild/blog",
      "user": {
        "id": 236311,
        "type": "User",
        "login": "xcodebuild",
        "name": "xcodebuIld",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
        "books_count": 6,
        "public_books_count": 1,
        "followers_count": 2,
        "following_count": 0,
        "created_at": "2019-01-03T03:16:21.000Z",
        "updated_at": "2020-03-23T08:18:51.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 236311,
    "creator": {
      "id": 236311,
      "type": "User",
      "login": "xcodebuild",
      "name": "xcodebuIld",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
      "books_count": 6,
      "public_books_count": 1,
      "followers_count": 2,
      "following_count": 0,
      "created_at": "2019-01-03T03:16:21.000Z",
      "updated_at": "2020-03-23T08:18:51.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "我们都知道 `HTTP` 是基于 `TCP` 的，而 `TCP` 是面向连接的。当我们向服务器请求一个页面时，首先需要建立 `TCP` 连接，才能开始真正开始传输内容。<br />\n<br />这个时间平时不容易被人察觉，因为开发场景下我们往往不需要重新建立连接。但是在有些场景（尤其是新用户场景、landing page 等）却会对页面的性能造成很大的影响。<br />\n<br />图中 TCP 的部分为我们常说的建连时间（这里包含了 SSL 握手时间，下文的建连时间也指的是这段时间），前面的 DNS 时间往往和建连时间同时出现，后面会讲到这一点。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1584964408688-4c021c34-501c-408c-a704-1f30656ccbb1.png#align=left&display=inline&height=383&name=image.png&originHeight=879&originWidth=1473&size=106021&status=done&style=none&width=641)\n<a name=\"7I6OJ\"></a>\n## 建连应该耗时多久\n<a name=\"ppSgn\"></a>\n### RTT\n在介绍建连的耗时之前，我们先介绍一下 `RTT(Round-Trip Time)` 的概念。RTT，即往返时延。指的是从发送端发送数据开始，到发送端收到来自接收端的确认（ACK）的时间。一般来说这个时间是由物理距离，网络传输路径等决定的。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1584964922127-65173f15-e1ec-4fb1-ade1-74b65cfc8e8e.png#align=left&display=inline&height=292&name=image.png&originHeight=584&originWidth=720&size=197676&status=done&style=none&width=360)<br />\n\n<a name=\"IaUYe\"></a>\n### RTT 一般是多久\n最简单的方式就是 Ping 一下，我们在 Ping 的时候看到的 `time=xxms`  一般**接近于一个 RTT**<br />**\n```bash\nPING 115.239.211.112 (115.239.211.112): 56 data bytes\n64 bytes from 115.239.211.112: icmp_seq=0 ttl=55 time=4.411 ms\n```\n\n<br />实际上就是一来一回（下面是 `tcpdump` 抓到的 `ping` ）：\n```bash\n11:59:42.631275 IP 30.38.61.21 > 115.239.211.112: ICMP echo request, id 11482, seq 0, length 64\n11:59:42.635593 IP 115.239.211.112 > 30.38.61.21: ICMP echo reply, id 11482, seq 0, length 64\n```\n<a name=\"ORwmh\"></a>\n### 建连需要多少个 RTT\nTCP 一种面向连接的通讯协议，在两个目标间发送 TCP 数据之前，TCP 需要通过三次握手建立起连接。而这个连接的过程其实是在交换一些初始数据，其中最重要的是 Sequence Number。<br />\n<br />很多地方尝试用各种看起来形象的比喻来形容三次握手，但是实际上握手的过程非常简单，为了避免造成错误的理解，我们就平铺直叙，后面会解释为什么一定要经过三次握手才能建立起连接。三次握手的过程如下：<br />\n\n1. 客户端向服务端发送 SYN，传输 seq = X\n1. 服务端向客户端发送 ACK X+1，表示收到，客户端可以从 X+1 作为 seq 发送消息。同时发送 SYN，seq = Y，把自己设置成 established 状态（可接收数据）\n1. 客户端向服务端发送 ACK Y+1，表示收到，服务端可以从 Y+1 作为 seq 发送消息，，把自己设置成 established 状态（可接收数据）\n\n\n<br />**到了第三步客户端发送完 ACK 后就认为连接已经建立完毕（毕竟不会有第四个 ACK 再告诉它已经收到了 ACK），然后开始把应用层的数据（HTTP 报文）开始传输。而服务器端则是收到这个 ACK 后才会开始把收到的数据交付给应用层（HTTP）。**<br />**<br />**所以在这个过程中，客户端在建连上话费的时间是一个 RTT。**<br />\n<br />这种情况说的是纯粹的 `Connect` 时间，不包括 `SSL` ，所以只是对 `http` 协议而言的，如果是 `https` 协议还需要再考虑 SSL 握手的时间，我们后续会在别的文章中介绍。\n<a name=\"guKHx\"></a>\n#### 动手试试\n我们可以使用 `WireShark` 来抓取一次  `http` 请求来看看建连的过程。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1584966581339-1ff4f09d-c1dc-4dab-a0ef-636e942cf5fa.png#align=left&display=inline&height=597&name=image.png&originHeight=1194&originWidth=2192&size=1880284&status=done&style=none&width=1096)<br />可以看到这里从发起 `seq` 到收到 `ack` （经过 1 `RTT` ）后，客户端就没有再等待直接发起了 `GET / HTTP/1.1` 的请求。\n<a name=\"tmNZ6\"></a>\n## 如何优化建连时间\n<a name=\"vhZdc\"></a>\n### 例子\n我们用一个简单的页面看看建连对网页性能的影响：[https://xcodebuild.github.io/why-so-slow/connect/index.html](https://xcodebuild.github.io/why-so-slow/connect/index.html)<br />\n\n> 这是一个测试页面，源代码托管在：[https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html](https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html)\n\n\n<br />就像上面说的，我们在开发场景下往往不需要重新连接，包括 `Disable Cache` 是不会禁用 `TCP` 的连接复用的，所以我们使用 [Webpage Test](https://www.webpagetest.org/) 来看一下这个页面的性能状况。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585020683958-c843ada1-7492-44d1-8c71-e65389fb9850.png#align=left&display=inline&height=582&name=image.png&originHeight=1164&originWidth=1910&size=229615&status=done&style=none&width=955)<br />\n<br />我们可以看到这这个页面的 JavaScript 文件以及后面的 `fetch` 请求都有个很长的 `DNS + Connect + SSL` 时间。因为他们的域名不同，所以需要重新解析域名。不是同一个 TCP 连接，所以需要重新建连（包括 SSL 握手）。<br />\n<br />在图中这个 `fetch` 请求的 `Connect + SSL` 一共耗时 `500ms` ，意味着用户必须等待这个建连完成后才能真正发起这个请求。\n<a name=\"zlxEH\"></a>\n### pre-connect\n为了解决上面这种问题，Chrome 引入了 [`Preconnect`](https://web.dev/uses-rel-preconnect/) （现在大部分浏览器都是支持的）。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585102598647-3d2dd3b0-fbfc-4bbc-99f5-10debdf6ee91.png#align=left&display=inline&height=150&name=image.png&originHeight=300&originWidth=736&size=76442&status=done&style=none&width=368)<br />我们可以在页面的 `<head>` 中加入\n```html\n<link rel=\"preconnect\" href=\"https://www.mocky.io\" crossorigin>\n```\n\n<br />来告知浏览器提前建立连接。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585043302410-4fc5bf0c-b9f3-45ef-bba2-3ebbe7ce0ce0.png#align=left&display=inline&height=269&name=image.png&originHeight=538&originWidth=1994&size=401496&status=done&style=none&width=997)<br />可以看到这种情况下，我们在 JS 加载后前（实际上 `fetch` 这个时候才能开始执行），就开始建立连接。同时 `preconnect` 也附带着让浏览器提前进行了 DNS 解析。\n<a name=\"QIrav\"></a>\n### 连接复用\n当然如果直接使用同一个连接，即使不使用 `pre-connect` 就能天然减少额外的连接次数。\n<a name=\"cSppd\"></a>\n#### 域名收拢\n在 HTTP 1 时代，为了解决阻塞的问题，很多网站都做了分散域名的优化让多个请求可以并行加载。而在 HTTP 2 普及后，已经具备了连接复用的能力，使用多个分散的域名只会让我们消耗更高的连接成本。<br />\n<br />所以尽可能把域名收拢到相同域名，可以尽可能的减少建连的耗时。\n<a name=\"SbrZd\"></a>\n#### IP 收拢\n我们都知道，一个 TCP 连接是由一个四元组组成的（源 IP、源端口、目标 IP、目标端口），和域名其实没有关系。所以看起来很反直觉的一点是，当两个请求域名不同，但来自同一个 IP 时，同样可以复用连接（虽然会额外解析一次 DNS）。<br />\n<br />如果我们试用了类似于阿里云全站加速的技术，把页面和静态资源的 IP 指向同一个可以帮助我们减少重复的连接建立。\n<a name=\"7UdXx\"></a>\n### 连接为什么不复用\n<a name=\"8RMHh\"></a>\n#### 如何确定一个连接\n看起来无论是 `pre-connect` 还是链接复用都非常简单，但实际应用中并非如此。由于一些浏览器安全策略，不同的连接之间复用会受到一些限制。<br />\n<br />在 [https://fetch.spec.whatwg.org/#cors-protocol-and-credentials](https://fetch.spec.whatwg.org/#cors-protocol-and-credentials) 我们可以看到<br />\n\n> A user agent has an associated connection pool. A connection pool consists of zero or more connections. Each connection is identified by an origin (an origin) and credentials (a boolean).\n\n\n<br />即一个连接是由 `origin` 和 `credentials` 确定的，这里的 `origin` 并非单纯是指我们加载的连接的 `origin` ，而是对于页面上不同的资源来说，会遵循不同的策略（详细的策略见 [https://html.spec.whatwg.org/multipage/origin.html#concept-origin](https://html.spec.whatwg.org/multipage/origin.html#concept-origin)）。<br />\n<br />例如对于图像而言（其实对于 `script/css` 等来说也是一样的）\n> For images of `[img](https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element)` elements\n> If the [image data](https://html.spec.whatwg.org/multipage/images.html#img-req-data) is [CORS-cross-origin](https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-cross-origin)\n> A unique [opaque origin](https://html.spec.whatwg.org/multipage/origin.html#concept-origin-opaque) assigned when the image is created.\n> If the [image data](https://html.spec.whatwg.org/multipage/images.html#img-req-data) is [CORS-same-origin](https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-same-origin)\n> The `[img](https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element)` element's [node document](https://dom.spec.whatwg.org/#concept-node-document)'s [origin](https://html.spec.whatwg.org/multipage/origin.html#concept-origin).\n\n\n<br />即在有 `crossorigin` 时（不是单纯的是另外一个域名时），则其 `origin` 是图片的 `origin` 。<br />如果没有（一般来说是没有的），则 `origin` 是页面相同的 `origin` 。<br />\n<br />这意味着对于 `cors` 和 `non-cors` 的请求、`credentials=true` 和 `credentials=false` 的请求来说，他们的连接是不能复用的。<br />\n<br />例如 [https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html](https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html) 这个页面中，有四个来自同一个域名的 `img` ，但是后面两个是 `crossorigin` 的\n```html\n<img src=\"https://i.picsum.photos/id/1061/200/200.jpg\"/>\n<img src=\"https://i.picsum.photos/id/1061/200/300.jpg\"/>\n<img src=\"https://i.picsum.photos/id/1061/100/300.jpg\" crossorigin/>\n<img src=\"https://i.picsum.photos/id/1061/300/300.jpg\" crossorigin/>\n```\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585190581512-5105a07b-5871-4d57-ac19-829f926b978c.png#align=left&display=inline&height=458&name=image.png&originHeight=916&originWidth=1924&size=538733&status=done&style=none&width=962)<br />这样就会发现前面两个和后面两个分别能够复用连接，但是 `cors` 的和 `non-cors` 的不能复用连接。\n> 其实这里如果有 crossorigin=\"use-credentials\"，其和 cors 也不能复用连接\n\n具体这么做的原因主要是为了安全考虑，在 [https://github.com/whatwg/fetch/issues/341](https://github.com/whatwg/fetch/issues/341) 中有提到，在这里不展开。\n<a name=\"0RLnO\"></a>\n#### 怎么避免不复用\n知道了怎么确定一个连接后，我们就知道怎么避免连接没有复用的问题。无论是我们尝试让两个请求复用一个连接还是通过 `preconnect` 去提前建连，都应该保持其 `cors` 和 `credentials` 的一致性。<br />\n<br />由于实际规则其实蛮复杂的，并不能保证我们总是能判断策略是否符合预期，**还是建议通过 `WebPageTest` 等工具验证是否有多余的建连。**<br />\n<br />当然通过 Chrome Devtools 也能够验证这一点，我们可以在 Network 面板打开 `Connection ID` ，可以看到不同的连接使用的 `Connection ID` 是不同的。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585191129731-7ff634e7-4184-4de0-98a0-d3339c388644.png#align=left&display=inline&height=101&name=image.png&originHeight=202&originWidth=2012&size=181126&status=done&style=none&width=1006)\n<a name=\"EyboO\"></a>\n## 为什么要握手\n为什么一定要先握手才能发送 HTTP 报文呢？这是由 TCP 本身的设计决定的，TCP 是一种可靠的传输层通信协议。所谓可靠，就是能保证数据流的顺序和完整性。\n<a name=\"qVj1E\"></a>\n### ISN\nTCP 本身在网络层（IP 协议）的上层，应用层的下层（HTTP 协议）。当应用层发起请求时，把包传给 TCP，TCP 将其分割成合适的大小，将其传递给网络层。<br />\n<br />为了保证不丢包，TCP 会给每一个包一个序号，接收端接受到后返回响应的确认消息。如果在合理的时间内没有收到确认，发送端则会认为发生了丢包，会尝试重新发送。<br />\n<br />而作为接收端，收到的包可能是乱序的（网络层不保证传输顺序）或者重复的（例如上面重新发送的时候就会重复），就会按照接收方的序号重新组建传输包的内容，然后将其交付给应用层。<br />\n<br />理解了 TCP 保证顺序和完整性的原理，就理解了 TCP 包的序号（Sequence Number**）**的重要性，而 TCP 握手时就是为了相互交换初始序列号（ISN，Inital Sequence Number**），**从而保证互相收到的包都能够保持正确的顺序。\n<a name=\"MZ1LO\"></a>\n#### 为什么不能用固定值\n从 ISN 的使用场景很自然可以想到，只要我们统一用一个固定值（例如0）作为 ISN，不就可以直接避免握手的性能损耗了么？<br />\n\n<a name=\"Uj6iu\"></a>\n##### 避免相邻的 TCP 连接互相干扰\n假设我们把 ISN 统一设置为 0，当我们的客户端和一个服务器建立起连接后传输了一部分数据包后，突然网络中断了，这个时候他们之间重新建立起连接，ISN 仍然为 0。<br />\n<br />这个时候服务器端可能同时收到序号为 N 的包，但却无从判断这个包属于哪一个 TCP 连接。\n<a name=\"RPdQe\"></a>\n### 结论\nTCP 为了确保能够把数据按照正确顺序、完整的发送给目标，必须通过握手同步 ISN。而由于 TCP 是全双工的（即双向通信），握手至少需要三次才能完成。<br />\n<br />其实对于客户端（浏览器）来说，从发送 ACK 到接受到 SYN-ACK 的过程就已经完成了 TCP 的建连，此时就可以开始给服务器端传输数据了。\n<a name=\"CeCLZ\"></a>\n## 能不能更快一点\n<a name=\"IPdfI\"></a>\n### TCP Fast Open\nTCP 协议每次都要等待 SYN-ACK+SYN-ACK 后，服务端的 TCP 才会把接收到的数据包传输给应用层，这样当连接不稳定时总是需要重新建立连接。那么，为什么不直接在第一次传输 SYN 时直接发送数据呢？<br />\n<br />事实上在 TCP 上有一个拓展标准是支持这么做的，称之为 TCP Fast Open，在 TFO 第一次建立连接时和正常的三次握手是相同的，但客户端会额外拿到一个 TFO Cookie。而当之后再重新建立连接（例如说断网后重连，或者移动设备切换网络登）时，则直接由 SYN 携带 TFO Cookie 和数据发送。服务端收到校验 Cookie 有效直接把数据交付给应用层。<br />\n<br />然而 TFO 并没有在所有的客户端和服务端默认打开，目前绝大多数浏览器都是不支持的，而且由于 TCP 作为协议层由操作系统实现，无法由应用层的浏览器、客户端等自由控制。\n<a name=\"Yk40Q\"></a>\n### QUIC/HTTP3\nQUIC 和 HTTP3 也解决了建连耗时的问题，不在本文展开，后续会在其他文章介绍。\n<a name=\"M0DPI\"></a>\n## 总结\n由于 HTTP 是基于 TCP 的，而 TCP 为了可靠性是面向连接的，需要通过三次握手建立连接。<br />\n<br />在 HTTP2 后我们有了多路复用可以让多个请求在一个连接中进行，但是连接的复用并不是单纯由域名决定的，同一个域名的连接可能不能复用一个连接，而不同的域名其实也可能复用一个连接。我们需要尽可能确定连接被正确的复用了。如果使用了 CDN 技术，我们可以尝试让页面和资源使用相同的 IP 从而复用链接。<br />\n<br />除此之外，我们可以使用 `preconnect` 来提前建连，同样的，也需要确定这个提前建立的连接被正确复用了。这对于即将发起的请求、即将到来的 `redirect` 等非常有效。<br />\n<a name=\"MzPEp\"></a>\n## 拓展阅读\n\n- [preconnect resource hint and the crossorigin attribute](https://crenshaw.dev/preconnect-resource-hint-crossorigin-attribute/)\n- [https://github.com/whatwg/fetch/issues/341](https://github.com/whatwg/fetch/issues/341)\n",
    "body_draft": "我们都知道 `HTTP` 是基于 `TCP` 的，而 `TCP` 是面向连接的。当我们向服务器请求一个页面时，首先需要建立 `TCP` 连接，才能开始真正开始传输内容。<br />\n<br />这个时间平时不容易被人察觉，因为开发场景下我们往往不需要重新建立连接。但是在有些场景（尤其是新用户场景、landing page 等）却会对页面的性能造成很大的影响。<br />\n<br />图中 TCP 的部分为我们常说的建连时间（这里包含了 SSL 握手时间，下文的建连时间也指的是这段时间），前面的 DNS 时间往往和建连时间同时出现，后面会讲到这一点。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1584964408688-4c021c34-501c-408c-a704-1f30656ccbb1.png#align=left&display=inline&height=383&name=image.png&originHeight=879&originWidth=1473&size=106021&status=done&style=none&width=641)\n<a name=\"7I6OJ\"></a>\n## 建连应该耗时多久\n<a name=\"ppSgn\"></a>\n### RTT\n在介绍建连的耗时之前，我们先介绍一下 `RTT(Round-Trip Time)` 的概念。RTT，即往返时延。指的是从发送端发送数据开始，到发送端收到来自接收端的确认（ACK）的时间。一般来说这个时间是由物理距离，网络传输路径等决定的。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1584964922127-65173f15-e1ec-4fb1-ade1-74b65cfc8e8e.png#align=left&display=inline&height=292&name=image.png&originHeight=584&originWidth=720&size=197676&status=done&style=none&width=360)<br />\n\n<a name=\"IaUYe\"></a>\n### RTT 一般是多久\n最简单的方式就是 Ping 一下，我们在 Ping 的时候看到的 `time=xxms`  一般**接近于一个 RTT**<br />**\n```bash\nPING 115.239.211.112 (115.239.211.112): 56 data bytes\n64 bytes from 115.239.211.112: icmp_seq=0 ttl=55 time=4.411 ms\n```\n\n<br />实际上就是一来一回（下面是 `tcpdump` 抓到的 `ping` ）：\n```bash\n11:59:42.631275 IP 30.38.61.21 > 115.239.211.112: ICMP echo request, id 11482, seq 0, length 64\n11:59:42.635593 IP 115.239.211.112 > 30.38.61.21: ICMP echo reply, id 11482, seq 0, length 64\n```\n<a name=\"ORwmh\"></a>\n### 建连需要多少个 RTT\nTCP 一种面向连接的通讯协议，在两个目标间发送 TCP 数据之前，TCP 需要通过三次握手建立起连接。而这个连接的过程其实是在交换一些初始数据，其中最重要的是 Sequence Number。<br />\n<br />很多地方尝试用各种看起来形象的比喻来形容三次握手，但是实际上握手的过程非常简单，为了避免造成错误的理解，我们就平铺直叙，后面会解释为什么一定要经过三次握手才能建立起连接。三次握手的过程如下：<br />\n\n1. 客户端向服务端发送 SYN，传输 seq = X\n1. 服务端向客户端发送 ACK X+1，表示收到，客户端可以从 X+1 作为 seq 发送消息。同时发送 SYN，seq = Y，把自己设置成 established 状态（可接收数据）\n1. 客户端向服务端发送 ACK Y+1，表示收到，服务端可以从 Y+1 作为 seq 发送消息，，把自己设置成 established 状态（可接收数据）\n\n\n<br />**到了第三步客户端发送完 ACK 后就认为连接已经建立完毕（毕竟不会有第四个 ACK 再告诉它已经收到了 ACK），然后开始把应用层的数据（HTTP 报文）开始传输。而服务器端则是收到这个 ACK 后才会开始把收到的数据交付给应用层（HTTP）。**<br />**<br />**所以在这个过程中，客户端在建连上话费的时间是一个 RTT。**<br />\n<br />这种情况说的是纯粹的 `Connect` 时间，不包括 `SSL` ，所以只是对 `http` 协议而言的，如果是 `https` 协议还需要再考虑 SSL 握手的时间，我们后续会在别的文章中介绍。\n<a name=\"guKHx\"></a>\n#### 动手试试\n我们可以使用 `WireShark` 来抓取一次  `http` 请求来看看建连的过程。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1584966581339-1ff4f09d-c1dc-4dab-a0ef-636e942cf5fa.png#align=left&display=inline&height=597&name=image.png&originHeight=1194&originWidth=2192&size=1880284&status=done&style=none&width=1096)<br />可以看到这里从发起 `seq` 到收到 `ack` （经过 1 `RTT` ）后，客户端就没有再等待直接发起了 `GET / HTTP/1.1` 的请求。\n<a name=\"tmNZ6\"></a>\n## 如何优化建连时间\n<a name=\"vhZdc\"></a>\n### 例子\n我们用一个简单的页面看看建连对网页性能的影响：[https://xcodebuild.github.io/why-so-slow/connect/index.html](https://xcodebuild.github.io/why-so-slow/connect/index.html)<br />\n\n> 这是一个测试页面，源代码托管在：[https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html](https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html)\n\n\n<br />就像上面说的，我们在开发场景下往往不需要重新连接，包括 `Disable Cache` 是不会禁用 `TCP` 的连接复用的，所以我们使用 [Webpage Test](https://www.webpagetest.org/) 来看一下这个页面的性能状况。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585020683958-c843ada1-7492-44d1-8c71-e65389fb9850.png#align=left&display=inline&height=582&name=image.png&originHeight=1164&originWidth=1910&size=229615&status=done&style=none&width=955)<br />\n<br />我们可以看到这这个页面的 JavaScript 文件以及后面的 `fetch` 请求都有个很长的 `DNS + Connect + SSL` 时间。因为他们的域名不同，所以需要重新解析域名。不是同一个 TCP 连接，所以需要重新建连（包括 SSL 握手）。<br />\n<br />在图中这个 `fetch` 请求的 `Connect + SSL` 一共耗时 `500ms` ，意味着用户必须等待这个建连完成后才能真正发起这个请求。\n<a name=\"zlxEH\"></a>\n### pre-connect\n为了解决上面这种问题，Chrome 引入了 [`Preconnect`](https://web.dev/uses-rel-preconnect/) （现在大部分浏览器都是支持的）。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585102598647-3d2dd3b0-fbfc-4bbc-99f5-10debdf6ee91.png#align=left&display=inline&height=150&name=image.png&originHeight=300&originWidth=736&size=76442&status=done&style=none&width=368)<br />我们可以在页面的 `<head>` 中加入\n```html\n<link rel=\"preconnect\" href=\"https://www.mocky.io\" crossorigin>\n```\n\n<br />来告知浏览器提前建立连接。<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585043302410-4fc5bf0c-b9f3-45ef-bba2-3ebbe7ce0ce0.png#align=left&display=inline&height=269&name=image.png&originHeight=538&originWidth=1994&size=401496&status=done&style=none&width=997)<br />可以看到这种情况下，我们在 JS 加载后前（实际上 `fetch` 这个时候才能开始执行），就开始建立连接。同时 `preconnect` 也附带着让浏览器提前进行了 DNS 解析。\n<a name=\"QIrav\"></a>\n### 连接复用\n当然如果直接使用同一个连接，即使不使用 `pre-connect` 就能天然减少额外的连接次数。\n<a name=\"cSppd\"></a>\n#### 域名收拢\n在 HTTP 1 时代，为了解决阻塞的问题，很多网站都做了分散域名的优化让多个请求可以并行加载。而在 HTTP 2 普及后，已经具备了连接复用的能力，使用多个分散的域名只会让我们消耗更高的连接成本。<br />\n<br />所以尽可能把域名收拢到相同域名，可以尽可能的减少建连的耗时。\n<a name=\"SbrZd\"></a>\n#### IP 收拢\n我们都知道，一个 TCP 连接是由一个四元组组成的（源 IP、源端口、目标 IP、目标端口），和域名其实没有关系。所以看起来很反直觉的一点是，当两个请求域名不同，但来自同一个 IP 时，同样可以复用连接（虽然会额外解析一次 DNS）。<br />\n<br />如果我们试用了类似于阿里云全站加速的技术，把页面和静态资源的 IP 指向同一个可以帮助我们减少重复的连接建立。\n<a name=\"7UdXx\"></a>\n### 连接为什么不复用\n<a name=\"8RMHh\"></a>\n#### 如何确定一个连接\n看起来无论是 `pre-connect` 还是链接复用都非常简单，但实际应用中并非如此。由于一些浏览器安全策略，不同的连接之间复用会受到一些限制。<br />\n<br />在 [https://fetch.spec.whatwg.org/#cors-protocol-and-credentials](https://fetch.spec.whatwg.org/#cors-protocol-and-credentials) 我们可以看到<br />\n\n> A user agent has an associated connection pool. A connection pool consists of zero or more connections. Each connection is identified by an origin (an origin) and credentials (a boolean).\n\n\n<br />即一个连接是由 `origin` 和 `credentials` 确定的，这里的 `origin` 并非单纯是指我们加载的连接的 `origin` ，而是对于页面上不同的资源来说，会遵循不同的策略（详细的策略见 [https://html.spec.whatwg.org/multipage/origin.html#concept-origin](https://html.spec.whatwg.org/multipage/origin.html#concept-origin)）。<br />\n<br />例如对于图像而言（其实对于 `script/css` 等来说也是一样的）\n> For images of `[img](https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element)` elements\n> If the [image data](https://html.spec.whatwg.org/multipage/images.html#img-req-data) is [CORS-cross-origin](https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-cross-origin)\n> A unique [opaque origin](https://html.spec.whatwg.org/multipage/origin.html#concept-origin-opaque) assigned when the image is created.\n> If the [image data](https://html.spec.whatwg.org/multipage/images.html#img-req-data) is [CORS-same-origin](https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-same-origin)\n> The `[img](https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element)` element's [node document](https://dom.spec.whatwg.org/#concept-node-document)'s [origin](https://html.spec.whatwg.org/multipage/origin.html#concept-origin).\n\n\n<br />即在有 `crossorigin` 时（不是单纯的是另外一个域名时），则其 `origin` 是图片的 `origin` 。<br />如果没有（一般来说是没有的），则 `origin` 是页面相同的 `origin` 。<br />\n<br />这意味着对于 `cors` 和 `non-cors` 的请求、`credentials=true` 和 `credentials=false` 的请求来说，他们的连接是不能复用的。<br />\n<br />例如 [https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html](https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html) 这个页面中，有四个来自同一个域名的 `img` ，但是后面两个是 `crossorigin` 的\n```html\n<img src=\"https://i.picsum.photos/id/1061/200/200.jpg\"/>\n<img src=\"https://i.picsum.photos/id/1061/200/300.jpg\"/>\n<img src=\"https://i.picsum.photos/id/1061/100/300.jpg\" crossorigin/>\n<img src=\"https://i.picsum.photos/id/1061/300/300.jpg\" crossorigin/>\n```\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585190581512-5105a07b-5871-4d57-ac19-829f926b978c.png#align=left&display=inline&height=458&name=image.png&originHeight=916&originWidth=1924&size=538733&status=done&style=none&width=962)<br />这样就会发现前面两个和后面两个分别能够复用连接，但是 `cors` 的和 `non-cors` 的不能复用连接。\n> 其实这里如果有 crossorigin=\"use-credentials\"，其和 cors 也不能复用连接\n\n具体这么做的原因主要是为了安全考虑，在 [https://github.com/whatwg/fetch/issues/341](https://github.com/whatwg/fetch/issues/341) 中有提到，在这里不展开。\n<a name=\"0RLnO\"></a>\n#### 怎么避免不复用\n知道了怎么确定一个连接后，我们就知道怎么避免连接没有复用的问题。无论是我们尝试让两个请求复用一个连接还是通过 `preconnect` 去提前建连，都应该保持其 `cors` 和 `credentials` 的一致性。<br />\n<br />由于实际规则其实蛮复杂的，并不能保证我们总是能判断策略是否符合预期，**还是建议通过 `WebPageTest` 等工具验证是否有多余的建连。**<br />\n<br />当然通过 Chrome Devtools 也能够验证这一点，我们可以在 Network 面板打开 `Connection ID` ，可以看到不同的连接使用的 `Connection ID` 是不同的。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1585191129731-7ff634e7-4184-4de0-98a0-d3339c388644.png#align=left&display=inline&height=101&name=image.png&originHeight=202&originWidth=2012&size=181126&status=done&style=none&width=1006)\n<a name=\"EyboO\"></a>\n## 为什么要握手\n为什么一定要先握手才能发送 HTTP 报文呢？这是由 TCP 本身的设计决定的，TCP 是一种可靠的传输层通信协议。所谓可靠，就是能保证数据流的顺序和完整性。\n<a name=\"qVj1E\"></a>\n### ISN\nTCP 本身在网络层（IP 协议）的上层，应用层的下层（HTTP 协议）。当应用层发起请求时，把包传给 TCP，TCP 将其分割成合适的大小，将其传递给网络层。<br />\n<br />为了保证不丢包，TCP 会给每一个包一个序号，接收端接受到后返回响应的确认消息。如果在合理的时间内没有收到确认，发送端则会认为发生了丢包，会尝试重新发送。<br />\n<br />而作为接收端，收到的包可能是乱序的（网络层不保证传输顺序）或者重复的（例如上面重新发送的时候就会重复），就会按照接收方的序号重新组建传输包的内容，然后将其交付给应用层。<br />\n<br />理解了 TCP 保证顺序和完整性的原理，就理解了 TCP 包的序号（Sequence Number**）**的重要性，而 TCP 握手时就是为了相互交换初始序列号（ISN，Inital Sequence Number**），**从而保证互相收到的包都能够保持正确的顺序。\n<a name=\"MZ1LO\"></a>\n#### 为什么不能用固定值\n从 ISN 的使用场景很自然可以想到，只要我们统一用一个固定值（例如0）作为 ISN，不就可以直接避免握手的性能损耗了么？<br />\n\n<a name=\"Uj6iu\"></a>\n##### 避免相邻的 TCP 连接互相干扰\n假设我们把 ISN 统一设置为 0，当我们的客户端和一个服务器建立起连接后传输了一部分数据包后，突然网络中断了，这个时候他们之间重新建立起连接，ISN 仍然为 0。<br />\n<br />这个时候服务器端可能同时收到序号为 N 的包，但却无从判断这个包属于哪一个 TCP 连接。\n<a name=\"RPdQe\"></a>\n### 结论\nTCP 为了确保能够把数据按照正确顺序、完整的发送给目标，必须通过握手同步 ISN。而由于 TCP 是全双工的（即双向通信），握手至少需要三次才能完成。<br />\n<br />其实对于客户端（浏览器）来说，从发送 ACK 到接受到 SYN-ACK 的过程就已经完成了 TCP 的建连，此时就可以开始给服务器端传输数据了。\n<a name=\"CeCLZ\"></a>\n## 能不能更快一点\n<a name=\"IPdfI\"></a>\n### TCP Fast Open\nTCP 协议每次都要等待 SYN-ACK+SYN-ACK 后，服务端的 TCP 才会把接收到的数据包传输给应用层，这样当连接不稳定时总是需要重新建立连接。那么，为什么不直接在第一次传输 SYN 时直接发送数据呢？<br />\n<br />事实上在 TCP 上有一个拓展标准是支持这么做的，称之为 TCP Fast Open，在 TFO 第一次建立连接时和正常的三次握手是相同的，但客户端会额外拿到一个 TFO Cookie。而当之后再重新建立连接（例如说断网后重连，或者移动设备切换网络登）时，则直接由 SYN 携带 TFO Cookie 和数据发送。服务端收到校验 Cookie 有效直接把数据交付给应用层。<br />\n<br />然而 TFO 并没有在所有的客户端和服务端默认打开，目前绝大多数浏览器都是不支持的，而且由于 TCP 作为协议层由操作系统实现，无法由应用层的浏览器、客户端等自由控制。\n<a name=\"Yk40Q\"></a>\n### QUIC/HTTP3\nQUIC 和 HTTP3 也解决了建连耗时的问题，不在本文展开，后续会在其他文章介绍。\n<a name=\"M0DPI\"></a>\n## 总结\n由于 HTTP 是基于 TCP 的，而 TCP 为了可靠性是面向连接的，需要通过三次握手建立连接。<br />\n<br />在 HTTP2 后我们有了多路复用可以让多个请求在一个连接中进行，但是连接的复用并不是单纯由域名决定的，同一个域名的连接可能不能复用一个连接，而不同的域名其实也可能复用一个连接。我们需要尽可能确定连接被正确的复用了。如果使用了 CDN 技术，我们可以尝试让页面和资源使用相同的 IP 从而复用链接。<br />\n<br />除此之外，我们可以使用 `preconnect` 来提前建连，同样的，也需要确定这个提前建立的连接被正确复用了。这对于即将发起的请求、即将到来的 `redirect` 等非常有效。<br />\n<a name=\"MzPEp\"></a>\n## 拓展阅读\n\n- [preconnect resource hint and the crossorigin attribute](https://crenshaw.dev/preconnect-resource-hint-crossorigin-attribute/)\n- [https://github.com/whatwg/fetch/issues/341](https://github.com/whatwg/fetch/issues/341)\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-traditional\" data-lake-element=\"root\"><p data-lake-id=\"701b726d13b99afe12db80975f7cb050\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们都知道 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">HTTP</code> 是基于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">TCP</code> 的，而 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">TCP</code> 是面向连接的。当我们向服务器请求一个页面时，首先需要建立 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">TCP</code> 连接，才能开始真正开始传输内容。</p><p data-lake-id=\"2e663bb2a08b41d7082093e13ad0ed17\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"c84cb01b549a897e8723dd026d58773d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这个时间平时不容易被人察觉，因为开发场景下我们往往不需要重新建立连接。但是在有些场景（尤其是新用户场景、landing page 等）却会对页面的性能造成很大的影响。</p><p data-lake-id=\"26e68a98b2709fa5aa9364dce0c211d1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"dddf6360027e7afba073a9056f10848a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">图中 TCP 的部分为我们常说的建连时间（这里包含了 SSL 握手时间，下文的建连时间也指的是这段时间），前面的 DNS 时间往往和建连时间同时出现，后面会讲到这一点。</p><p data-lake-id=\"3ad0e4f28cc587e81f58066c8454be57\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"ba244ba214d69e53eb135f34fa29ef64\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1584964408688-4c021c34-501c-408c-a704-1f30656ccbb1.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1584964408688-4c021c34-501c-408c-a704-1f30656ccbb1.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 641px; height: 383px;\"></span></p><h2 id=\"7I6OJ\" data-lake-id=\"ed139714b8defd154c0c9a2ce9b80c1e\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">建连应该耗时多久</h2><h3 id=\"ppSgn\" data-lake-id=\"aec6fc99a23c036e3e4b42fde7999e1e\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">RTT</h3><p data-lake-id=\"45bf22c587175efb792b5b45f3fca0b9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在介绍建连的耗时之前，我们先介绍一下 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">RTT(Round-Trip Time)</code> 的概念。RTT，即往返时延。指的是从发送端发送数据开始，到发送端收到来自接收端的确认（ACK）的时间。一般来说这个时间是由物理距离，网络传输路径等决定的。</p><p data-lake-id=\"2cd8bd6ec30045bf72f67e0d617311f9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"9542b20e62fccff34766d30f664cff42\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1584964922127-65173f15-e1ec-4fb1-ade1-74b65cfc8e8e.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1584964922127-65173f15-e1ec-4fb1-ade1-74b65cfc8e8e.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 360px; height: 292px;\"></span></p><p data-lake-id=\"4b8b701373a5aaed8f7fb696fcac10da\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"IaUYe\" data-lake-id=\"5c5b9ff977c317cdc838d53f21346707\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">RTT 一般是多久</h3><p data-lake-id=\"60d802055537737344b1783cec7574e2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">最简单的方式就是 Ping 一下，我们在 Ping 的时候看到的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">time=xxms</code>&nbsp; 一般<strong>接近于一个 RTT</strong></p><p data-lake-id=\"ea2c71281d817b8815ada0f84c65e387\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><br></strong></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"6pntV\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">PING <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">115</span>.239.211.112 (115.239.211.112): <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">56</span> data bytes\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">64</span> bytes from <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">115</span>.239.211.112: <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">icmp_seq</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span><span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ttl</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span><span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">55</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">time</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span><span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">4</span>.411 ms</span></span></pre></div></div></div><p data-lake-id=\"28be9d380dfce7d5e4a7c40af673c7c5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"2f340fe99ff3819e1a29c35cc3e9a305\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">实际上就是一来一回（下面是 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">tcpdump</code> 抓到的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">ping</code> ）：</p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"eP4yg\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">11</span>:59:42.631275 IP <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">30</span>.38.61.21 &gt; <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">115</span>.239.211.112: ICMP <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">echo</span> request, id <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">11482</span>, seq <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>, length <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">64</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">11</span>:59:42.635593 IP <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">115</span>.239.211.112 &gt; <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">30</span>.38.61.21: ICMP <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">echo</span> reply, id <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">11482</span>, seq <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>, length <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">64</span></span></span></pre></div></div></div><h3 id=\"ORwmh\" data-lake-id=\"edfca786170b32a20e4d25a407c676ed\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">建连需要多少个 RTT</h3><p data-lake-id=\"bd68d3a5009b831a52e330af75425a07\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">TCP 一种面向连接的通讯协议，在两个目标间发送 TCP 数据之前，TCP 需要通过三次握手建立起连接。而这个连接的过程其实是在交换一些初始数据，其中最重要的是 <span>Sequence Number。</span></p><p data-lake-id=\"d62ff75f2bd039b0e0b38f5c61306634\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"3f4da40a705675a10f24a60294ce6cb9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">很多地方尝试用各种看起来形象的比喻来形容三次握手，但是实际上握手的过程非常简单，为了避免造成错误的理解，我们就平铺直叙，后面会解释为什么一定要经过三次握手才能建立起连接。三次握手的过程如下：</p><p data-lake-id=\"e9aa99137cc2ac65c582a3083b269557\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ol start=\"1\" data-lake-id=\"ae782c153de151fcba33abab2649fbfe\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"3ba821df151261a3037b8db8b7101cef\">客户端向服务端发送 SYN，传输 seq = X</li><li data-lake-id=\"6aa1ce48a0476d48e744ac62ee3b5c59\">服务端向客户端发送 ACK X+1，表示收到，客户端可以从 X+1 作为 seq 发送消息。同时发送 SYN，seq = Y，把自己设置成 established 状态（可接收数据）</li><li data-lake-id=\"c0ad34e3667e458536c4a72709d24c93\">客户端向服务端发送 ACK Y+1<span>，表示收到，服务端可以从 Y+1 作为 seq 发送消息，</span><span>，把自己设置成 established 状态（可接收数据）</span></li></ol><p data-lake-id=\"f27a9d012a797e2ce40fd497eb70f3e3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"908da72338d6fc3b5215aa455a15be5d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>到了第三步客户端发送完 ACK 后就认为连接已经建立完毕（毕竟不会有第四个 ACK 再告诉它已经收到了 ACK），然后开始把应用层的数据（HTTP 报文）开始传输。而服务器端则是收到这个 ACK 后才会开始把收到的数据交付给应用层（HTTP）。</strong></p><p data-lake-id=\"eb0d2ec25de6dba421652cb31cfc53e7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><br></strong></p><p data-lake-id=\"472507a4da8faa495cd27cd68e9e5d3d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>所以在这个过程中，客户端在建连上话费的时间是一个 RTT。</strong></p><p data-lake-id=\"dca7d273f012522e76f94aa259e2e0e7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"cebe87baaadd492ea20360aab9697fd4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种情况说的是纯粹的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Connect</code> 时间，不包括 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">SSL</code> ，所以只是对 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">http</code> 协议而言的，如果是 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">https</code> 协议还需要再考虑 SSL 握手的时间，我们后续会在别的文章中介绍。</p><h4 id=\"guKHx\" data-lake-id=\"b7bcf1c42823a1671a02646edee25075\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">动手试试</h4><p data-lake-id=\"58a92a07d8dbc61f5ef32f8229e19671\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们可以使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">WireShark</code> 来抓取一次  <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">http</code> 请求来看看建连的过程。</p><p data-lake-id=\"6f82d2629bd5e1f4d3e91c0b00ea9bfe\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1584966581339-1ff4f09d-c1dc-4dab-a0ef-636e942cf5fa.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1584966581339-1ff4f09d-c1dc-4dab-a0ef-636e942cf5fa.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 746px; height: 406px;\"></span></p><p data-lake-id=\"3572ccc615c991183f2ec45a84451458\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">可以看到这里从发起 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">seq</code> 到收到 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">ack</code> （经过 1 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">RTT</code> ）后，客户端就没有再等待直接发起了 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">GET / HTTP/1.1</code> 的请求。</p><h2 id=\"tmNZ6\" data-lake-id=\"6edabe9926215f72c168798265f3ba84\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">如何优化建连时间</h2><h3 id=\"vhZdc\" data-lake-id=\"08f44c78a214025b18b2f1e4a4d41a47\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">例子</h3><p data-lake-id=\"89d97211206b061653c3bb9178cb8943\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们用一个简单的页面看看建连对网页性能的影响：<a href=\"https://xcodebuild.github.io/why-so-slow/connect/index.html\" target=\"_blank\">https://xcodebuild.github.io/why-so-slow/connect/index.html</a></p><p data-lake-id=\"ed2cb9a1d85cc99bca0f37ff7043a949\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"86f246784c65207315ed344629b8e3a6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这是一个测试页面，源代码托管在：<a href=\"https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html\" target=\"_blank\">https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html</a></p></blockquote><p data-lake-id=\"debcc747eadd173d286fd29fffd5b7ab\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"690597af27dff4cc48006593d105fac8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">就像上面说的，我们在开发场景下往往不需要重新连接，包括 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Disable Cache</code> 是不会禁用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">TCP</code> 的连接复用的，所以我们使用 <a href=\"https://www.webpagetest.org/\" target=\"_blank\">Webpage Test</a> 来看一下这个页面的性能状况。</p><p data-lake-id=\"cce34c452da003791c918ff8c26958f1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585020683958-c843ada1-7492-44d1-8c71-e65389fb9850.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585020683958-c843ada1-7492-44d1-8c71-e65389fb9850.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 746px; height: 455px;\"></span></p><p data-lake-id=\"800631c30623d7de088278a8c16ba509\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"7ef3910ef9899b2a2128d6981ee67e54\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们可以看到这这个页面的 JavaScript 文件以及后面的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">fetch</code> 请求都有个很长的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">DNS + Connect + SSL</code> 时间。因为他们的域名不同，所以需要重新解析域名。不是同一个 TCP 连接，所以需要重新建连（包括 SSL 握手）。</p><p data-lake-id=\"afcf8a7dcc3fa92d20f24e4aeccb86fe\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"9f704e170e8c88f5740719505af3123c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在图中这个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">fetch</code> 请求的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Connect + SSL</code> 一共耗时 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">500ms</code> ，意味着用户必须等待这个建连完成后才能真正发起这个请求。</p><h3 id=\"zlxEH\" data-lake-id=\"0744e0d629afe6e1b5a63ceb54cdf4c5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">pre-connect</h3><p data-lake-id=\"a6a97aebcf654d199cd72cde8a0e26b7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">为了解决上面这种问题，Chrome 引入了 <a href=\"https://web.dev/uses-rel-preconnect/\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Preconnect</code></a> （现在大部分浏览器都是支持的）。</p><p data-lake-id=\"137884bddae0f61b77e65c88eaae4151\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585102598647-3d2dd3b0-fbfc-4bbc-99f5-10debdf6ee91.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585102598647-3d2dd3b0-fbfc-4bbc-99f5-10debdf6ee91.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 368px; height: 150px;\"></span></p><p data-lake-id=\"4fa8837eaf14cae7bb776402bb2a91b1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们可以在页面的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">&lt;head&gt;</code> 中加入</p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"yWrSj\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">link</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">rel</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"preconnect\"</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">href</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"https://www.mocky.io\"</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">crossorigin</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span></span></span></pre></div></div></div><p data-lake-id=\"cdfa9385bcb1b76ec4f0ee2ac63b9dde\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"53b5923343d19fd0acf27b19c6906bba\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">来告知浏览器提前建立连接。</p><p data-lake-id=\"93387630c007351e1392c5103478f004\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585043302410-4fc5bf0c-b9f3-45ef-bba2-3ebbe7ce0ce0.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585043302410-4fc5bf0c-b9f3-45ef-bba2-3ebbe7ce0ce0.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 746px; height: 201px;\"></span></p><p data-lake-id=\"7e76604f0ebc96c939f484151b3ecb34\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">可以看到这种情况下，我们在 JS 加载后前（实际上 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">fetch</code> 这个时候才能开始执行），就开始建立连接。同时 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">preconnect</code> 也附带着让浏览器提前进行了 DNS 解析。</p><h3 id=\"QIrav\" data-lake-id=\"78a8bcb0e57657edb1fe385347d6c081\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">连接复用</h3><p data-lake-id=\"051097bcd53f9be26d32f8df0f6cd3ab\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当然如果直接使用同一个连接，即使不使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">pre-connect</code> 就能天然减少额外的连接次数。</p><h4 id=\"cSppd\" data-lake-id=\"ca062d8c857698ffe7d142655feb0366\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">域名收拢</h4><p data-lake-id=\"b294e747a4bb36c398558ede70b441a7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在 HTTP 1 时代，为了解决阻塞的问题，很多网站都做了分散域名的优化让多个请求可以并行加载。而在 HTTP 2 普及后，已经具备了连接复用的能力，使用多个分散的域名只会让我们消耗更高的连接成本。</p><p data-lake-id=\"517fab71968a2ac8b1146c92b4d8f5ad\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"81ac2cf0d027cb4e7b0c8779f03bc73f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">所以尽可能把域名收拢到相同域名，可以尽可能的减少建连的耗时。</p><h4 id=\"SbrZd\" data-lake-id=\"6100b4eaf78c4bd2b4c207e4eec8f186\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">IP 收拢</h4><p data-lake-id=\"af9a8d3461a997e1086ca6c62fe57224\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们都知道，一个 TCP 连接是由一个四元组组成的（源 IP、源端口、目标 IP、目标端口），和域名其实没有关系。所以看起来很反直觉的一点是，当两个请求域名不同，但来自同一个 IP 时，同样可以复用连接（虽然会额外解析一次 DNS）。</p><p data-lake-id=\"9409a5fdecfff4861dd6dc87b907fbfa\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"a0f641aa7ebbfe70182d8b29d31f18b5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">如果我们试用了类似于阿里云全站加速的技术，把页面和静态资源的 IP 指向同一个可以帮助我们减少重复的连接建立。</p><h3 id=\"7UdXx\" data-lake-id=\"e58da19aee88d4850ea291dcdfc5151b\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">连接为什么不复用</h3><h4 data-lake-id=\"1b651f3aa0903587dab0c887ae4e8dda\" id=\"8RMHh\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">如何确定一个连接</h4><p data-lake-id=\"2086181818360c3aa34716b282df07fe\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">看起来无论是 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">pre-connect</code> 还是链接复用都非常简单，但实际应用中并非如此。由于一些浏览器安全策略，不同的连接之间复用会受到一些限制。</p><p data-lake-id=\"776bd91c2054a7ca7cf91ddcbfd600d6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"26a63609679fc28034647fcd6ee470aa\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在 <a href=\"https://fetch.spec.whatwg.org/#cors-protocol-and-credentials\" target=\"_blank\">https://fetch.spec.whatwg.org/#cors-protocol-and-credentials</a> 我们可以看到</p><p data-lake-id=\"c49ba6356e1fe8e92318d172d6832c64\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"c9e20f7d007a80c9c582a97445231917\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">A user agent has an associated&nbsp;connection pool. A&nbsp;connection pool&nbsp;consists of zero or more&nbsp;connections. Each&nbsp;connection&nbsp;is identified by an&nbsp;origin&nbsp;(an&nbsp;origin) and&nbsp;credentials&nbsp;(a boolean).</p></blockquote><p data-lake-id=\"120ee7167ba71fc7dd6f2f283d9e1102\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"34c0f9d96c0bda363c43671201d68747\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">即一个连接是由 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">origin</code> 和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">credentials</code> 确定的，这里的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">origin</code> 并非单纯是指我们加载的连接的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">origin</code> ，而是对于页面上不同的资源来说，会遵循不同的策略（详细的策略见 <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin\" target=\"_blank\">https://html.spec.whatwg.org/multipage/origin.html#concept-origin</a>）。</p><p data-lake-id=\"773a24606f8283d083f79baae5b63709\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"6477e19caa9d2af0d79ab4ed3f510216\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">例如对于图像而言（其实对于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">script/css</code> 等来说也是一样的）</p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"44cf5ac260de4660c97ed053d5a201eb\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">For images of <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element\" target=\"_blank\">img</a></code> elements</p><p data-lake-id=\"3743496dad55c944f878841d4fb6c9c9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">If the <a href=\"https://html.spec.whatwg.org/multipage/images.html#img-req-data\" target=\"_blank\">image data</a> is <a href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-cross-origin\" target=\"_blank\">CORS-cross-origin</a></p><p data-lake-id=\"8559060a85109b496d1cf7cd0fe5fdce\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">A unique <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin-opaque\" target=\"_blank\">opaque origin</a> assigned when the image is created.</p><p data-lake-id=\"8db595db0ead478d1926ced1d12d5bb0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">If the <a href=\"https://html.spec.whatwg.org/multipage/images.html#img-req-data\" target=\"_blank\">image data</a> is <a href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-same-origin\" target=\"_blank\">CORS-same-origin</a></p><p data-lake-id=\"252c8fa7340ed1e946c894dd1704577e\" style=\"text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">The <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element\" target=\"_blank\">img</a></code> element's <a href=\"https://dom.spec.whatwg.org/#concept-node-document\" target=\"_blank\">node document</a>'s <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin\" target=\"_blank\">origin</a>.</p></blockquote><p data-lake-id=\"38738fd5a20e55a0d99e57adc35a1d0d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"b3e1190c1e148dfbdb6f28134b8e9afa\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">即在有 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">crossorigin</code> 时（不是单纯的是另外一个域名时），则其 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">origin</code> 是图片的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">origin</code> 。</p><p data-lake-id=\"2100e098b9b1fcb5ab9471fabcfcba5d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">如果没有（一般来说是没有的），则 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">origin</code> 是页面相同的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">origin</code> 。</p><p data-lake-id=\"b12094b5d23261d28ea6a8c7598686c9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"4a5c9cf7adab611267b47aa24c8b93a6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这意味着对于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">cors</code> 和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">non-cors</code> 的请求、<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>credentials=true</span></code> 和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>credentials=false</span></code> 的请求来说，他们的连接是不能复用的。</p><p data-lake-id=\"f4bc2d339c084a9ab5afa63396b6314d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"2c5a0136e3c65c9f0c98e8727e65e6bf\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">例如 <a href=\"https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html\" target=\"_blank\">https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html</a> 这个页面中，有四个来自同一个域名的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">img</code> ，但是后面两个是 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">crossorigin</code> 的</p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"qjOm4\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">img</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">src</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"https://i.picsum.photos/id/1061/200/200.jpg\"</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">img</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">src</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"https://i.picsum.photos/id/1061/200/300.jpg\"</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">img</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">src</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"https://i.picsum.photos/id/1061/100/300.jpg\"</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">crossorigin</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">img</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">src</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"https://i.picsum.photos/id/1061/300/300.jpg\"</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">crossorigin</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span></span></span></pre></div></div></div><p data-lake-id=\"5868cac9301043b06379a47479551182\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"9f8410e4d4ede8eb343bb39a9337f754\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585190581512-5105a07b-5871-4d57-ac19-829f926b978c.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585190581512-5105a07b-5871-4d57-ac19-829f926b978c.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 746px; height: 355px;\"></span></p><p data-lake-id=\"4da7628a3b87eee54f02504b0d61adf2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这样就会发现前面两个和后面两个分别能够复用连接，但是 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">cors</code> 的和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">non-cors</code> 的不能复用连接。</p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"12aa126383eb69dbc7340c9f2205f3da\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">其实这里如果有 crossorigin=\"use-credentials\"，其和 cors 也不能复用连接</p></blockquote><p data-lake-id=\"5600f710637ff3bdcf5cbe66c699316e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">具体这么做的原因主要是为了安全考虑，在 <a href=\"https://github.com/whatwg/fetch/issues/341\" target=\"_blank\">https://github.com/whatwg/fetch/issues/341</a> 中有提到，在这里不展开。</p><h4 data-lake-id=\"e872d748ee4bf8a610db0c1f81880c37\" id=\"0RLnO\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">怎么避免不复用</h4><p data-lake-id=\"a5b74125bb3297ce3f0faff01fdf7578\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">知道了怎么确定一个连接后，我们就知道怎么避免连接没有复用的问题。无论是我们尝试让两个请求复用一个连接还是通过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">preconnect</code> 去提前建连，都应该保持其 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">cors</code> 和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">credentials</code> 的一致性。</p><p data-lake-id=\"80cb4a22b79d8b28edd5791528c8b817\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"236c7fa1f7757395e21decdfb3ba3263\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">由于实际规则其实蛮复杂的，并不能保证我们总是能判断策略是否符合预期，<strong>还是建议通过 </strong><strong><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">WebPageTest</code></strong><strong>&nbsp;等工具验证是否有多余的建连。</strong></p><p data-lake-id=\"976905f2b2af29d300081e9a3216a9f4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"d45f6a86700f21654ffe21f1bce28cb7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当然通过 Chrome Devtools 也能够验证这一点，我们可以在 Network 面板打开 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Connection ID</code> ，可以看到不同的连接使用的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Connection ID</code> 是不同的。</p><p data-lake-id=\"0a3115b0b66ec5975000fb9396f6a6c3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"a2d4f632c2fa703c2abd8e56fa8c0440\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585191129731-7ff634e7-4184-4de0-98a0-d3339c388644.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1585191129731-7ff634e7-4184-4de0-98a0-d3339c388644.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 746px; height: 75px;\"></span></p><h2 id=\"EyboO\" data-lake-id=\"81e2aaea9defd8d7f05478e785575ef3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">为什么要握手</h2><p data-lake-id=\"cde95d2636384e8380030a65f73e99ec\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">为什么一定要先握手才能发送 HTTP 报文呢？这是由 TCP 本身的设计决定的，TCP 是一种可靠的传输层通信协议。所谓可靠，就是能保证数据流的顺序和完整性。</p><h3 id=\"qVj1E\" data-lake-id=\"ea5974f97f7c04f3e6b00ed283cd96d1\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">ISN</h3><p data-lake-id=\"f80fa130199732a4efe2053f764896ca\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">TCP 本身在网络层（IP 协议）的上层，应用层的下层（HTTP 协议）。当应用层发起请求时，把包传给 TCP，TCP 将其分割成合适的大小，将其传递给网络层。</p><p data-lake-id=\"e01f3acdba3193c10d03421381e3bdeb\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"f5f90712762731f0e0e43a9f5bb49b6a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">为了保证不丢包，TCP 会给每一个包一个序号，接收端接受到后返回响应的确认消息。如果在合理的时间内没有收到确认，发送端则会认为发生了丢包，会尝试重新发送。</p><p data-lake-id=\"734d2352f27650d5e07762ad813c6e79\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"264a4c99abf8ddb64c01bd36ce3e1df7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">而作为接收端，收到的包可能是乱序的（网络层不保证传输顺序）或者重复的（例如上面重新发送的时候就会重复），就会按照接收方的序号重新组建传输包的内容，然后将其交付给应用层。</p><p data-lake-id=\"9e0759b2beeb3429812ef38586a60bdd\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"059e672ae7b629ceeb0d2bdc6a290df9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">理解了 TCP 保证顺序和完整性的原理，就理解了 TCP 包的序号（Sequence Number<strong>）</strong>的重要性，而 TCP 握手时就是为了相互交换初始序列号（ISN，Inital&nbsp;Sequence Number<strong>），</strong>从而保证互相收到的包都能够保持正确的顺序。</p><h4 id=\"MZ1LO\" data-lake-id=\"5cce42754381d63a51a1dc3e7956a09d\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">为什么不能用固定值</h4><p data-lake-id=\"18011ddb451b01aa6ba276337fff3b8e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">从 ISN 的使用场景很自然可以想到，只要我们统一用一个固定值（例如0）作为 ISN，不就可以直接避免握手的性能损耗了么？</p><p data-lake-id=\"a2586b51e95547afd1edb1ed910b7fc9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h5 id=\"Uj6iu\" data-lake-id=\"9d4f80a69f9a2664d2d6f0159be0e6b2\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 14px; line-height: 24px;\">避免相邻的 TCP 连接互相干扰</h5><p data-lake-id=\"8bf52e2b1a4316490f35ca9d6b04db7f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">假设我们把 ISN 统一设置为 0，当我们的客户端和一个服务器建立起连接后传输了一部分数据包后，突然网络中断了，这个时候他们之间重新建立起连接，ISN 仍然为 0。</p><p data-lake-id=\"d29f47fe1cae82b12397edfea2e924d0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"15d28bdcec02026342161eb18b1cbf03\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这个时候服务器端可能同时收到序号为 N 的包，但却无从判断这个包属于哪一个 TCP 连接。</p><h3 id=\"RPdQe\" data-lake-id=\"7c95bc17c4e4f24397713d76f9f74d3f\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">结论</h3><p data-lake-id=\"63d7a2e8999188e7ba6aa1b2379b27c2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">TCP 为了确保能够把数据按照正确顺序、完整的发送给目标，必须通过握手同步 ISN。而由于 TCP 是全双工的（即双向通信），握手至少需要三次才能完成。</p><p data-lake-id=\"a2eeb26c9d779f5c0c3e49318325be5e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"a49c46cc5dca4d8d5a0845bb2cec370f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">其实对于客户端（浏览器）来说，从发送 ACK 到接受到 SYN-ACK 的过程就已经完成了 TCP 的建连，此时就可以开始给服务器端传输数据了。</p><h2 data-lake-id=\"33517611d33f530fc641ce7720d99b7c\" id=\"CeCLZ\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">能不能更快一点</h2><h3 data-lake-id=\"1efdc8ddd8a0577afe77d27d70682d30\" id=\"IPdfI\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">TCP Fast Open</h3><p data-lake-id=\"d0eb46a0c03ff2ebf3ebeabf0b1956a2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">TCP 协议每次都要等待 SYN-ACK+SYN-ACK 后，服务端的 TCP 才会把接收到的数据包传输给应用层，这样当连接不稳定时总是需要重新建立连接。那么，为什么不直接在第一次传输 SYN 时直接发送数据呢？</p><p data-lake-id=\"6fe199de0acf7f46d8652bc017a7e331\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"2ac239e483c6bd375d42c59ff1c429e0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">事实上在 TCP 上有一个拓展标准是支持这么做的，称之为 TCP Fast Open，在 TFO 第一次建立连接时和正常的三次握手是相同的，但客户端会额外拿到一个 TFO Cookie。而当之后再重新建立连接（例如说断网后重连，或者移动设备切换网络登）时，则直接由 SYN 携带 TFO Cookie 和数据发送。服务端收到校验 Cookie 有效直接把数据交付给应用层。</p><p data-lake-id=\"a736d223f5c5752a64eaf631f7d69717\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"9c165643bdb5ed9dfa455d1176bdb58e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">然而 TFO 并没有在所有的客户端和服务端默认打开，目前绝大多数浏览器都是不支持的，而且由于 TCP 作为协议层由操作系统实现，无法由应用层的浏览器、客户端等自由控制。</p><h3 data-lake-id=\"513c89fb34f3685e7a5d4da8f26831d5\" id=\"Yk40Q\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">QUIC/HTTP3</h3><p data-lake-id=\"3d4080ad9779ba79973b59c1547da18c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">QUIC 和 HTTP3 也解决了建连耗时的问题，不在本文展开，后续会在其他文章介绍。</p><h2 data-lake-id=\"9338d05edc1197048619caa01d340429\" id=\"M0DPI\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">总结</h2><p data-lake-id=\"b5dfaef9a22789393626a871f788c0b4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">由于 HTTP 是基于 TCP 的，而 TCP 为了可靠性是面向连接的，需要通过三次握手建立连接。</p><p data-lake-id=\"2bb56bc5bcd4debb387b8c681334888e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"2e3efb623bbc2f4c42176684612714d3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在 HTTP2 后我们有了多路复用可以让多个请求在一个连接中进行，但是连接的复用并不是单纯由域名决定的，同一个域名的连接可能不能复用一个连接，而不同的域名其实也可能复用一个连接。我们需要尽可能确定连接被正确的复用了。如果使用了 CDN 技术，我们可以尝试让页面和资源使用相同的 IP 从而复用链接。</p><p data-lake-id=\"7c8f71d4911813d5114e8807269f0c17\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"d106bc70ca5c39b06d8855b1bac12469\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">除此之外，我们可以使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">preconnect</code> 来提前建连，同样的，也需要确定这个提前建立的连接被正确复用了。这对于即将发起的请求、即将到来的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">redirect</code> 等非常有效。<span style=\"background-color: transparent;\"><br></span></p><h2 data-lake-id=\"4ce15ad4ba6bcd2a8e4b85ad54ecf2cd\" id=\"MzPEp\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">拓展阅读</h2><ul data-lake-id=\"90b7a58b04b97e8452e8bbd6083abeb6\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"753323fd1967269bdc238849416b4f77\"><a href=\"https://crenshaw.dev/preconnect-resource-hint-crossorigin-attribute/\" target=\"_blank\">preconnect resource hint and the crossorigin attribute</a></li><li data-lake-id=\"f1e180aa7f197bed5e2efa18a0c1b283\"><a href=\"https://github.com/whatwg/fetch/issues/341\" target=\"_blank\">https://github.com/whatwg/fetch/issues/341</a></li></ul></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"701b726d13b99afe12db80975f7cb050\">我们都知道 <code>HTTP</code> 是基于 <code>TCP</code> 的，而 <code>TCP</code> 是面向连接的。当我们向服务器请求一个页面时，首先需要建立 <code>TCP</code> 连接，才能开始真正开始传输内容。</p><p data-lake-id=\"2e663bb2a08b41d7082093e13ad0ed17\"><br /></p><p data-lake-id=\"c84cb01b549a897e8723dd026d58773d\">这个时间平时不容易被人察觉，因为开发场景下我们往往不需要重新建立连接。但是在有些场景（尤其是新用户场景、landing page 等）却会对页面的性能造成很大的影响。</p><p data-lake-id=\"26e68a98b2709fa5aa9364dce0c211d1\"><br /></p><p data-lake-id=\"dddf6360027e7afba073a9056f10848a\">图中 TCP 的部分为我们常说的建连时间（这里包含了 SSL 握手时间，下文的建连时间也指的是这段时间），前面的 DNS 时间往往和建连时间同时出现，后面会讲到这一点。</p><p data-lake-id=\"3ad0e4f28cc587e81f58066c8454be57\"><br /></p><p data-lake-id=\"ba244ba214d69e53eb135f34fa29ef64\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1584964408688-4c021c34-501c-408c-a704-1f30656ccbb1.png%22%2C%22originWidth%22%3A1473%2C%22originHeight%22%3A879%2C%22name%22%3A%22image.png%22%2C%22size%22%3A106021%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A425.02188%2C%22y%22%3A10.740625%2C%22width%22%3A144.23131999999998%2C%22height%22%3A18.412501%2C%22text%22%3A%22navigationStart%22%7D%2C%7B%22x%22%3A451.10626%2C%22y%22%3A47.565628%2C%22width%22%3A121.21564000000001%2C%22height%22%3A18.412501999999996%2C%22text%22%3A%22redirectstart%22%7D%2C%7B%22x%22%3A463.38126%2C%22y%22%3A84.390625%2C%22width%22%3A113.54379000000006%2C%22height%22%3A21.481255000000004%2C%22text%22%3A%22redirectEnd%22%7D%2C%7B%22x%22%3A501.74063%2C%22y%22%3A118.14688%2C%22width%22%3A105.87192000000005%2C%22height%22%3A19.946870000000004%2C%22text%22%3A%22fetchStart%22%7D%2C%7B%22x%22%3A556.97815%2C%22y%22%3A148.83438%2C%22width%22%3A193.33124999999995%2C%22height%22%3A18.412509999999997%2C%22text%22%3A%22domainLookupStart%22%7D%2C%7B%22x%22%3A601.47504%2C%22y%22%3A181.05626%2C%22width%22%3A148.83435999999995%2C%22height%22%3A16.87813%2C%22text%22%3A%22domainLookupEng%22%7D%2C%7B%22x%22%3A664.3844%2C%22y%22%3A213.27814%2C%22width%22%3A110.47503999999992%2C%22height%22%3A19.946859999999987%2C%22text%22%3A%22connectstart%22%7D%2C%7B%22x%22%3A705.8125%2C%22y%22%3A250.10313%2C%22width%22%3A217.8813%2C%22height%22%3A19.946890000000025%2C%22text%22%3A%22(secureConnectionStart)%22%7D%2C%7B%22x%22%3A727.29376%2C%22y%22%3A285.39377%2C%22width%22%3A108.94067999999993%2C%22height%22%3A18.412499999999966%2C%22text%22%3A%22connectEnd%22%7D%2C%7B%22x%22%3A751.8438%2C%22y%22%3A313.0125%2C%22width%22%3A135.02499999999998%2C%22height%22%3A19.94688000000002%2C%22text%22%3A%22regueststart%22%7D%2C%7B%22x%22%3A833.16565%2C%22y%22%3A348.30313%2C%22width%22%3A130.42184999999995%2C%22height%22%3A18.412509999999997%2C%22text%22%3A%22responseStart%22%7D%2C%7B%22x%22%3A914.48755%2C%22y%22%3A383.59378%2C%22width%22%3A121.2155499999999%2C%22height%22%3A16.878120000000024%2C%22text%22%3A%22responseEnd%22%7D%2C%7B%22x%22%3A21.48125%2C%22y%22%3A463.38126%2C%22width%22%3A62.909375%2C%22height%22%3A18.412500000000023%2C%22text%22%3A%22Prompt%22%7D%2C%7B%22x%22%3A296.1344%2C%22y%22%3A475.65628%2C%22width%22%3A41.42809999999997%2C%22height%22%3A19.946870000000047%2C%22text%22%3A%22App%22%7D%2C%7B%22x%22%3A386.6625%2C%22y%22%3A486.39688%2C%22width%22%3A39.89376999999996%2C%22height%22%3A18.412519999999972%2C%22text%22%3A%22DNS%22%7D%2C%7B%22x%22%3A756.4469%2C%22y%22%3A486.39688%2C%22width%22%3A87.45939999999996%2C%22height%22%3A19.94689999999997%2C%22text%22%3A%22Response%22%7D%2C%7B%22x%22%3A471.05313%2C%22y%22%3A487.93127%2C%22width%22%3A33.75626999999997%2C%22height%22%3A16.87813%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A997.3438%2C%22y%22%3A487.93127%2C%22width%22%3A95.13130000000012%2C%22height%22%3A19.94686999999999%2C%22text%22%3A%22Processing%22%7D%2C%7B%22x%22%3A35.290627%2C%22y%22%3A489.46564%2C%22width%22%3A32.221878000000004%2C%22height%22%3A15.343759999999975%2C%22text%22%3A%22for%22%7D%2C%7B%22x%22%3A153.4375%2C%22y%22%3A489.46564%2C%22width%22%3A72.11563000000001%2C%22height%22%3A15.343759999999975%2C%22text%22%3A%22redirect%22%7D%2C%7B%22x%22%3A587.66565%2C%22y%22%3A489.46564%2C%22width%22%3A75.18439000000001%2C%22height%22%3A15.343759999999975%2C%22text%22%3A%22Request%22%7D%2C%7B%22x%22%3A1215.2251%2C%22y%22%3A489.46564%2C%22width%22%3A69.04689999999982%2C%22height%22%3A15.343759999999975%2C%22text%22%3A%22onLoad%22%7D%2C%7B%22x%22%3A288.46252%2C%22y%22%3A501.74063%2C%22width%22%3A53.703130000000044%2C%22height%22%3A15.34376999999995%2C%22text%22%3A%22cache%22%7D%2C%7B%22x%22%3A21.48125%2C%22y%22%3A514.0156%2C%22width%22%3A61.375005%2C%22height%22%3A18.4125600000001%2C%22text%22%3A%22unload%22%7D%2C%7B%22x%22%3A138.09375%2C%22y%22%3A553.9094%2C%22width%22%3A64.44375%2C%22height%22%3A18.412500000000023%2C%22text%22%3A%22unIoaD%22%7D%2C%7B%22x%22%3A1299.6157%2C%22y%22%3A583.0625%2C%22width%22%3A141.1624999999999%2C%22height%22%3A19.946900000000028%2C%22text%22%3A%22LoadEventEnd%22%7D%2C%7B%22x%22%3A1279.6688%2C%22y%22%3A622.9563%2C%22width%22%3A144.23120000000017%2C%22height%22%3A16.878099999999904%2C%22text%22%3A%22loadEventstart%22%7D%2C%7B%22x%22%3A1221.3625%2C%22y%22%3A656.7125%2C%22width%22%3A136.5594000000001%2C%22height%22%3A19.946900000000028%2C%22text%22%3A%22domComplete%22%7D%2C%7B%22x%22%3A1178.4%2C%22y%22%3A695.0719%2C%22width%22%3A185.6594%2C%22height%22%3A21.48126000000002%2C%22text%22%3A%22domContentLoaded%22%7D%2C%7B%22x%22%3A1133.9032%2C%22y%22%3A733.4313%2C%22width%22%3A142.69690000000014%2C%22height%22%3A19.946900000000028%2C%22text%22%3A%22domlnteractive%22%7D%2C%7B%22x%22%3A1104.75%2C%22y%22%3A771.79065%2C%22width%22%3A118.14699999999993%2C%22height%22%3A19.946900000000028%2C%22text%22%3A%22domloading%22%7D%2C%7B%22x%22%3A1040.3063%2C%22y%22%3A805.54694%2C%22width%22%3A102.80310000000009%2C%22height%22%3A18.41246000000001%2C%22text%22%3A%22unloadEnd%22%7D%2C%7B%22x%22%3A1009.6188%2C%22y%22%3A845.4407%2C%22width%22%3A113.54380000000015%2C%22height%22%3A15.343700000000013%2C%22text%22%3A%22unloadstart%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22navigationStart%20redirectstart%20redirectEnd%20fetchStart%20domainLookupStart%20domainLookupEng%20connectstart%20(secureConnectionStart)%20connectEnd%20regueststart%20responseStart%20responseEnd%20Prompt%20App%20DNS%20Response%20TCP%20Processing%20for%20redirect%20Request%20onLoad%20cache%20unload%20unIoaD%20LoadEventEnd%20loadEventstart%20domComplete%20domContentLoaded%20domlnteractive%20domloading%20unloadEnd%20unloadstart%22%2C%22width%22%3A641%2C%22height%22%3A383%7D\"></card></p><h2 id=\"7I6OJ\" data-lake-id=\"ed139714b8defd154c0c9a2ce9b80c1e\">建连应该耗时多久</h2><h3 id=\"ppSgn\" data-lake-id=\"aec6fc99a23c036e3e4b42fde7999e1e\">RTT</h3><p data-lake-id=\"45bf22c587175efb792b5b45f3fca0b9\">在介绍建连的耗时之前，我们先介绍一下 <code>RTT(Round-Trip Time)</code> 的概念。RTT，即往返时延。指的是从发送端发送数据开始，到发送端收到来自接收端的确认（ACK）的时间。一般来说这个时间是由物理距离，网络传输路径等决定的。</p><p data-lake-id=\"2cd8bd6ec30045bf72f67e0d617311f9\"><br /></p><p data-lake-id=\"9542b20e62fccff34766d30f664cff42\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1584964922127-65173f15-e1ec-4fb1-ade1-74b65cfc8e8e.png%22%2C%22originWidth%22%3A720%2C%22originHeight%22%3A584%2C%22name%22%3A%22image.png%22%2C%22size%22%3A197676%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A0%2C%22y%22%3A87%2C%22width%22%3A90.75%2C%22height%22%3A15.75%2C%22text%22%3A%22lnitiateTCP%22%7D%2C%7B%22x%22%3A-1.5%2C%22y%22%3A108.75%2C%22width%22%3A89.25%2C%22height%22%3A13.5%2C%22text%22%3A%22connection%22%7D%2C%7B%22x%22%3A115.5%2C%22y%22%3A190.5%2C%22width%22%3A36%2C%22height%22%3A16.5%2C%22text%22%3A%22RTT%22%7D%2C%7B%22x%22%3A-0.75%2C%22y%22%3A273%2C%22width%22%3A94.5%2C%22height%22%3A17.25%2C%22text%22%3A%22Requestfile%22%7D%2C%7B%22x%22%3A118.5%2C%22y%22%3A356.25%2C%22width%22%3A29.25%2C%22height%22%3A15%2C%22text%22%3A%22RTT-%22%7D%2C%7B%22x%22%3A531%2C%22y%22%3A374.25%2C%22width%22%3A163.5%2C%22height%22%3A17.25%2C%22text%22%3A%22Timetotransmitfile%22%7D%2C%7B%22x%22%3A-1.5%2C%22y%22%3A453%2C%22width%22%3A154.5%2C%22height%22%3A15%2C%22text%22%3A%22Entirefilereceived%22%7D%2C%7B%22x%22%3A153.75%2C%22y%22%3A534.75%2C%22width%22%3A42.75%2C%22height%22%3A16.5%2C%22text%22%3A%22Time%22%7D%2C%7B%22x%22%3A483.75%2C%22y%22%3A537.75%2C%22width%22%3A39%2C%22height%22%3A12.75%2C%22text%22%3A%22Time%22%7D%2C%7B%22x%22%3A141.75%2C%22y%22%3A556.5%2C%22width%22%3A67.5%2C%22height%22%3A15%2C%22text%22%3A%22atclient%22%7D%2C%7B%22x%22%3A468%2C%22y%22%3A556.5%2C%22width%22%3A71.25%2C%22height%22%3A14.25%2C%22text%22%3A%22atserver%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22lnitiateTCP%20connection%20RTT%20Requestfile%20RTT-%20Timetotransmitfile%20Entirefilereceived%20Time%20Time%20atclient%20atserver%22%2C%22width%22%3A360%2C%22height%22%3A292%7D\"></card></p><p data-lake-id=\"4b8b701373a5aaed8f7fb696fcac10da\"><br /></p><h3 id=\"IaUYe\" data-lake-id=\"5c5b9ff977c317cdc838d53f21346707\">RTT 一般是多久</h3><p data-lake-id=\"60d802055537737344b1783cec7574e2\">最简单的方式就是 Ping 一下，我们在 Ping 的时候看到的 <code>time=xxms</code>  一般<strong>接近于一个 RTT</strong></p><p data-lake-id=\"ea2c71281d817b8815ada0f84c65e387\"><strong><br /></strong></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22PING%20115.239.211.112%20(115.239.211.112)%3A%2056%20data%20bytes%5Cn64%20bytes%20from%20115.239.211.112%3A%20icmp_seq%3D0%20ttl%3D55%20time%3D4.411%20ms%22%2C%22id%22%3A%226pntV%22%7D\"></card><p data-lake-id=\"28be9d380dfce7d5e4a7c40af673c7c5\"><br /></p><p data-lake-id=\"2f340fe99ff3819e1a29c35cc3e9a305\">实际上就是一来一回（下面是 <code>tcpdump</code> 抓到的 <code>ping</code> ）：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%2211%3A59%3A42.631275%20IP%2030.38.61.21%20%3E%20115.239.211.112%3A%20ICMP%20echo%20request%2C%20id%2011482%2C%20seq%200%2C%20length%2064%5Cn11%3A59%3A42.635593%20IP%20115.239.211.112%20%3E%2030.38.61.21%3A%20ICMP%20echo%20reply%2C%20id%2011482%2C%20seq%200%2C%20length%2064%22%2C%22id%22%3A%22eP4yg%22%7D\"></card><h3 id=\"ORwmh\" data-lake-id=\"edfca786170b32a20e4d25a407c676ed\">建连需要多少个 RTT</h3><p data-lake-id=\"bd68d3a5009b831a52e330af75425a07\">TCP 一种面向连接的通讯协议，在两个目标间发送 TCP 数据之前，TCP 需要通过三次握手建立起连接。而这个连接的过程其实是在交换一些初始数据，其中最重要的是 <span>Sequence Number。</span></p><p data-lake-id=\"d62ff75f2bd039b0e0b38f5c61306634\"><br /></p><p data-lake-id=\"3f4da40a705675a10f24a60294ce6cb9\">很多地方尝试用各种看起来形象的比喻来形容三次握手，但是实际上握手的过程非常简单，为了避免造成错误的理解，我们就平铺直叙，后面会解释为什么一定要经过三次握手才能建立起连接。三次握手的过程如下：</p><p data-lake-id=\"e9aa99137cc2ac65c582a3083b269557\"><br /></p><ol start=\"1\" data-lake-id=\"ae782c153de151fcba33abab2649fbfe\"><li data-lake-id=\"3ba821df151261a3037b8db8b7101cef\">客户端向服务端发送 SYN，传输 seq = X</li><li data-lake-id=\"6aa1ce48a0476d48e744ac62ee3b5c59\">服务端向客户端发送 ACK X+1，表示收到，客户端可以从 X+1 作为 seq 发送消息。同时发送 SYN，seq = Y，把自己设置成 established 状态（可接收数据）</li><li data-lake-id=\"c0ad34e3667e458536c4a72709d24c93\">客户端向服务端发送 ACK Y+1<span>，表示收到，服务端可以从 Y+1 作为 seq 发送消息，</span><span>，把自己设置成 established 状态（可接收数据）</span></li></ol><p data-lake-id=\"f27a9d012a797e2ce40fd497eb70f3e3\"><br /></p><p data-lake-id=\"908da72338d6fc3b5215aa455a15be5d\"><strong>到了第三步客户端发送完 ACK 后就认为连接已经建立完毕（毕竟不会有第四个 ACK 再告诉它已经收到了 ACK），然后开始把应用层的数据（HTTP 报文）开始传输。而服务器端则是收到这个 ACK 后才会开始把收到的数据交付给应用层（HTTP）。</strong></p><p data-lake-id=\"eb0d2ec25de6dba421652cb31cfc53e7\"><strong><br /></strong></p><p data-lake-id=\"472507a4da8faa495cd27cd68e9e5d3d\"><strong>所以在这个过程中，客户端在建连上话费的时间是一个 RTT。</strong></p><p data-lake-id=\"dca7d273f012522e76f94aa259e2e0e7\"><br /></p><p data-lake-id=\"cebe87baaadd492ea20360aab9697fd4\">这种情况说的是纯粹的 <code>Connect</code> 时间，不包括 <code>SSL</code> ，所以只是对 <code>http</code> 协议而言的，如果是 <code>https</code> 协议还需要再考虑 SSL 握手的时间，我们后续会在别的文章中介绍。</p><h4 id=\"guKHx\" data-lake-id=\"b7bcf1c42823a1671a02646edee25075\">动手试试</h4><p data-lake-id=\"58a92a07d8dbc61f5ef32f8229e19671\">我们可以使用 <code>WireShark</code> 来抓取一次  <code>http</code> 请求来看看建连的过程。</p><p data-lake-id=\"6f82d2629bd5e1f4d3e91c0b00ea9bfe\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1584966581339-1ff4f09d-c1dc-4dab-a0ef-636e942cf5fa.png%22%2C%22originWidth%22%3A2192%2C%22originHeight%22%3A1194%2C%22name%22%3A%22image.png%22%2C%22size%22%3A1880284%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1027.5%2C%22y%22%3A6.85%2C%22width%22%3A134.71669999999995%2C%22height%22%3A29.683332999999998%2C%22text%22%3A%22Wi-FI%3AenO%22%7D%2C%7B%22x%22%3A1264.9667%2C%22y%22%3A52.516666%2C%22width%22%3A319.6666%2C%22height%22%3A52.516664000000006%2C%22text%22%3A%220Q%E8%B1%86I%22%7D%2C%7B%22x%22%3A36.533333%2C%22y%22%3A125.58333%2C%22width%22%3A335.649987%2C%22height%22%3A29.683329999999998%2C%22text%22%3A%22ip-addr220.181.38.148%22%7D%2C%7B%22x%22%3A9.133333%2C%22y%22%3A171.25%2C%22width%22%3A31.966667%2C%22height%22%3A25.11667%2C%22text%22%3A%22NO.%22%7D%2C%7B%22x%22%3A680.4333%2C%22y%22%3A171.25%2C%22width%22%3A159.83335999999997%2C%22height%22%3A29.683330000000012%2C%22text%22%3A%22Destination%22%7D%2C%7B%22x%22%3A1127.9667%2C%22y%22%3A171.25%2C%22width%22%3A171.25%2C%22height%22%3A25.11667%2C%22text%22%3A%22olLengt-lnfo%22%7D%2C%7B%22x%22%3A152.98334%2C%22y%22%3A173.53333%2C%22width%22%3A52.51666%2C%22height%22%3A22.833339999999993%2C%22text%22%3A%22Time%22%7D%2C%7B%22x%22%3A321.94998%2C%22y%22%3A173.53333%2C%22width%22%3A141.56668000000002%2C%22height%22%3A25.11667%2C%22text%22%3A%22Source%22%7D%2C%7B%22x%22%3A1011.51666%2C%22y%22%3A173.53333%2C%22width%22%3A123.30004000000008%2C%22height%22%3A22.833339999999993%2C%22text%22%3A%22Protocol0%22%7D%2C%7B%22x%22%3A68.5%2C%22y%22%3A203.21666%2C%22width%22%3A91.33332999999999%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%22512464%22%7D%2C%7B%22x%22%3A687.2833%2C%22y%22%3A203.21666%2C%22width%22%3A221.48335999999995%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1276.3833%2C%22y%22%3A203.21666%2C%22width%22%3A468.0834%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%226023980%5BS%5DSeq-owin-65535%22%7D%2C%7B%22x%22%3A1778.7167%2C%22y%22%3A203.21666%2C%22width%22%3A401.86659999999983%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%22Len-OMSS-1460WS-64TSva.%22%7D%2C%7B%22x%22%3A137%2C%22y%22%3A205.5%2C%22width%22%3A152.98334%2C%22height%22%3A25.11667%2C%22text%22%3A%22%3A464.067930%22%7D%2C%7B%22x%22%3A363.05%2C%22y%22%3A203.21666%2C%22width%22%3A198.65000000000003%2C%22height%22%3A25.11667%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1029.7833%2C%22y%22%3A205.5%2C%22width%22%3A38.816699999999855%2C%22height%22%3A25.11667%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A1080.0166%2C%22y%22%3A223.76666%2C%22width%22%3A100.46670000000017%2C%22height%22%3A36.53334000000001%2C%22text%22%3A%221RTT%22%7D%2C%7B%22x%22%3A1025.2167%2C%22y%22%3A235.18333%2C%22width%22%3A50.2333000000001%2C%22height%22%3A29.683339999999987%2C%22text%22%3A%22TCP1%22%7D%2C%7B%22x%22%3A70.78333%2C%22y%22%3A237.46666%2C%22width%22%3A68.5%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%2251256%22%7D%2C%7B%22x%22%3A360.76666%2C%22y%22%3A239.75%2C%22width%22%3A232.89994000000002%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A689.56665%2C%22y%22%3A239.75%2C%22width%22%3A200.93335000000002%2C%22height%22%3A29.68331999999998%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1203.3167%2C%22y%22%3A239.75%2C%22width%22%3A595.9498999999998%2C%22height%22%3A29.68331999999998%2C%22text%22%3A%22788060239%5BY%2CACKseq-oAck-win%22%7D%2C%7B%22x%22%3A137%2C%22y%22%3A239.75%2C%22width%22%3A155.26666%2C%22height%22%3A25.11667%2C%22text%22%3A%22564.099483%22%7D%2C%7B%22x%22%3A1721.6333%2C%22y%22%3A239.75%2C%22width%22%3A452.1001000000001%2C%22height%22%3A25.11667%2C%22text%22%3A%22ck-1win-8192Len-OMSS-1452%22%7D%2C%7B%22x%22%3A70.78333%2C%22y%22%3A276.28333%2C%22width%22%3A70.78333999999998%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%2251266%22%7D%2C%7B%22x%22%3A694.1333%2C%22y%22%3A276.28333%2C%22width%22%3A221.48334%2C%22height%22%3A25.11667%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A276.28333%2C%22width%22%3A150.69999%2C%22height%22%3A25.11667%2C%22text%22%3A%22664%2C099568%22%7D%2C%7B%22x%22%3A1173.6333%2C%22y%22%3A276.28333%2C%22width%22%3A579.9667%2C%22height%22%3A29.683340000000044%2C%22text%22%3A%225460239%2B80TACKISeq1Ck-1Win-2%22%7D%2C%7B%22x%22%3A1516.1333%2C%22y%22%3A303.68332%2C%22width%22%3A595.9499999999998%2C%22height%22%3A41.10001%2C%22text%22%3A%22GET%E8%AF%B7%E6%B1%82%E5%92%8CACK%E5%90%8C%E6%97%B6%E5%8F%91%E5%87%BA%22%7D%2C%7B%22x%22%3A691.85%2C%22y%22%3A310.53333%2C%22width%22%3A230.61669999999992%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1182.7666%2C%22y%22%3A310.53333%2C%22width%22%3A342.5%2C%22height%22%3A31.966670000000022%2C%22text%22%3A%22127GET%2FHTTP%2F1.1%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A310.53333%2C%22width%22%3A75.35%2C%22height%22%3A29.683310000000006%2C%22text%22%3A%2251276%22%7D%2C%7B%22x%22%3A365.3333%2C%22y%22%3A310.53333%2C%22width%22%3A198.65004%2C%22height%22%3A29.683310000000006%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1020.64996%2C%22y%22%3A312.81665%2C%22width%22%3A66.21674000000007%2C%22height%22%3A25.11667%2C%22text%22%3A%22HTTP%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A312.81665%2C%22width%22%3A150.69999%2C%22height%22%3A25.11667%2C%22text%22%3A%22764.099648%22%7D%2C%7B%22x%22%3A365.3333%2C%22y%22%3A347.06665%2C%22width%22%3A223.76670000000001%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A347.06665%2C%22width%22%3A198.65004999999996%2C%22height%22%3A25.11667%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1022.9333%2C%22y%22%3A347.06665%2C%22width%22%3A47.94999999999993%2C%22height%22%3A22.833349999999996%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A68.5%2C%22y%22%3A347.06665%2C%22width%22%3A70.78333%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%2251336%22%7D%2C%7B%22x%22%3A143.84999%2C%22y%22%3A349.35%2C%22width%22%3A148.41667%2C%22height%22%3A25.11663999999996%2C%22text%22%3A%22364.135146%22%7D%2C%7B%22x%22%3A1217.0166%2C%22y%22%3A349.35%2C%22width%22%3A790.0333%2C%22height%22%3A29.683329999999955%2C%22text%22%3A%22608069239%5BACK%5DSeq-1Ack-74Win-24704LenG%22%7D%2C%7B%22x%22%3A1221.5833%2C%22y%22%3A381.31665%2C%22width%22%3A835.6998999999998%2C%22height%22%3A31.966679999999997%2C%22text%22%3A%2259866023PH%2CCKck247Len305%22%7D%2C%7B%22x%22%3A68.5%2C%22y%22%3A383.6%2C%22width%22%3A68.5%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%225134%22%7D%2C%7B%22x%22%3A365.3333%2C%22y%22%3A381.31665%2C%22width%22%3A232.90004%2C%22height%22%3A31.966679999999997%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A698.7%2C%22y%22%3A383.6%2C%22width%22%3A184.94995999999992%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1025.2167%2C%22y%22%3A383.6%2C%22width%22%3A45.66660000000002%2C%22height%22%3A22.833319999999958%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A385.88333%2C%22width%22%3A152.98333000000002%2C%22height%22%3A25.11667%2C%22text%22%3A%22464.135150%22%7D%2C%7B%22x%22%3A367.61667%2C%22y%22%3A417.85%2C%22width%22%3A223.76662999999996%2C%22height%22%3A29.683329999999955%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A417.85%2C%22width%22%3A194.08339999999998%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%2230.3769.155%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A420.13333%2C%22width%22%3A70.78333%2C%22height%22%3A25.11667%2C%22text%22%3A%2251356%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A420.13333%2C%22width%22%3A150.69999%2C%22height%22%3A25.11667%2C%22text%22%3A%22564.135151%22%7D%2C%7B%22x%22%3A1018.36664%2C%22y%22%3A420.13333%2C%22width%22%3A66.21666000000005%2C%22height%22%3A25.11667%2C%22text%22%3A%22HTTP%22%7D%2C%7B%22x%22%3A1185.0499%2C%22y%22%3A420.13333%2C%22width%22%3A609.6501000000001%2C%22height%22%3A29.68331999999998%2C%22text%22%3A%22135HTTP%2F1.12000K(text%2Fhtml)%22%7D%2C%7B%22x%22%3A369.9%2C%22y%22%3A454.38333%2C%22width%22%3A198.64999999999998%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1237.5667%2C%22y%22%3A454.38333%2C%22width%22%3A753.5%2C%22height%22%3A34.25%2C%22text%22%3A%224602398%5BACK%5D5eq-74Ack306WIn261824Len%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A456.66666%2C%22width%22%3A68.49999%2C%22height%22%3A25.11667%2C%22text%22%3A%225136%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A456.66666%2C%22width%22%3A150.69999%2C%22height%22%3A22.83334000000002%2C%22text%22%3A%2264.135266%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A456.66666%2C%22width%22%3A216.9167%2C%22height%22%3A25.11667%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1022.9333%2C%22y%22%3A456.66666%2C%22width%22%3A47.94999999999993%2C%22height%22%3A22.83334000000002%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A369.9%2C%22y%22%3A490.91666%2C%22width%22%3A187.23329999999999%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A694.1333%2C%22y%22%3A490.91666%2C%22width%22%3A223.76666%2C%22height%22%3A29.683340000000044%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1233%2C%22y%22%3A490.91666%2C%22width%22%3A760.3499999999999%2C%22height%22%3A29.683340000000044%2C%22text%22%3A%22460239%5BACK%5DSeq-74Ack-387WIn-261696Len0%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A490.91666%2C%22width%22%3A73.06666000000001%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%2251376%22%7D%2C%7B%22x%22%3A139.28333%2C%22y%22%3A495.48334%2C%22width%22%3A152.98333%2C%22height%22%3A25.116660000000024%2C%22text%22%3A%22764.135266%22%7D%2C%7B%22x%22%3A694.1333%2C%22y%22%3A525.1666%2C%22width%22%3A221.48334%2C%22height%22%3A31.966699999999946%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1251.2666%2C%22y%22%3A525.1666%2C%22width%22%3A764.9167%2C%22height%22%3A31.966699999999946%2C%22text%22%3A%2260239%5BFIN%2CACKSq-74Ck3872244Len%22%7D%2C%7B%22x%22%3A367.61667%2C%22y%22%3A527.45%2C%22width%22%3A196.36667%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A527.45%2C%22width%22%3A79.91666000000001%2C%22height%22%3A29.683299999999917%2C%22text%22%3A%2251386%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A527.45%2C%22width%22%3A146.13331%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%22864.135439%22%7D%2C%7B%22x%22%3A1025.2167%2C%22y%22%3A529.73334%2C%22width%22%3A45.66660000000002%2C%22height%22%3A22.833309999999983%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A367.61667%2C%22y%22%3A561.7%2C%22width%22%3A216.91663000000005%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1235.2833%2C%22y%22%3A561.7%2C%22width%22%3A760.3499999999999%2C%22height%22%3A31.96659999999997%2C%22text%22%3A%228060239%5BACK%5DSeq-387Ack-75W1n24704Len-O%22%7D%2C%7B%22x%22%3A143.84999%2C%22y%22%3A563.98334%2C%22width%22%3A146.13335%2C%22height%22%3A27.399959999999965%2C%22text%22%3A%22964.168874%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A563.98334%2C%22width%22%3A191.80009999999993%2C%22height%22%3A25.116660000000024%2C%22text%22%3A%2230.3769.155%22%7D%2C%7B%22x%22%3A1022.9333%2C%22y%22%3A566.26666%2C%22width%22%3A47.94999999999993%2C%22height%22%3A22.83334000000002%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A1217.0166%2C%22y%22%3A593.6666%2C%22width%22%3A778.6167%2C%22height%22%3A36.53340000000003%2C%22text%22%3A%2260860239%5BFINCK%5Dq387ACk75247Le%22%7D%2C%7B%22x%22%3A367.61667%2C%22y%22%3A598.23334%2C%22width%22%3A219.19997999999998%2C%22height%22%3A27.399959999999965%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A598.23334%2C%22width%22%3A194.08339999999998%2C%22height%22%3A25.116660000000024%2C%22text%22%3A%2230.3769.155%22%7D%2C%7B%22x%22%3A100.46667%2C%22y%22%3A600.51666%2C%22width%22%3A187.23331%2C%22height%22%3A25.11663999999996%2C%22text%22%3A%2214064.168878%22%7D%2C%7B%22x%22%3A1020.64996%2C%22y%22%3A600.51666%2C%22width%22%3A52.51664000000005%2C%22height%22%3A25.11663999999996%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A1191.9%2C%22y%22%3A627.9166%2C%22width%22%3A774.05%2C%22height%22%3A36.53340000000003%2C%22text%22%3A%225460239CK%5D75Ck388WI6144L%22%7D%2C%7B%22x%22%3A369.9%2C%22y%22%3A632.48334%2C%22width%22%3A189.51660000000004%2C%22height%22%3A29.68326000000002%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A691.85%2C%22y%22%3A632.48334%2C%22width%22%3A221.48329999999999%2C%22height%22%3A27.399959999999965%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1020.64996%2C%22y%22%3A634.76666%2C%22width%22%3A52.51664000000005%2C%22height%22%3A27.399940000000015%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A75.35%2C%22y%22%3A637.05%2C%22width%22%3A228.33332%2C%22height%22%3A25.116600000000062%2C%22text%22%3A%22514164.168967%22%7D%2C%7B%22x%22%3A86.76666%2C%22y%22%3A737.51666%2C%22width%22%3A1000.10004%2C%22height%22%3A34.25%2C%22text%22%3A%22Frame577ytesonwe(16bits7tu(%22%7D%2C%7B%22x%22%3A89.049995%2C%22y%22%3A774.05%2C%22width%22%3A954.4333050000001%2C%22height%22%3A31.966660000000047%2C%22text%22%3A%22thernetSAppledf%3Ae%3A6f(696ea%3A6t)D-%22%7D%2C%7B%22x%22%3A929.31665%2C%22y%22%3A774.05%2C%22width%22%3A621.06665%2C%22height%22%3A34.25%2C%22text%22%3A%22st%3AIETF-VRRP-VRID_Oe(%400%3A00%3A5e%3A00%3A61%3A0e)%22%7D%2C%7B%22x%22%3A79.916664%2C%22y%22%3A810.5833%2C%22width%22%3A931.599996%2C%22height%22%3A29.683359999999993%2C%22text%22%3A%22InternetProtocolverson43376%22%7D%2C%7B%22x%22%3A707.8333%2C%22y%22%3A840.26666%2C%22width%22%3A680.4332999999999%2C%22height%22%3A36.53333999999995%2C%22text%22%3A%2260239%2CDstport%3AooSegk7%22%7D%2C%7B%22x%22%3A57.083332%2C%22y%22%3A847.11664%2C%22width%22%3A774.0499679999999%2C%22height%22%3A31.966660000000047%2C%22text%22%3A%22TransmissionControlProtoo%22%7D%2C%7B%22x%22%3A43.38333%2C%22y%22%3A883.64996%2C%22width%22%3A447.53333%2C%22height%22%3A31.966679999999997%2C%22text%22%3A%22HypertextTransterProtocol%22%7D%2C%7B%22x%22%3A91.33333%2C%22y%22%3A1075.45%2C%22width%22%3A806.01667%2C%22height%22%3A29.683299999999917%2C%22text%22%3A%2200000500Q10e6c96cfdfea8450%22%7D%2C%7B%22x%22%3A15.983333%2C%22y%22%3A1077.7333%2C%22width%22%3A75.349997%2C%22height%22%3A22.833399999999983%2C%22text%22%3A%220000%22%7D%2C%7B%22x%22%3A11.416666%2C%22y%22%3A1107.4166%2C%22width%22%3A82.199994%2C%22height%22%3A22.833399999999983%2C%22text%22%3A%220010%22%7D%2C%7B%22x%22%3A105.03333%2C%22y%22%3A1107.4166%2C%22width%22%3A673.58331%2C%22height%22%3A25.116700000000037%2C%22text%22%3A%220071000040004006d37d1e254596%22%7D%2C%7B%22x%22%3A2004.7666%2C%22y%22%3A1153.0833%2C%22width%22%3A155.26659999999993%2C%22height%22%3A25.116700000000037%2C%22text%22%3A%22Prafile%3ADefault%22%7D%2C%7B%22x%22%3A118.73333%2C%22y%22%3A1155.3667%2C%22width%22%3A550.28333%2C%22height%22%3A25.116600000000062%2C%22text%22%3A%22wiresharkWi-Fi20200323202344XrFly.pcapng%22%7D%2C%7B%22x%22%3A1415.6666%2C%22y%22%3A1155.3667%2C%22width%22%3A406.4333999999999%2C%22height%22%3A25.116600000000062%2C%22text%22%3A%22Packets%3A16481Displayed13.1%25)%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22Wi-FI%3AenO%200Q%E8%B1%86I%20ip-addr220.181.38.148%20NO.%20Destination%20olLengt-lnfo%20Time%20Source%20Protocol0%20512464%20220.181.38.148%206023980%5BS%5DSeq-owin-65535%20Len-OMSS-1460WS-64TSva.%20%3A464.067930%2030.37.69.155%20TCP%201RTT%20TCP1%2051256%20220.181.38.148%2030.37.69.155%20788060239%5BY%2CACKseq-oAck-win%20564.099483%20ck-1win-8192Len-OMSS-1452%2051266%20220.181.38.148%20664%2C099568%205460239%2B80TACKISeq1Ck-1Win-2%20GET%E8%AF%B7%E6%B1%82%E5%92%8CACK%E5%90%8C%E6%97%B6%E5%8F%91%E5%87%BA%20220.181.38.148%20127GET%2FHTTP%2F1.1%2051276%2030.37.69.155%20HTTP%20764.099648%20220.181.38.148%2030.37.69.155%20TCP%2051336%20364.135146%20608069239%5BACK%5DSeq-1Ack-74Win-24704LenG%2059866023PH%2CCKck247Len305%205134%20220.181.38.148%2030.37.69.155%20TCP%20464.135150%20220.181.38.148%2030.3769.155%2051356%20564.135151%20HTTP%20135HTTP%2F1.12000K(text%2Fhtml)%2030.37.69.155%204602398%5BACK%5D5eq-74Ack306WIn261824Len%205136%2064.135266%20220.181.38.148%20TCP%2030.37.69.155%20220.181.38.148%20460239%5BACK%5DSeq-74Ack-387WIn-261696Len0%2051376%20764.135266%20220.181.38.148%2060239%5BFIN%2CACKSq-74Ck3872244Len%2030.37.69.155%2051386%20864.135439%20TCP%20220.181.38.148%208060239%5BACK%5DSeq-387Ack-75W1n24704Len-O%20964.168874%2030.3769.155%20TCP%2060860239%5BFINCK%5Dq387ACk75247Le%20220.181.38.148%2030.3769.155%2014064.168878%20TCP%205460239CK%5D75Ck388WI6144L%2030.37.69.155%20220.181.38.148%20TCP%20514164.168967%20Frame577ytesonwe(16bits7tu(%20thernetSAppledf%3Ae%3A6f(696ea%3A6t)D-%20st%3AIETF-VRRP-VRID_Oe(%400%3A00%3A5e%3A00%3A61%3A0e)%20InternetProtocolverson43376%2060239%2CDstport%3AooSegk7%20TransmissionControlProtoo%20HypertextTransterProtocol%2000000500Q10e6c96cfdfea8450%200000%200010%200071000040004006d37d1e254596%20Prafile%3ADefault%20wiresharkWi-Fi20200323202344XrFly.pcapng%20Packets%3A16481Displayed13.1%25)%22%2C%22width%22%3A1096%2C%22height%22%3A597%7D\"></card></p><p data-lake-id=\"3572ccc615c991183f2ec45a84451458\">可以看到这里从发起 <code>seq</code> 到收到 <code>ack</code> （经过 1 <code>RTT</code> ）后，客户端就没有再等待直接发起了 <code>GET / HTTP/1.1</code> 的请求。</p><h2 id=\"tmNZ6\" data-lake-id=\"6edabe9926215f72c168798265f3ba84\">如何优化建连时间</h2><h3 id=\"vhZdc\" data-lake-id=\"08f44c78a214025b18b2f1e4a4d41a47\">例子</h3><p data-lake-id=\"89d97211206b061653c3bb9178cb8943\">我们用一个简单的页面看看建连对网页性能的影响：<a href=\"https://xcodebuild.github.io/why-so-slow/connect/index.html\" target=\"_blank\">https://xcodebuild.github.io/why-so-slow/connect/index.html</a></p><p data-lake-id=\"ed2cb9a1d85cc99bca0f37ff7043a949\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"86f246784c65207315ed344629b8e3a6\">这是一个测试页面，源代码托管在：<a href=\"https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html\" target=\"_blank\">https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html</a></p></blockquote><p data-lake-id=\"debcc747eadd173d286fd29fffd5b7ab\"><br /></p><p data-lake-id=\"690597af27dff4cc48006593d105fac8\">就像上面说的，我们在开发场景下往往不需要重新连接，包括 <code>Disable Cache</code> 是不会禁用 <code>TCP</code> 的连接复用的，所以我们使用 <a href=\"https://www.webpagetest.org/\" target=\"_blank\">Webpage Test</a> 来看一下这个页面的性能状况。</p><p data-lake-id=\"cce34c452da003791c918ff8c26958f1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585020683958-c843ada1-7492-44d1-8c71-e65389fb9850.png%22%2C%22originWidth%22%3A1910%2C%22originHeight%22%3A1164%2C%22name%22%3A%22image.png%22%2C%22size%22%3A229615%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A773.94794%2C%22y%22%3A29.843752%2C%22width%22%3A322.3125600000001%2C%22height%22%3A41.781248000000005%2C%22text%22%3A%22WaterfallView%22%7D%2C%7B%22x%22%3A479.4896%2C%22y%22%3A139.27084%2C%22width%22%3A175.08334000000002%2C%22height%22%3A25.864580000000018%2C%22text%22%3A%22IRUMFirstPaint%22%7D%2C%7B%22x%22%3A921.1771%2C%22y%22%3A139.27084%2C%22width%22%3A238.7500000000001%2C%22height%22%3A23.875%2C%22text%22%3A%22DOMContentLoaded%22%7D%2C%7B%22x%22%3A1340.9792%2C%22y%22%3A139.27084%2C%22width%22%3A234.77089999999998%2C%22height%22%3A27.854180000000014%2C%22text%22%3A%22IDocumentComplete%22%7D%2C%7B%22x%22%3A302.4167%2C%22y%22%3A141.26042%2C%22width%22%3A145.23958%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22IStartRender%22%7D%2C%7B%22x%22%3A682.4271%2C%22y%22%3A141.26042%2C%22width%22%3A185.0313%2C%22height%22%3A21.885419999999982%2C%22text%22%3A%22IDoMInteractive%22%7D%2C%7B%22x%22%3A1223.5938%2C%22y%22%3A141.26042%2C%22width%22%3A91.52080000000001%2C%22height%22%3A21.885419999999982%2C%22text%22%3A%22OnLoaD%22%7D%2C%7B%22x%22%3A1191.7605%2C%22y%22%3A218.85417%2C%22width%22%3A61.67709999999988%2C%22height%22%3A23.875%2C%22text%22%3A%22Flash%22%7D%2C%7B%22x%22%3A1611.5626%2C%22y%22%3A218.85417%2C%22width%22%3A69.63540000000012%2C%22height%22%3A23.875%2C%22text%22%3A%22other%22%7D%2C%7B%22x%22%3A1730.9376%2C%22y%22%3A218.85417%2C%22width%22%3A145.23950000000013%2C%22height%22%3A23.875%2C%22text%22%3A%22JSExecution%22%7D%2C%7B%22x%22%3A45.760418%2C%22y%22%3A220.84377%2C%22width%22%3A55.708342%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22wait%22%7D%2C%7B%22x%22%3A194.97917%2C%22y%22%3A220.84377%2C%22width%22%3A45.760429999999985%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22dns%22%7D%2C%7B%22x%22%3A620.75%2C%22y%22%3A220.84377%2C%22width%22%3A53.71879999999999%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22html%22%7D%2C%7B%22x%22%3A775.93756%2C%22y%22%3A220.84377%2C%22width%22%3A31.83334000000002%2C%22height%22%3A23.875%2C%22text%22%3A%22Js%22%7D%2C%7B%22x%22%3A915.2084%2C%22y%22%3A220.84377%2C%22width%22%3A41.78120000000001%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22css%22%7D%2C%7B%22x%22%3A1044.5312%2C%22y%22%3A220.84377%2C%22width%22%3A63.666800000000194%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22image%22%7D%2C%7B%22x%22%3A1335.0105%2C%22y%22%3A220.84377%2C%22width%22%3A59.6875%2C%22height%22%3A19.89582999999999%2C%22text%22%3A%22Font%22%7D%2C%7B%22x%22%3A1474.2814%2C%22y%22%3A220.84377%2C%22width%22%3A65.6561999999999%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22VIdeo%22%7D%2C%7B%22x%22%3A318.33334%2C%22y%22%3A222.83334%2C%22width%22%3A87.54168999999996%2C%22height%22%3A19.895830000000018%2C%22text%22%3A%22connect%22%7D%2C%7B%22x%22%3A481.4792%2C%22y%22%3A222.83334%2C%22width%22%3A45.760400000000004%2C%22height%22%3A19.895830000000018%2C%22text%22%3A%22ssI%22%7D%2C%7B%22x%22%3A714.26044%2C%22y%22%3A296.44794%2C%22width%22%3A33.822959999999966%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.2%22%7D%2C%7B%22x%22%3A823.68756%2C%22y%22%3A296.44794%2C%22width%22%3A39.79164000000003%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.3%22%7D%2C%7B%22x%22%3A1048.5105%2C%22y%22%3A296.44794%2C%22width%22%3A39.79160000000002%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A1161.9167%2C%22y%22%3A296.44794%2C%22width%22%3A35.8125%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.6%22%7D%2C%7B%22x%22%3A1275.323%2C%22y%22%3A296.44794%2C%22width%22%3A35.8125%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.7%22%7D%2C%7B%22x%22%3A1382.7605%2C%22y%22%3A296.44794%2C%22width%22%3A43.77089999999998%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.8%22%7D%2C%7B%22x%22%3A1611.5626%2C%22y%22%3A296.44794%2C%22width%22%3A39.79160000000002%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%221.0%22%7D%2C%7B%22x%22%3A1722.9792%2C%22y%22%3A296.44794%2C%22width%22%3A37.802200000000084%2C%22height%22%3A23.875%2C%22text%22%3A%221.1%22%7D%2C%7B%22x%22%3A600.8542%2C%22y%22%3A298.4375%2C%22width%22%3A35.8125%2C%22height%22%3A19.89584000000002%2C%22text%22%3A%220.1%22%7D%2C%7B%22x%22%3A1496.1667%2C%22y%22%3A298.4375%2C%22width%22%3A41.7813000000001%2C%22height%22%3A19.89584000000002%2C%22text%22%3A%220.9%22%7D%2C%7B%22x%22%3A9.947917%2C%22y%22%3A302.4167%2C%22width%22%3A73.614593%2C%22height%22%3A23.875%2C%22text%22%3A%22step-1%22%7D%2C%7B%22x%22%3A47.750004%2C%22y%22%3A344.19794%2C%22width%22%3A459.593776%2C%22height%22%3A23.875%2C%22text%22%3A%221.xcodlebuiid.github.io-index.html%22%7D%2C%7B%22x%22%3A913.2188%2C%22y%22%3A376.03128%2C%22width%22%3A47.75%2C%22height%22%3A23.875%2C%22text%22%3A%22147g%22%7D%2C%7B%22x%22%3A47.750004%2C%22y%22%3A378.02084%2C%22width%22%3A457.604196%2C%22height%22%3A23.875%2C%22text%22%3A%222.ccn.jsdeliur.n...production.min.js%22%7D%2C%7B%22x%22%3A43.770836%2C%22y%22%3A411.84378%2C%22width%22%3A449.64586399999996%2C%22height%22%3A23.875%2C%22text%22%3A%223.cdn.jsdelivr.n...production.min.js%22%7D%2C%7B%22x%22%3A1617.5314%2C%22y%22%3A443.6771%2C%22width%22%3A65.6561999999999%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%2237%E5%95%AAS%22%7D%2C%7B%22x%22%3A25.864584%2C%22y%22%3A447.65628%2C%22width%22%3A445.666696%2C%22height%22%3A21.88542000000001%2C%22text%22%3A%224.cert.int-x3.letsencrypt.org-%22%7D%2C%7B%22x%22%3A895.31256%2C%22y%22%3A479.4896%2C%22width%22%3A75.60414000000003%2C%22height%22%3A23.875%2C%22text%22%3A%22759NS%22%7D%2C%7B%22x%22%3A33.822918%2C%22y%22%3A479.4896%2C%22width%22%3A459.593782%2C%22height%22%3A23.875%2C%22text%22%3A%225.www.ocky7coo1b1%22%7D%2C%7B%22x%22%3A1382.7605%2C%22y%22%3A513.3125%2C%22width%22%3A45.76039999999989%2C%22height%22%3A23.875%2C%22text%22%3A%220.8%22%7D%2C%7B%22x%22%3A1496.1667%2C%22y%22%3A513.3125%2C%22width%22%3A45.76040000000012%2C%22height%22%3A23.875%2C%22text%22%3A%220.9%22%7D%2C%7B%22x%22%3A821.69794%2C%22y%22%3A515.3021%2C%22width%22%3A43.77085999999997%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.3%22%7D%2C%7B%22x%22%3A1159.9271%2C%22y%22%3A515.3021%2C%22width%22%3A39.79169999999999%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.6%22%7D%2C%7B%22x%22%3A1611.5626%2C%22y%22%3A515.3021%2C%22width%22%3A41.7813000000001%2C%22height%22%3A23.875%2C%22text%22%3A%221.0%22%7D%2C%7B%22x%22%3A1720.9896%2C%22y%22%3A515.3021%2C%22width%22%3A41.781299999999874%2C%22height%22%3A23.875%2C%22text%22%3A%221.1%22%7D%2C%7B%22x%22%3A1046.5209%2C%22y%22%3A517.2917%2C%22width%22%3A43.77080000000001%2C%22height%22%3A19.89580000000001%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A1267.3646%2C%22y%22%3A517.2917%2C%22width%22%3A47.75%2C%22height%22%3A19.89580000000001%2C%22text%22%3A%220.7%22%7D%2C%7B%22x%22%3A95.50001%2C%22y%22%3A578.96875%2C%22width%22%3A192.98959%2C%22height%22%3A25.864649999999983%2C%22text%22%3A%22%E4%B8%80cpuUtilization%22%7D%2C%7B%22x%22%3A431.7396%2C%22y%22%3A608.8125%2C%22width%22%3A161.1563%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22Request%235%22%7D%2C%7B%22x%22%3A646.6146%2C%22y%22%3A608.8125%2C%22width%22%3A89.53129999999999%2C%22height%22%3A23.875059999999962%2C%22text%22%3A%22Details%22%7D%2C%7B%22x%22%3A1024.6355%2C%22y%22%3A608.8125%2C%22width%22%3A165.1353999999999%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22RawDetailsOB%22%7D%2C%7B%22x%22%3A1181.8125%2C%22y%22%3A608.8125%2C%22width%22%3A93.51050000000009%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22object%22%7D%2C%7B%22x%22%3A758.0313%2C%22y%22%3A612.7917%2C%22width%22%3A109.4271%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22RequestT%22%7D%2C%7B%22x%22%3A885.3646%2C%22y%22%3A612.7917%2C%22width%22%3A119.375%2C%22height%22%3A23.875%2C%22text%22%3A%22Response%22%7D%2C%7B%22x%22%3A103.458336%2C%22y%22%3A674.4688%2C%22width%22%3A324.302104%2C%22height%22%3A29.843759999999975%2C%22text%22%3A%22BandsidthIn(o-5000Kblo%22%7D%2C%7B%22x%22%3A479.4896%2C%22y%22%3A680.43756%2C%22width%22%3A744.1042000000001%2C%22height%22%3A23.875%2C%22text%22%3A%22RL%3Ahttps%3A%2F%2Fwww.mocky.io%2F5e7978632d00007c0018b11%22%7D%2C%7B%22x%22%3A471.53128%2C%22y%22%3A714.26044%2C%22width%22%3A787.8751200000002%2C%22height%22%3A21.885459999999966%2C%22text%22%3A%22adedBy%3Ahttps%3A%2F%2Fxcodebuil.githuowwi%22%7D%2C%7B%22x%22%3A439.69794%2C%22y%22%3A746.0938%2C%22width%22%3A258.64585999999997%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22Host%3AwwW.mocky.Io%22%7D%2C%7B%22x%22%3A97.489586%2C%22y%22%3A773.94794%2C%22width%22%3A246.708354%2C%22height%22%3A27.85415999999998%2C%22text%22%3A%22BrowserHainThread%22%7D%2C%7B%22x%22%3A437.70834%2C%22y%22%3A773.94794%2C%22width%22%3A248.69795999999997%2C%22height%22%3A25.864619999999945%2C%22text%22%3A%22IP%3A34.249.48.47%22%7D%2C%7B%22x%22%3A443.6771%2C%22y%22%3A805.7813%2C%22width%22%3A292.4688%2C%22height%22%3A27.85414000000003%2C%22text%22%3A%22Error%2FStatusCode%3A200%22%7D%2C%7B%22x%22%3A101.46876%2C%22y%22%3A841.5938%2C%22width%22%3A240.73958000000002%2C%22height%22%3A23.875%2C%22text%22%3A%22PareisInteractive%22%7D%2C%7B%22x%22%3A441.68753%2C%22y%22%3A841.5938%2C%22width%22%3A202.93752999999998%2C%22height%22%3A23.875%2C%22text%22%3A%22Priority%3AHigh%22%7D%2C%7B%22x%22%3A435.71878%2C%22y%22%3A871.43756%2C%22width%22%3A232.78127999999998%2C%22height%22%3A25.864540000000034%2C%22text%22%3A%22Protocol%3Ahttp%2F1.1%22%7D%2C%7B%22x%22%3A435.71878%2C%22y%22%3A903.2709%2C%22width%22%3A246.70832000000001%2C%22height%22%3A25.864540000000034%2C%22text%22%3A%22RequestID%3A4542.6%22%7D%2C%7B%22x%22%3A437.70834%2C%22y%22%3A933.1146%2C%22width%22%3A242.72921999999994%2C%22height%22%3A27.85419999999999%2C%22text%22%3A%22clientPort%3A34938%22%7D%2C%7B%22x%22%3A437.70834%2C%22y%22%3A968.9271%2C%22width%22%3A266.60421999999994%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22Discovered%3A0.427s%22%7D%2C%7B%22x%22%3A435.71878%2C%22y%22%3A1000.76044%2C%22width%22%3A294.45832%2C%22height%22%3A25.864559999999983%2C%22text%22%3A%22RequestStart%3A0.988s%22%7D%2C%7B%22x%22%3A437.70834%2C%22y%22%3A1032.5938%2C%22width%22%3A288.4896%2C%22height%22%3A25.864599999999882%2C%22text%22%3A%22DNSLoOkup%3A30ms%22%7D%2C%7B%22x%22%3A435.71878%2C%22y%22%3A1064.4271%2C%22width%22%3A344.19792%2C%22height%22%3A25.864599999999882%2C%22text%22%3A%22Initialconnection%3A197ms%22%7D%2C%7B%22x%22%3A198.95834%2C%22y%22%3A1088.3021%2C%22width%22%3A139.27086%2C%22height%22%3A27.85409999999979%2C%22text%22%3A%22DNSLookup%22%7D%2C%7B%22x%22%3A433.7292%2C%22y%22%3A1096.2605%2C%22width%22%3A350.1667%2C%22height%22%3A25.864499999999907%2C%22text%22%3A%22ssLNegotiation%3A314m%22%7D%2C%7B%22x%22%3A433.7292%2C%22y%22%3A1128.0938%2C%22width%22%3A350.1667%2C%22height%22%3A23.875%2C%22text%22%3A%22TimetoFIrsTByTE%3A217mS%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22WaterfallView%20IRUMFirstPaint%20DOMContentLoaded%20IDocumentComplete%20IStartRender%20IDoMInteractive%20OnLoaD%20Flash%20other%20JSExecution%20wait%20dns%20html%20Js%20css%20image%20Font%20VIdeo%20connect%20ssI%200.2%200.3%200.5%200.6%200.7%200.8%201.0%201.1%200.1%200.9%20step-1%201.xcodlebuiid.github.io-index.html%20147g%202.ccn.jsdeliur.n...production.min.js%203.cdn.jsdelivr.n...production.min.js%2037%E5%95%AAS%204.cert.int-x3.letsencrypt.org-%20759NS%205.www.ocky7coo1b1%200.8%200.9%200.3%200.6%201.0%201.1%200.5%200.7%20%E4%B8%80cpuUtilization%20Request%235%20Details%20RawDetailsOB%20object%20RequestT%20Response%20BandsidthIn(o-5000Kblo%20RL%3Ahttps%3A%2F%2Fwww.mocky.io%2F5e7978632d00007c0018b11%20adedBy%3Ahttps%3A%2F%2Fxcodebuil.githuowwi%20Host%3AwwW.mocky.Io%20BrowserHainThread%20IP%3A34.249.48.47%20Error%2FStatusCode%3A200%20PareisInteractive%20Priority%3AHigh%20Protocol%3Ahttp%2F1.1%20RequestID%3A4542.6%20clientPort%3A34938%20Discovered%3A0.427s%20RequestStart%3A0.988s%20DNSLoOkup%3A30ms%20Initialconnection%3A197ms%20DNSLookup%20ssLNegotiation%3A314m%20TimetoFIrsTByTE%3A217mS%22%2C%22width%22%3A955%2C%22height%22%3A582%7D\"></card></p><p data-lake-id=\"800631c30623d7de088278a8c16ba509\"><br /></p><p data-lake-id=\"7ef3910ef9899b2a2128d6981ee67e54\">我们可以看到这这个页面的 JavaScript 文件以及后面的 <code>fetch</code> 请求都有个很长的 <code>DNS + Connect + SSL</code> 时间。因为他们的域名不同，所以需要重新解析域名。不是同一个 TCP 连接，所以需要重新建连（包括 SSL 握手）。</p><p data-lake-id=\"afcf8a7dcc3fa92d20f24e4aeccb86fe\"><br /></p><p data-lake-id=\"9f704e170e8c88f5740719505af3123c\">在图中这个 <code>fetch</code> 请求的 <code>Connect + SSL</code> 一共耗时 <code>500ms</code> ，意味着用户必须等待这个建连完成后才能真正发起这个请求。</p><h3 id=\"zlxEH\" data-lake-id=\"0744e0d629afe6e1b5a63ceb54cdf4c5\">pre-connect</h3><p data-lake-id=\"a6a97aebcf654d199cd72cde8a0e26b7\">为了解决上面这种问题，Chrome 引入了 <a href=\"https://web.dev/uses-rel-preconnect/\" target=\"_blank\"><code>Preconnect</code></a> （现在大部分浏览器都是支持的）。</p><p data-lake-id=\"137884bddae0f61b77e65c88eaae4151\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585102598647-3d2dd3b0-fbfc-4bbc-99f5-10debdf6ee91.png%22%2C%22originWidth%22%3A736%2C%22originHeight%22%3A300%2C%22name%22%3A%22image.png%22%2C%22size%22%3A76442%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A9.2%2C%22y%22%3A17.633333%2C%22width%22%3A181.70000000000002%2C%22height%22%3A16.100001%2C%22text%22%3A%22WithoutPreconnect%22%7D%2C%7B%22x%22%3A99.666664%2C%22y%22%3A59.033333%2C%22width%22%3A101.199986%2C%22height%22%3A13.033332999999999%2C%22text%22%3A%22DNS%2FTCP%2FTLS%22%7D%2C%7B%22x%22%3A468.43332%2C%22y%22%3A92%2C%22width%22%3A99.66668000000004%2C%22height%22%3A13.799994999999996%2C%22text%22%3A%22DNS%2FTCP%2FTLS%22%7D%2C%7B%22x%22%3A602.6%2C%22y%22%3A121.13333%2C%22width%22%3A107.33330000000001%2C%22height%22%3A13.033330000000007%2C%22text%22%3A%22LoadTime-2.6s%22%7D%2C%7B%22x%22%3A11.5%2C%22y%22%3A167.9%2C%22width%22%3A151.03333%2C%22height%22%3A15.333319999999986%2C%22text%22%3A%22WithPreconnect%22%7D%2C%7B%22x%22%3A101.96666%2C%22y%22%3A213.9%2C%22width%22%3A98.13332999999999%2C%22height%22%3A13.033320000000003%2C%22text%22%3A%22DNS%2FTCP%2FTLS%22%7D%2C%7B%22x%22%3A100.43333%2C%22y%22%3A247.63333%2C%22width%22%3A98.89999999999999%2C%22height%22%3A13.79998999999998%2C%22text%22%3A%22DNS%2FTCP%2FTLS%22%7D%2C%7B%22x%22%3A601.8333%2C%22y%22%3A275.23334%2C%22width%22%3A110.40003999999999%2C%22height%22%3A16.09996000000001%2C%22text%22%3A%22LoadTime-2.1s%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22WithoutPreconnect%20DNS%2FTCP%2FTLS%20DNS%2FTCP%2FTLS%20LoadTime-2.6s%20WithPreconnect%20DNS%2FTCP%2FTLS%20DNS%2FTCP%2FTLS%20LoadTime-2.1s%22%2C%22width%22%3A368%2C%22height%22%3A150%7D\"></card></p><p data-lake-id=\"4fa8837eaf14cae7bb776402bb2a91b1\">我们可以在页面的 <code>&lt;head&gt;</code> 中加入</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Clink%20rel%3D%5C%22preconnect%5C%22%20href%3D%5C%22https%3A%2F%2Fwww.mocky.io%5C%22%20crossorigin%3E%22%2C%22id%22%3A%22yWrSj%22%7D\"></card><p data-lake-id=\"cdfa9385bcb1b76ec4f0ee2ac63b9dde\"><br /></p><p data-lake-id=\"53b5923343d19fd0acf27b19c6906bba\">来告知浏览器提前建立连接。</p><p data-lake-id=\"93387630c007351e1392c5103478f004\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585043302410-4fc5bf0c-b9f3-45ef-bba2-3ebbe7ce0ce0.png%22%2C%22originWidth%22%3A1994%2C%22originHeight%22%3A538%2C%22name%22%3A%22image.png%22%2C%22size%22%3A401496%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A828.7563%2C%22y%22%3A10.385417%2C%22width%22%3A330.25620000000004%2C%22height%22%3A43.618748999999994%2C%22text%22%3A%22WaterfallView%22%7D%2C%7B%22x%22%3A535.8875%2C%22y%22%3A120.47083%2C%22width%22%3A180.70624999999995%2C%22height%22%3A27.00208999999998%2C%22text%22%3A%22RUMFirstPaint%22%7D%2C%7B%22x%22%3A357.25833%2C%22y%22%3A122.54792%2C%22width%22%3A147.47293000000002%2C%22height%22%3A24.924999999999983%2C%22text%22%3A%22lStartRender%22%7D%2C%7B%22x%22%3A739.44165%2C%22y%22%3A124.625%2C%22width%22%3A178.62921000000006%2C%22height%22%3A22.847919999999988%2C%22text%22%3A%22IDomInteractive%22%7D%2C%7B%22x%22%3A1273.2521%2C%22y%22%3A124.625%2C%22width%22%3A101.77710000000002%2C%22height%22%3A24.92500000000001%2C%22text%22%3A%22OnLoad%22%7D%2C%7B%22x%22%3A1399.9542%2C%22y%22%3A124.625%2C%22width%22%3A216.01660000000015%2C%22height%22%3A24.92500000000001%2C%22text%22%3A%22IDocumentCompleto%22%7D%2C%7B%22x%22%3A984.53754%2C%22y%22%3A126.70209%2C%22width%22%3A240.94155999999998%2C%22height%22%3A24.92500000000001%2C%22text%22%3A%22DOMContentLoaded%22%7D%2C%7B%22x%22%3A1213.0167%2C%22y%22%3A164.08958%2C%22width%22%3A195.24580000000014%2C%22height%22%3A29.079169999999976%2C%22text%22%3A%22%E8%BF%99%E9%87%8C%E6%89%8D%E5%BC%80%E5%A7%8B%E8%B0%83%E7%94%A8fe%22%7D%2C%7B%22x%22%3A1402.0312%2C%22y%22%3A168.24374%2C%22width%22%3A78.92920000000004%2C%22height%22%3A22.84792999999999%2C%22text%22%3A%22%E7%94%A8fetch%22%7D%2C%7B%22x%22%3A679.20624%2C%22y%22%3A203.55417%2C%22width%22%3A49.850059999999985%2C%22height%22%3A20.77082999999999%2C%22text%22%3A%22html%22%7D%2C%7B%22x%22%3A834.9875%2C%22y%22%3A203.55417%2C%22width%22%3A29.079150000000027%2C%22height%22%3A27.00209000000001%2C%22text%22%3A%22js%22%7D%2C%7B%22x%22%3A1528.7334%2C%22y%22%3A203.55417%2C%22width%22%3A68.54369999999994%2C%22height%22%3A22.847910000000013%2C%22text%22%3A%22VidE0%22%7D%2C%7B%22x%22%3A1782.1376%2C%22y%22%3A203.55417%2C%22width%22%3A147.47289999999998%2C%22height%22%3A24.92500000000001%2C%22text%22%3A%22JSExEcution%22%7D%2C%7B%22x%22%3A373.875%2C%22y%22%3A203.55417%2C%22width%22%3A91.39166%2C%22height%22%3A20.77082999999999%2C%22text%22%3A%22connect%22%7D%2C%7B%22x%22%3A1244.173%2C%22y%22%3A205.63126%2C%22width%22%3A68.54369999999994%2C%22height%22%3A20.770820000000015%2C%22text%22%3A%22flash%22%7D%2C%7B%22x%22%3A1676.2063%2C%22y%22%3A205.63126%2C%22width%22%3A62.3125%2C%22height%22%3A20.770820000000015%2C%22text%22%3A%22other%22%7D%2C%7B%22x%22%3A1100.8541%2C%22y%22%3A207.70833%2C%22width%22%3A64.38969999999995%2C%22height%22%3A20.77084000000002%2C%22text%22%3A%22iMage%22%7D%2C%7B%22x%22%3A726.9792%2C%22y%22%3A278.32916%2C%22width%22%3A47.77290000000005%2C%22height%22%3A27.002079999999978%2C%22text%22%3A%220.2%22%7D%2C%7B%22x%22%3A1771.7521%2C%22y%22%3A278.32916%2C%22width%22%3A43.61869999999999%2C%22height%22%3A24.925020000000018%2C%22text%22%3A%221.3%22%7D%2C%7B%22x%22%3A635.5875%2C%22y%22%3A280.40625%2C%22width%22%3A43.61874%2C%22height%22%3A24.92498999999998%2C%22text%22%3A%220.1%22%7D%2C%7B%22x%22%3A828.7563%2C%22y%22%3A280.40625%2C%22width%22%3A39.464500000000044%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%220.3%22%7D%2C%7B%22x%22%3A920.14795%2C%22y%22%3A280.40625%2C%22width%22%3A39.46454999999992%2C%22height%22%3A20.770849999999996%2C%22text%22%3A%220.4%22%7D%2C%7B%22x%22%3A1013.6167%2C%22y%22%3A280.40625%2C%22width%22%3A41.54160000000002%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A1208.8625%2C%22y%22%3A280.40625%2C%22width%22%3A39.46460000000002%2C%22height%22%3A20.770849999999996%2C%22text%22%3A%220.7%22%7D%2C%7B%22x%22%3A1300.2542%2C%22y%22%3A280.40625%2C%22width%22%3A41.54169999999999%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%220.8%22%7D%2C%7B%22x%22%3A1391.6459%2C%22y%22%3A280.40625%2C%22width%22%3A43.61869999999999%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%220.9%22%7D%2C%7B%22x%22%3A1684.5146%2C%22y%22%3A280.40625%2C%22width%22%3A37.387500000000045%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%221.2%22%7D%2C%7B%22x%22%3A1867.298%2C%22y%22%3A280.40625%2C%22width%22%3A41.54160000000002%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%221.4%22%7D%2C%7B%22x%22%3A1111.2396%2C%22y%22%3A282.48334%2C%22width%22%3A41.54159999999979%2C%22height%22%3A20.77084000000002%2C%22text%22%3A%220.6%22%7D%2C%7B%22x%22%3A1584.8146%2C%22y%22%3A282.48334%2C%22width%22%3A39.46460000000002%2C%22height%22%3A22.84789999999998%2C%22text%22%3A%221.1%22%7D%2C%7B%22x%22%3A70.620834%2C%22y%22%3A286.6375%2C%22width%22%3A76.85208599999999%2C%22height%22%3A22.84790000000004%2C%22text%22%3A%22step-1%22%7D%2C%7B%22x%22%3A114.239586%2C%22y%22%3A326.10208%2C%22width%22%3A442.418714%2C%22height%22%3A27.002079999999978%2C%22text%22%3A%221.xcodebuild.sit...-precornect.htmi%22%7D%2C%7B%22x%22%3A953.3813%2C%22y%22%3A328.17917%2C%22width%22%3A58.15829999999994%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%22375ms%22%7D%2C%7B%22x%22%3A1142.3959%2C%22y%22%3A359.33542%2C%22width%22%3A49.849899999999934%2C%22height%22%3A24.924980000000005%2C%22text%22%3A%22155%22%7D%2C%7B%22x%22%3A103.854164%2C%22y%22%3A359.33542%2C%22width%22%3A471.497936%2C%22height%22%3A29.07916%2C%22text%22%3A%222.cdn.jsdelivr.n...production.min.Js%22%7D%2C%7B%22x%22%3A1204.7084%2C%22y%22%3A394.64584%2C%22width%22%3A68.54369999999994%2C%22height%22%3A22.84789999999998%2C%22text%22%3A%22109%22%7D%2C%7B%22x%22%3A97.62292%2C%22y%22%3A396.72293%2C%22width%22%3A459.03538000000003%2C%22height%22%3A24.92498999999998%2C%22text%22%3A%223.cdn.Jsdelivr.n...produiction.min.J%22%7D%2C%7B%22x%22%3A1636.7417%2C%22y%22%3A427.87918%2C%22width%22%3A70.62079999999992%2C%22height%22%3A24.92498999999998%2C%22text%22%3A%2236NS%22%7D%2C%7B%22x%22%3A97.62292%2C%22y%22%3A429.95627%2C%22width%22%3A425.80207999999993%2C%22height%22%3A24.92498999999998%2C%22text%22%3A%224.cert.int-x3.letsencrypt.org-%22%7D%2C%7B%22x%22%3A963.76666%2C%22y%22%3A461.11252%2C%22width%22%3A76.85213999999996%2C%22height%22%3A24.924980000000005%2C%22text%22%3A%22880ms%22%7D%2C%7B%22x%22%3A103.854164%2C%22y%22%3A461.11252%2C%22width%22%3A456.95833600000003%2C%22height%22%3A27.002079999999978%2C%22text%22%3A%225.wWw.ocky.009c73113%22%7D%2C%7B%22x%22%3A1676.2063%2C%22y%22%3A496.4229%2C%22width%22%3A43.618799999999965%2C%22height%22%3A27.002099999999928%2C%22text%22%3A%221.2%22%7D%2C%7B%22x%22%3A1771.7521%2C%22y%22%3A496.4229%2C%22width%22%3A41.54169999999999%2C%22height%22%3A24.924999999999955%2C%22text%22%3A%221.3%22%7D%2C%7B%22x%22%3A635.5875%2C%22y%22%3A498.5%2C%22width%22%3A39.464560000000006%2C%22height%22%3A22.84789999999998%2C%22text%22%3A%220.1%22%7D%2C%7B%22x%22%3A915.9938%2C%22y%22%3A496.4229%2C%22width%22%3A45.69580000000008%2C%22height%22%3A24.924999999999955%2C%22text%22%3A%220.4%22%7D%2C%7B%22x%22%3A1017.7708%2C%22y%22%3A498.5%2C%22width%22%3A33.233400000000074%2C%22height%22%3A20.77080000000001%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A1109.1625%2C%22y%22%3A498.5%2C%22width%22%3A41.54169999999999%2C%22height%22%3A22.84789999999998%2C%22text%22%3A%220.6%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22WaterfallView%20RUMFirstPaint%20lStartRender%20IDomInteractive%20OnLoad%20IDocumentCompleto%20DOMContentLoaded%20%E8%BF%99%E9%87%8C%E6%89%8D%E5%BC%80%E5%A7%8B%E8%B0%83%E7%94%A8fe%20%E7%94%A8fetch%20html%20js%20VidE0%20JSExEcution%20connect%20flash%20other%20iMage%200.2%201.3%200.1%200.3%200.4%200.5%200.7%200.8%200.9%201.2%201.4%200.6%201.1%20step-1%201.xcodebuild.sit...-precornect.htmi%20375ms%20155%202.cdn.jsdelivr.n...production.min.Js%20109%203.cdn.Jsdelivr.n...produiction.min.J%2036NS%204.cert.int-x3.letsencrypt.org-%20880ms%205.wWw.ocky.009c73113%201.2%201.3%200.1%200.4%200.5%200.6%22%2C%22width%22%3A997%2C%22height%22%3A269%7D\"></card></p><p data-lake-id=\"7e76604f0ebc96c939f484151b3ecb34\">可以看到这种情况下，我们在 JS 加载后前（实际上 <code>fetch</code> 这个时候才能开始执行），就开始建立连接。同时 <code>preconnect</code> 也附带着让浏览器提前进行了 DNS 解析。</p><h3 id=\"QIrav\" data-lake-id=\"78a8bcb0e57657edb1fe385347d6c081\">连接复用</h3><p data-lake-id=\"051097bcd53f9be26d32f8df0f6cd3ab\">当然如果直接使用同一个连接，即使不使用 <code>pre-connect</code> 就能天然减少额外的连接次数。</p><h4 id=\"cSppd\" data-lake-id=\"ca062d8c857698ffe7d142655feb0366\">域名收拢</h4><p data-lake-id=\"b294e747a4bb36c398558ede70b441a7\">在 HTTP 1 时代，为了解决阻塞的问题，很多网站都做了分散域名的优化让多个请求可以并行加载。而在 HTTP 2 普及后，已经具备了连接复用的能力，使用多个分散的域名只会让我们消耗更高的连接成本。</p><p data-lake-id=\"517fab71968a2ac8b1146c92b4d8f5ad\"><br /></p><p data-lake-id=\"81ac2cf0d027cb4e7b0c8779f03bc73f\">所以尽可能把域名收拢到相同域名，可以尽可能的减少建连的耗时。</p><h4 id=\"SbrZd\" data-lake-id=\"6100b4eaf78c4bd2b4c207e4eec8f186\">IP 收拢</h4><p data-lake-id=\"af9a8d3461a997e1086ca6c62fe57224\">我们都知道，一个 TCP 连接是由一个四元组组成的（源 IP、源端口、目标 IP、目标端口），和域名其实没有关系。所以看起来很反直觉的一点是，当两个请求域名不同，但来自同一个 IP 时，同样可以复用连接（虽然会额外解析一次 DNS）。</p><p data-lake-id=\"9409a5fdecfff4861dd6dc87b907fbfa\"><br /></p><p data-lake-id=\"a0f641aa7ebbfe70182d8b29d31f18b5\">如果我们试用了类似于阿里云全站加速的技术，把页面和静态资源的 IP 指向同一个可以帮助我们减少重复的连接建立。</p><h3 id=\"7UdXx\" data-lake-id=\"e58da19aee88d4850ea291dcdfc5151b\">连接为什么不复用</h3><h4 data-lake-id=\"1b651f3aa0903587dab0c887ae4e8dda\" id=\"8RMHh\">如何确定一个连接</h4><p data-lake-id=\"2086181818360c3aa34716b282df07fe\">看起来无论是 <code>pre-connect</code> 还是链接复用都非常简单，但实际应用中并非如此。由于一些浏览器安全策略，不同的连接之间复用会受到一些限制。</p><p data-lake-id=\"776bd91c2054a7ca7cf91ddcbfd600d6\"><br /></p><p data-lake-id=\"26a63609679fc28034647fcd6ee470aa\">在 <a href=\"https://fetch.spec.whatwg.org/#cors-protocol-and-credentials\" target=\"_blank\">https://fetch.spec.whatwg.org/#cors-protocol-and-credentials</a> 我们可以看到</p><p data-lake-id=\"c49ba6356e1fe8e92318d172d6832c64\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"c9e20f7d007a80c9c582a97445231917\">A user agent has an associated connection pool. A connection pool consists of zero or more connections. Each connection is identified by an origin (an origin) and credentials (a boolean).</p></blockquote><p data-lake-id=\"120ee7167ba71fc7dd6f2f283d9e1102\"><br /></p><p data-lake-id=\"34c0f9d96c0bda363c43671201d68747\">即一个连接是由 <code>origin</code> 和 <code>credentials</code> 确定的，这里的 <code>origin</code> 并非单纯是指我们加载的连接的 <code>origin</code> ，而是对于页面上不同的资源来说，会遵循不同的策略（详细的策略见 <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin\" target=\"_blank\">https://html.spec.whatwg.org/multipage/origin.html#concept-origin</a>）。</p><p data-lake-id=\"773a24606f8283d083f79baae5b63709\"><br /></p><p data-lake-id=\"6477e19caa9d2af0d79ab4ed3f510216\">例如对于图像而言（其实对于 <code>script/css</code> 等来说也是一样的）</p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"44cf5ac260de4660c97ed053d5a201eb\">For images of <code><a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element\" target=\"_blank\">img</a></code> elements</p><p data-lake-id=\"3743496dad55c944f878841d4fb6c9c9\">If the <a href=\"https://html.spec.whatwg.org/multipage/images.html#img-req-data\" target=\"_blank\">image data</a> is <a href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-cross-origin\" target=\"_blank\">CORS-cross-origin</a></p><p data-lake-id=\"8559060a85109b496d1cf7cd0fe5fdce\" style=\"text-indent: 2em;\">A unique <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin-opaque\" target=\"_blank\">opaque origin</a> assigned when the image is created.</p><p data-lake-id=\"8db595db0ead478d1926ced1d12d5bb0\">If the <a href=\"https://html.spec.whatwg.org/multipage/images.html#img-req-data\" target=\"_blank\">image data</a> is <a href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-same-origin\" target=\"_blank\">CORS-same-origin</a></p><p data-lake-id=\"252c8fa7340ed1e946c894dd1704577e\" style=\"text-indent: 2em;\">The <code><a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element\" target=\"_blank\">img</a></code> element's <a href=\"https://dom.spec.whatwg.org/#concept-node-document\" target=\"_blank\">node document</a>'s <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin\" target=\"_blank\">origin</a>.</p></blockquote><p data-lake-id=\"38738fd5a20e55a0d99e57adc35a1d0d\"><br /></p><p data-lake-id=\"b3e1190c1e148dfbdb6f28134b8e9afa\">即在有 <code>crossorigin</code> 时（不是单纯的是另外一个域名时），则其 <code>origin</code> 是图片的 <code>origin</code> 。</p><p data-lake-id=\"2100e098b9b1fcb5ab9471fabcfcba5d\">如果没有（一般来说是没有的），则 <code>origin</code> 是页面相同的 <code>origin</code> 。</p><p data-lake-id=\"b12094b5d23261d28ea6a8c7598686c9\"><br /></p><p data-lake-id=\"4a5c9cf7adab611267b47aa24c8b93a6\">这意味着对于 <code>cors</code> 和 <code>non-cors</code> 的请求、<code><span>credentials=true</span></code> 和 <code><span>credentials=false</span></code> 的请求来说，他们的连接是不能复用的。</p><p data-lake-id=\"f4bc2d339c084a9ab5afa63396b6314d\"><br /></p><p data-lake-id=\"2c5a0136e3c65c9f0c98e8727e65e6bf\">例如 <a href=\"https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html\" target=\"_blank\">https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html</a> 这个页面中，有四个来自同一个域名的 <code>img</code> ，但是后面两个是 <code>crossorigin</code> 的</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cimg%20src%3D%5C%22https%3A%2F%2Fi.picsum.photos%2Fid%2F1061%2F200%2F200.jpg%5C%22%2F%3E%5Cn%3Cimg%20src%3D%5C%22https%3A%2F%2Fi.picsum.photos%2Fid%2F1061%2F200%2F300.jpg%5C%22%2F%3E%5Cn%3Cimg%20src%3D%5C%22https%3A%2F%2Fi.picsum.photos%2Fid%2F1061%2F100%2F300.jpg%5C%22%20crossorigin%2F%3E%5Cn%3Cimg%20src%3D%5C%22https%3A%2F%2Fi.picsum.photos%2Fid%2F1061%2F300%2F300.jpg%5C%22%20crossorigin%2F%3E%22%2C%22id%22%3A%22qjOm4%22%7D\"></card><p data-lake-id=\"5868cac9301043b06379a47479551182\"><br /></p><p data-lake-id=\"9f8410e4d4ede8eb343bb39a9337f754\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585190581512-5105a07b-5871-4d57-ac19-829f926b978c.png%22%2C%22originWidth%22%3A1924%2C%22originHeight%22%3A916%2C%22name%22%3A%22image.png%22%2C%22size%22%3A538733%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A791.6458%2C%22y%22%3A36.075%2C%22width%22%3A322.6709000000001%2C%22height%22%3A42.08749999999999%2C%22text%22%3A%22WaterfallView%22%7D%2C%7B%22x%22%3A322.67084%2C%22y%22%3A144.3%2C%22width%22%3A144.29998999999998%2C%22height%22%3A26.05417%2C%22text%22%3A%22IStartRender%22%7D%2C%7B%22x%22%3A495.02917%2C%22y%22%3A144.3%2C%22width%22%3A180.37502999999992%2C%22height%22%3A26.05417%2C%22text%22%3A%22IRUMFirstPaint%22%7D%2C%7B%22x%22%3A939.95416%2C%22y%22%3A144.3%2C%22width%22%3A240.5000399999999%2C%22height%22%3A24.049999999999983%2C%22text%22%3A%22DOMContentLoaded%22%7D%2C%7B%22x%22%3A1352.8125%2C%22y%22%3A144.3%2C%22width%22%3A240.5%2C%22height%22%3A30.0625%2C%22text%22%3A%22dIDocumentComplete%22%7D%2C%7B%22x%22%3A697.45%2C%22y%22%3A146.30417%2C%22width%22%3A186.38749999999993%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%22IDOMInteracitive%22%7D%2C%7B%22x%22%3A1238.575%2C%22y%22%3A146.30417%2C%22width%22%3A96.20000000000005%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%22OnLoad%22%7D%2C%7B%22x%22%3A1745.6292%2C%22y%22%3A222.46251%2C%22width%22%3A142.29579999999987%2C%22height%22%3A26.054149999999993%2C%22text%22%3A%22JSExecution%22%7D%2C%7B%22x%22%3A1210.5167%2C%22y%22%3A224.46667%2C%22width%22%3A62.12920000000008%2C%22height%22%3A24.049990000000008%2C%22text%22%3A%22Flash%22%7D%2C%7B%22x%22%3A1356.8208%2C%22y%22%3A224.46667%2C%22width%22%3A50.10419999999999%2C%22height%22%3A22.045829999999995%2C%22text%22%3A%22font%22%7D%2C%7B%22x%22%3A66.1375%2C%22y%22%3A226.47084%2C%22width%22%3A52.108334%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22wait%22%7D%2C%7B%22x%22%3A218.45416%2C%22y%22%3A226.47084%2C%22width%22%3A40.08334000000002%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22dns%22%7D%2C%7B%22x%22%3A501.04166%2C%22y%22%3A226.47084%2C%22width%22%3A38.07919000000004%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22ssI%22%7D%2C%7B%22x%22%3A639.32916%2C%22y%22%3A226.47084%2C%22width%22%3A50.10419000000002%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22html%22%7D%2C%7B%22x%22%3A795.6542%2C%22y%22%3A226.47084%2C%22width%22%3A30.0625%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22js%22%7D%2C%7B%22x%22%3A1062.2084%2C%22y%22%3A226.47084%2C%22width%22%3A58.12079999999992%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22IMage%22%7D%2C%7B%22x%22%3A1495.1084%2C%22y%22%3A226.47084%2C%22width%22%3A64.13329999999996%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22video%22%7D%2C%7B%22x%22%3A1633.3959%2C%22y%22%3A226.47084%2C%22width%22%3A60.125%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22other%22%7D%2C%7B%22x%22%3A336.7%2C%22y%22%3A228.475%2C%22width%22%3A84.17500000000001%2C%22height%22%3A20.041660000000007%2C%22text%22%3A%22connect%22%7D%2C%7B%22x%22%3A931.9375%2C%22y%22%3A228.475%2C%22width%22%3A44.091699999999946%2C%22height%22%3A20.041660000000007%2C%22text%22%3A%22CSS%22%7D%2C%7B%22x%22%3A1639.4083%2C%22y%22%3A298.62085%2C%22width%22%3A46.09590000000003%2C%22height%22%3A26.054149999999993%2C%22text%22%3A%221.5%22%7D%2C%7B%22x%22%3A575.19586%2C%22y%22%3A300.625%2C%22width%22%3A44.091639999999984%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%220.1%22%7D%2C%7B%22x%22%3A657.3667%2C%22y%22%3A300.625%2C%22width%22%3A40.08330000000001%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%220.2%22%7D%2C%7B%22x%22%3A725.50836%2C%22y%22%3A300.625%2C%22width%22%3A44.09168%2C%22height%22%3A22.04584%2C%22text%22%3A%220.3%22%7D%2C%7B%22x%22%3A887.8458%2C%22y%22%3A300.625%2C%22width%22%3A30.0625%2C%22height%22%3A26.05417%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A959.99585%2C%22y%22%3A300.625%2C%22width%22%3A44.09164999999996%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%220.6%22%7D%2C%7B%22x%22%3A1032.1459%2C%22y%22%3A300.625%2C%22width%22%3A44.09159999999997%2C%22height%22%3A22.04584%2C%22text%22%3A%220.7%22%7D%2C%7B%22x%22%3A1186.4667%2C%22y%22%3A300.625%2C%22width%22%3A42.08750000000009%2C%22height%22%3A22.04584%2C%22text%22%3A%220.9%22%7D%2C%7B%22x%22%3A1491.1%2C%22y%22%3A300.625%2C%22width%22%3A44.09170000000017%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%221.3%22%7D%2C%7B%22x%22%3A1565.2542%2C%22y%22%3A300.625%2C%22width%22%3A44.09159999999997%2C%22height%22%3A22.04584%2C%22text%22%3A%221.4%22%7D%2C%7B%22x%22%3A1719.5751%2C%22y%22%3A300.625%2C%22width%22%3A38.079099999999926%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%221.6%22%7D%2C%7B%22x%22%3A1793.7291%2C%22y%22%3A300.625%2C%22width%22%3A40.08339999999998%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%221.7%22%7D%2C%7B%22x%22%3A805.675%2C%22y%22%3A302.62918%2C%22width%22%3A44.09166000000005%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%220.4%22%7D%2C%7B%22x%22%3A1264.6292%2C%22y%22%3A302.62918%2C%22width%22%3A44.09159999999997%2C%22height%22%3A20.04165999999998%2C%22text%22%3A%221.0%22%7D%2C%7B%22x%22%3A1418.95%2C%22y%22%3A302.62918%2C%22width%22%3A36.075000000000045%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%221.2%22%7D%2C%7B%22x%22%3A32.066666%2C%22y%22%3A306.6375%2C%22width%22%3A76.158334%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%22step-1%22%7D%2C%7B%22x%22%3A72.15%2C%22y%22%3A346.72083%2C%22width%22%3A456.95000000000005%2C%22height%22%3A26.05417%2C%22text%22%3A%221.xcodebuild.git...ors-non-cors.html%22%7D%2C%7B%22x%22%3A68.14167%2C%22y%22%3A382.79584%2C%22width%22%3A376.78335000000004%2C%22height%22%3A24.04998999999998%2C%22text%22%3A%222.i.picsum.photos-200.jpg%22%7D%2C%7B%22x%22%3A1012.1042%2C%22y%22%3A382.79584%2C%22width%22%3A68.14159999999993%2C%22height%22%3A20.04165999999998%2C%22text%22%3A%22178m%22%7D%2C%7B%22x%22%3A60.125%2C%22y%22%3A416.86667%2C%22width%22%3A344.71667%2C%22height%22%3A26.05417%2C%22text%22%3A%223.i.picsum.photos-300.jpg%22%7D%2C%7B%22x%22%3A58.120834%2C%22y%22%3A450.9375%2C%22width%22%3A352.733326%2C%22height%22%3A24.050020000000018%2C%22text%22%3A%224.i.picsum.photos-300.jpg%22%7D%2C%7B%22x%22%3A1016.1125%2C%22y%22%3A452.94168%2C%22width%22%3A70.14580000000001%2C%22height%22%3A22.04584%2C%22text%22%3A%22149m%22%7D%2C%7B%22x%22%3A62.129166%2C%22y%22%3A483.00418%2C%22width%22%3A354.737504%2C%22height%22%3A26.05417%2C%22text%22%3A%225.i.picsun.photos-300.jpg%22%7D%2C%7B%22x%22%3A1198.4917%2C%22y%22%3A515.07086%2C%22width%22%3A627.3042%2C%22height%22%3A30.0625%2C%22text%22%3A%220.91.01.11.21.3141.51.61.7%22%7D%2C%7B%22x%22%3A118.245834%2C%22y%22%3A585.2167%2C%22width%22%3A186.387496%2C%22height%22%3A26.054100000000062%2C%22text%22%3A%22-cpuUtilization%22%7D%2C%7B%22x%22%3A120.25%2C%22y%22%3A679.4125%2C%22width%22%3A352.73334%2C%22height%22%3A30.0625%2C%22text%22%3A%22BandhuidthIn(o-5.000kops)%22%7D%2C%7B%22x%22%3A116.24167%2C%22y%22%3A777.6167%2C%22width%22%3A244.50833%2C%22height%22%3A30.0625%2C%22text%22%3A%22BraowserMainThread%22%7D%2C%7B%22x%22%3A118.245834%2C%22y%22%3A847.7625%2C%22width%22%3A240.50001600000002%2C%22height%22%3A24.049999999999955%2C%22text%22%3A%22PageisInteractive%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22WaterfallView%20IStartRender%20IRUMFirstPaint%20DOMContentLoaded%20dIDocumentComplete%20IDOMInteracitive%20OnLoad%20JSExecution%20Flash%20font%20wait%20dns%20ssI%20html%20js%20IMage%20video%20other%20connect%20CSS%201.5%200.1%200.2%200.3%200.5%200.6%200.7%200.9%201.3%201.4%201.6%201.7%200.4%201.0%201.2%20step-1%201.xcodebuild.git...ors-non-cors.html%202.i.picsum.photos-200.jpg%20178m%203.i.picsum.photos-300.jpg%204.i.picsum.photos-300.jpg%20149m%205.i.picsun.photos-300.jpg%200.91.01.11.21.3141.51.61.7%20-cpuUtilization%20BandhuidthIn(o-5.000kops)%20BraowserMainThread%20PageisInteractive%22%2C%22width%22%3A962%2C%22height%22%3A458%7D\"></card></p><p data-lake-id=\"4da7628a3b87eee54f02504b0d61adf2\">这样就会发现前面两个和后面两个分别能够复用连接，但是 <code>cors</code> 的和 <code>non-cors</code> 的不能复用连接。</p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"12aa126383eb69dbc7340c9f2205f3da\">其实这里如果有 crossorigin=&quot;use-credentials&quot;，其和 cors 也不能复用连接</p></blockquote><p data-lake-id=\"5600f710637ff3bdcf5cbe66c699316e\">具体这么做的原因主要是为了安全考虑，在 <a href=\"https://github.com/whatwg/fetch/issues/341\" target=\"_blank\">https://github.com/whatwg/fetch/issues/341</a> 中有提到，在这里不展开。</p><h4 data-lake-id=\"e872d748ee4bf8a610db0c1f81880c37\" id=\"0RLnO\">怎么避免不复用</h4><p data-lake-id=\"a5b74125bb3297ce3f0faff01fdf7578\">知道了怎么确定一个连接后，我们就知道怎么避免连接没有复用的问题。无论是我们尝试让两个请求复用一个连接还是通过 <code>preconnect</code> 去提前建连，都应该保持其 <code>cors</code> 和 <code>credentials</code> 的一致性。</p><p data-lake-id=\"80cb4a22b79d8b28edd5791528c8b817\"><br /></p><p data-lake-id=\"236c7fa1f7757395e21decdfb3ba3263\">由于实际规则其实蛮复杂的，并不能保证我们总是能判断策略是否符合预期，<strong>还是建议通过 </strong><strong><code>WebPageTest</code></strong><strong> 等工具验证是否有多余的建连。</strong></p><p data-lake-id=\"976905f2b2af29d300081e9a3216a9f4\"><br /></p><p data-lake-id=\"d45f6a86700f21654ffe21f1bce28cb7\">当然通过 Chrome Devtools 也能够验证这一点，我们可以在 Network 面板打开 <code>Connection ID</code> ，可以看到不同的连接使用的 <code>Connection ID</code> 是不同的。</p><p data-lake-id=\"0a3115b0b66ec5975000fb9396f6a6c3\"><br /></p><p data-lake-id=\"a2d4f632c2fa703c2abd8e56fa8c0440\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585191129731-7ff634e7-4184-4de0-98a0-d3339c388644.png%22%2C%22originWidth%22%3A2012%2C%22originHeight%22%3A202%2C%22name%22%3A%22image.png%22%2C%22size%22%3A181126%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A578.45%2C%22y%22%3A12.575%2C%22width%22%3A44.01249999999993%2C%22height%22%3A25.150000000000002%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A1288.9375%2C%22y%22%3A12.575%2C%22width%22%3A77.5458000000001%2C%22height%22%3A23.054166%2C%22text%22%3A%227.3KB%22%7D%2C%7B%22x%22%3A46.108334%2C%22y%22%3A14.670834%2C%22width%22%3A81.73749600000001%2C%22height%22%3A25.150001000000003%2C%22text%22%3A%22200.jpg%22%7D%2C%7B%22x%22%3A917.975%2C%22y%22%3A14.670834%2C%22width%22%3A217.96670000000006%2C%22height%22%3A25.150001000000003%2C%22text%22%3A%22cors-non-cors.html%22%7D%2C%7B%22x%22%3A1454.5083%2C%22y%22%3A14.670834%2C%22width%22%3A81.73749999999995%2C%22height%22%3A23.054166000000002%2C%22text%22%3A%22754Ms%22%7D%2C%7B%22x%22%3A1542.5333%2C%22y%22%3A14.670834%2C%22width%22%3A46.10829999999987%2C%22height%22%3A20.958332%2C%22text%22%3A%22229%22%7D%2C%7B%22x%22%3A750.30835%2C%22y%22%3A16.766666%2C%22width%22%3A50.29998999999998%2C%22height%22%3A23.054169%2C%22text%22%3A%22ipeg%22%7D%2C%7B%22x%22%3A46.108334%2C%22y%22%3A56.5875%2C%22width%22%3A79.641666%2C%22height%22%3A25.15%2C%22text%22%3A%22300.jpg%22%7D%2C%7B%22x%22%3A582.64166%2C%22y%22%3A56.5875%2C%22width%22%3A39.820839999999976%2C%22height%22%3A23.054170000000006%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A1282.65%2C%22y%22%3A56.5875%2C%22width%22%3A83.83330000000001%2C%22height%22%3A23.054170000000006%2C%22text%22%3A%2210.2kB%22%7D%2C%7B%22x%22%3A1450.3167%2C%22y%22%3A56.5875%2C%22width%22%3A83.83330000000001%2C%22height%22%3A25.15%2C%22text%22%3A%22755ms%22%7D%2C%7B%22x%22%3A1546.725%2C%22y%22%3A56.5875%2C%22width%22%3A39.82080000000019%2C%22height%22%3A23.054170000000006%2C%22text%22%3A%22229%22%7D%2C%7B%22x%22%3A750.30835%2C%22y%22%3A58.683334%2C%22width%22%3A52.39580999999998%2C%22height%22%3A20.958336000000003%2C%22text%22%3A%22jipeg%22%7D%2C%7B%22x%22%3A917.975%2C%22y%22%3A56.5875%2C%22width%22%3A224.2541%2C%22height%22%3A25.15%2C%22text%22%3A%22corS-non-cors.html%22%7D%2C%7B%22x%22%3A580.54584%2C%22y%22%3A96.40833%2C%22width%22%3A48.20416%2C%22height%22%3A25.150003999999996%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A1544.6292%2C%22y%22%3A96.40833%2C%22width%22%3A46.10829999999987%2C%22height%22%3A25.150003999999996%2C%22text%22%3A%22s243%22%7D%2C%7B%22x%22%3A44.0125%2C%22y%22%3A98.504166%2C%22width%22%3A83.83333%2C%22height%22%3A25.150003999999996%2C%22text%22%3A%22300.jpg%22%7D%2C%7B%22x%22%3A924.2625%2C%22y%22%3A98.504166%2C%22width%22%3A213.77499999999986%2C%22height%22%3A23.054168000000004%2C%22text%22%3A%22cors-non-cors.html%22%7D%2C%7B%22x%22%3A1291.0333%2C%22y%22%3A98.504166%2C%22width%22%3A73.35419999999999%2C%22height%22%3A20.958334000000008%2C%22text%22%3A%225.8kB%22%7D%2C%7B%22x%22%3A1450.3167%2C%22y%22%3A98.504166%2C%22width%22%3A81.73749999999995%2C%22height%22%3A23.054168000000004%2C%22text%22%3A%22753ms%22%7D%2C%7B%22x%22%3A748.2125%2C%22y%22%3A100.6%2C%22width%22%3A52.39584000000002%2C%22height%22%3A23.05417%2C%22text%22%3A%22ipog%22%7D%2C%7B%22x%22%3A580.54584%2C%22y%22%3A138.325%2C%22width%22%3A48.20416%2C%22height%22%3A25.150000000000006%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A44.0125%2C%22y%22%3A140.42084%2C%22width%22%3A83.83333%2C%22height%22%3A27.245830000000012%2C%22text%22%3A%22300.jpg%22%7D%2C%7B%22x%22%3A1278.4584%2C%22y%22%3A140.42084%2C%22width%22%3A85.92910000000006%2C%22height%22%3A25.149990000000003%2C%22text%22%3A%2214.6kB%22%7D%2C%7B%22x%22%3A1462.8917%2C%22y%22%3A138.325%2C%22width%22%3A62.875%2C%22height%22%3A27.245830000000012%2C%22text%22%3A%222.58s%22%7D%2C%7B%22x%22%3A1546.725%2C%22y%22%3A140.42084%2C%22width%22%3A44.012500000000045%2C%22height%22%3A25.149990000000003%2C%22text%22%3A%22243%22%7D%2C%7B%22x%22%3A752.4042%2C%22y%22%3A142.51666%2C%22width%22%3A50.299960000000056%2C%22height%22%3A23.05417%2C%22text%22%3A%22ipeg%22%7D%2C%7B%22x%22%3A924.2625%2C%22y%22%3A142.51666%2C%22width%22%3A209.5833%2C%22height%22%3A23.05417%2C%22text%22%3A%22corS-non-cors.html%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22200%207.3KB%20200.jpg%20cors-non-cors.html%20754Ms%20229%20ipeg%20300.jpg%20200%2010.2kB%20755ms%20229%20jipeg%20corS-non-cors.html%20200%20s243%20300.jpg%20cors-non-cors.html%205.8kB%20753ms%20ipog%20200%20300.jpg%2014.6kB%202.58s%20243%20ipeg%20corS-non-cors.html%22%2C%22width%22%3A1006%2C%22height%22%3A101%7D\"></card></p><h2 id=\"EyboO\" data-lake-id=\"81e2aaea9defd8d7f05478e785575ef3\">为什么要握手</h2><p data-lake-id=\"cde95d2636384e8380030a65f73e99ec\">为什么一定要先握手才能发送 HTTP 报文呢？这是由 TCP 本身的设计决定的，TCP 是一种可靠的传输层通信协议。所谓可靠，就是能保证数据流的顺序和完整性。</p><h3 id=\"qVj1E\" data-lake-id=\"ea5974f97f7c04f3e6b00ed283cd96d1\">ISN</h3><p data-lake-id=\"f80fa130199732a4efe2053f764896ca\">TCP 本身在网络层（IP 协议）的上层，应用层的下层（HTTP 协议）。当应用层发起请求时，把包传给 TCP，TCP 将其分割成合适的大小，将其传递给网络层。</p><p data-lake-id=\"e01f3acdba3193c10d03421381e3bdeb\"><br /></p><p data-lake-id=\"f5f90712762731f0e0e43a9f5bb49b6a\">为了保证不丢包，TCP 会给每一个包一个序号，接收端接受到后返回响应的确认消息。如果在合理的时间内没有收到确认，发送端则会认为发生了丢包，会尝试重新发送。</p><p data-lake-id=\"734d2352f27650d5e07762ad813c6e79\"><br /></p><p data-lake-id=\"264a4c99abf8ddb64c01bd36ce3e1df7\">而作为接收端，收到的包可能是乱序的（网络层不保证传输顺序）或者重复的（例如上面重新发送的时候就会重复），就会按照接收方的序号重新组建传输包的内容，然后将其交付给应用层。</p><p data-lake-id=\"9e0759b2beeb3429812ef38586a60bdd\"><br /></p><p data-lake-id=\"059e672ae7b629ceeb0d2bdc6a290df9\">理解了 TCP 保证顺序和完整性的原理，就理解了 TCP 包的序号（Sequence Number<strong>）</strong>的重要性，而 TCP 握手时就是为了相互交换初始序列号（ISN，Inital Sequence Number<strong>），</strong>从而保证互相收到的包都能够保持正确的顺序。</p><h4 id=\"MZ1LO\" data-lake-id=\"5cce42754381d63a51a1dc3e7956a09d\">为什么不能用固定值</h4><p data-lake-id=\"18011ddb451b01aa6ba276337fff3b8e\">从 ISN 的使用场景很自然可以想到，只要我们统一用一个固定值（例如0）作为 ISN，不就可以直接避免握手的性能损耗了么？</p><p data-lake-id=\"a2586b51e95547afd1edb1ed910b7fc9\"><br /></p><h5 id=\"Uj6iu\" data-lake-id=\"9d4f80a69f9a2664d2d6f0159be0e6b2\">避免相邻的 TCP 连接互相干扰</h5><p data-lake-id=\"8bf52e2b1a4316490f35ca9d6b04db7f\">假设我们把 ISN 统一设置为 0，当我们的客户端和一个服务器建立起连接后传输了一部分数据包后，突然网络中断了，这个时候他们之间重新建立起连接，ISN 仍然为 0。</p><p data-lake-id=\"d29f47fe1cae82b12397edfea2e924d0\"><br /></p><p data-lake-id=\"15d28bdcec02026342161eb18b1cbf03\">这个时候服务器端可能同时收到序号为 N 的包，但却无从判断这个包属于哪一个 TCP 连接。</p><h3 id=\"RPdQe\" data-lake-id=\"7c95bc17c4e4f24397713d76f9f74d3f\">结论</h3><p data-lake-id=\"63d7a2e8999188e7ba6aa1b2379b27c2\">TCP 为了确保能够把数据按照正确顺序、完整的发送给目标，必须通过握手同步 ISN。而由于 TCP 是全双工的（即双向通信），握手至少需要三次才能完成。</p><p data-lake-id=\"a2eeb26c9d779f5c0c3e49318325be5e\"><br /></p><p data-lake-id=\"a49c46cc5dca4d8d5a0845bb2cec370f\">其实对于客户端（浏览器）来说，从发送 ACK 到接受到 SYN-ACK 的过程就已经完成了 TCP 的建连，此时就可以开始给服务器端传输数据了。</p><h2 data-lake-id=\"33517611d33f530fc641ce7720d99b7c\" id=\"CeCLZ\">能不能更快一点</h2><h3 data-lake-id=\"1efdc8ddd8a0577afe77d27d70682d30\" id=\"IPdfI\">TCP Fast Open</h3><p data-lake-id=\"d0eb46a0c03ff2ebf3ebeabf0b1956a2\">TCP 协议每次都要等待 SYN-ACK+SYN-ACK 后，服务端的 TCP 才会把接收到的数据包传输给应用层，这样当连接不稳定时总是需要重新建立连接。那么，为什么不直接在第一次传输 SYN 时直接发送数据呢？</p><p data-lake-id=\"6fe199de0acf7f46d8652bc017a7e331\"><br /></p><p data-lake-id=\"2ac239e483c6bd375d42c59ff1c429e0\">事实上在 TCP 上有一个拓展标准是支持这么做的，称之为 TCP Fast Open，在 TFO 第一次建立连接时和正常的三次握手是相同的，但客户端会额外拿到一个 TFO Cookie。而当之后再重新建立连接（例如说断网后重连，或者移动设备切换网络登）时，则直接由 SYN 携带 TFO Cookie 和数据发送。服务端收到校验 Cookie 有效直接把数据交付给应用层。</p><p data-lake-id=\"a736d223f5c5752a64eaf631f7d69717\"><br /></p><p data-lake-id=\"9c165643bdb5ed9dfa455d1176bdb58e\">然而 TFO 并没有在所有的客户端和服务端默认打开，目前绝大多数浏览器都是不支持的，而且由于 TCP 作为协议层由操作系统实现，无法由应用层的浏览器、客户端等自由控制。</p><h3 data-lake-id=\"513c89fb34f3685e7a5d4da8f26831d5\" id=\"Yk40Q\">QUIC/HTTP3</h3><p data-lake-id=\"3d4080ad9779ba79973b59c1547da18c\">QUIC 和 HTTP3 也解决了建连耗时的问题，不在本文展开，后续会在其他文章介绍。</p><h2 data-lake-id=\"9338d05edc1197048619caa01d340429\" id=\"M0DPI\">总结</h2><p data-lake-id=\"b5dfaef9a22789393626a871f788c0b4\">由于 HTTP 是基于 TCP 的，而 TCP 为了可靠性是面向连接的，需要通过三次握手建立连接。</p><p data-lake-id=\"2bb56bc5bcd4debb387b8c681334888e\"><br /></p><p data-lake-id=\"2e3efb623bbc2f4c42176684612714d3\">在 HTTP2 后我们有了多路复用可以让多个请求在一个连接中进行，但是连接的复用并不是单纯由域名决定的，同一个域名的连接可能不能复用一个连接，而不同的域名其实也可能复用一个连接。我们需要尽可能确定连接被正确的复用了。如果使用了 CDN 技术，我们可以尝试让页面和资源使用相同的 IP 从而复用链接。</p><p data-lake-id=\"7c8f71d4911813d5114e8807269f0c17\"><br /></p><p data-lake-id=\"d106bc70ca5c39b06d8855b1bac12469\">除此之外，我们可以使用 <code>preconnect</code> 来提前建连，同样的，也需要确定这个提前建立的连接被正确复用了。这对于即将发起的请求、即将到来的 <code>redirect</code> 等非常有效。<span style=\"background-color: transparent;\"><br /></span></p><h2 data-lake-id=\"4ce15ad4ba6bcd2a8e4b85ad54ecf2cd\" id=\"MzPEp\">拓展阅读</h2><ul data-lake-id=\"90b7a58b04b97e8452e8bbd6083abeb6\"><li data-lake-id=\"753323fd1967269bdc238849416b4f77\"><a href=\"https://crenshaw.dev/preconnect-resource-hint-crossorigin-attribute/\" target=\"_blank\">preconnect resource hint and the crossorigin attribute</a></li><li data-lake-id=\"f1e180aa7f197bed5e2efa18a0c1b283\"><a href=\"https://github.com/whatwg/fetch/issues/341\" target=\"_blank\">https://github.com/whatwg/fetch/issues/341</a></li></ul>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"701b726d13b99afe12db80975f7cb050\">我们都知道 <code>HTTP</code> 是基于 <code>TCP</code> 的，而 <code>TCP</code> 是面向连接的。当我们向服务器请求一个页面时，首先需要建立 <code>TCP</code> 连接，才能开始真正开始传输内容。</p><p data-lake-id=\"2e663bb2a08b41d7082093e13ad0ed17\"><br /></p><p data-lake-id=\"c84cb01b549a897e8723dd026d58773d\">这个时间平时不容易被人察觉，因为开发场景下我们往往不需要重新建立连接。但是在有些场景（尤其是新用户场景、landing page 等）却会对页面的性能造成很大的影响。</p><p data-lake-id=\"26e68a98b2709fa5aa9364dce0c211d1\"><br /></p><p data-lake-id=\"dddf6360027e7afba073a9056f10848a\">图中 TCP 的部分为我们常说的建连时间（这里包含了 SSL 握手时间，下文的建连时间也指的是这段时间），前面的 DNS 时间往往和建连时间同时出现，后面会讲到这一点。</p><p data-lake-id=\"3ad0e4f28cc587e81f58066c8454be57\"><br /></p><p data-lake-id=\"ba244ba214d69e53eb135f34fa29ef64\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1584964408688-4c021c34-501c-408c-a704-1f30656ccbb1.png%22%2C%22originWidth%22%3A1473%2C%22originHeight%22%3A879%2C%22name%22%3A%22image.png%22%2C%22size%22%3A106021%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A425.02188%2C%22y%22%3A10.740625%2C%22width%22%3A144.23131999999998%2C%22height%22%3A18.412501%2C%22text%22%3A%22navigationStart%22%7D%2C%7B%22x%22%3A451.10626%2C%22y%22%3A47.565628%2C%22width%22%3A121.21564000000001%2C%22height%22%3A18.412501999999996%2C%22text%22%3A%22redirectstart%22%7D%2C%7B%22x%22%3A463.38126%2C%22y%22%3A84.390625%2C%22width%22%3A113.54379000000006%2C%22height%22%3A21.481255000000004%2C%22text%22%3A%22redirectEnd%22%7D%2C%7B%22x%22%3A501.74063%2C%22y%22%3A118.14688%2C%22width%22%3A105.87192000000005%2C%22height%22%3A19.946870000000004%2C%22text%22%3A%22fetchStart%22%7D%2C%7B%22x%22%3A556.97815%2C%22y%22%3A148.83438%2C%22width%22%3A193.33124999999995%2C%22height%22%3A18.412509999999997%2C%22text%22%3A%22domainLookupStart%22%7D%2C%7B%22x%22%3A601.47504%2C%22y%22%3A181.05626%2C%22width%22%3A148.83435999999995%2C%22height%22%3A16.87813%2C%22text%22%3A%22domainLookupEng%22%7D%2C%7B%22x%22%3A664.3844%2C%22y%22%3A213.27814%2C%22width%22%3A110.47503999999992%2C%22height%22%3A19.946859999999987%2C%22text%22%3A%22connectstart%22%7D%2C%7B%22x%22%3A705.8125%2C%22y%22%3A250.10313%2C%22width%22%3A217.8813%2C%22height%22%3A19.946890000000025%2C%22text%22%3A%22(secureConnectionStart)%22%7D%2C%7B%22x%22%3A727.29376%2C%22y%22%3A285.39377%2C%22width%22%3A108.94067999999993%2C%22height%22%3A18.412499999999966%2C%22text%22%3A%22connectEnd%22%7D%2C%7B%22x%22%3A751.8438%2C%22y%22%3A313.0125%2C%22width%22%3A135.02499999999998%2C%22height%22%3A19.94688000000002%2C%22text%22%3A%22regueststart%22%7D%2C%7B%22x%22%3A833.16565%2C%22y%22%3A348.30313%2C%22width%22%3A130.42184999999995%2C%22height%22%3A18.412509999999997%2C%22text%22%3A%22responseStart%22%7D%2C%7B%22x%22%3A914.48755%2C%22y%22%3A383.59378%2C%22width%22%3A121.2155499999999%2C%22height%22%3A16.878120000000024%2C%22text%22%3A%22responseEnd%22%7D%2C%7B%22x%22%3A21.48125%2C%22y%22%3A463.38126%2C%22width%22%3A62.909375%2C%22height%22%3A18.412500000000023%2C%22text%22%3A%22Prompt%22%7D%2C%7B%22x%22%3A296.1344%2C%22y%22%3A475.65628%2C%22width%22%3A41.42809999999997%2C%22height%22%3A19.946870000000047%2C%22text%22%3A%22App%22%7D%2C%7B%22x%22%3A386.6625%2C%22y%22%3A486.39688%2C%22width%22%3A39.89376999999996%2C%22height%22%3A18.412519999999972%2C%22text%22%3A%22DNS%22%7D%2C%7B%22x%22%3A756.4469%2C%22y%22%3A486.39688%2C%22width%22%3A87.45939999999996%2C%22height%22%3A19.94689999999997%2C%22text%22%3A%22Response%22%7D%2C%7B%22x%22%3A471.05313%2C%22y%22%3A487.93127%2C%22width%22%3A33.75626999999997%2C%22height%22%3A16.87813%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A997.3438%2C%22y%22%3A487.93127%2C%22width%22%3A95.13130000000012%2C%22height%22%3A19.94686999999999%2C%22text%22%3A%22Processing%22%7D%2C%7B%22x%22%3A35.290627%2C%22y%22%3A489.46564%2C%22width%22%3A32.221878000000004%2C%22height%22%3A15.343759999999975%2C%22text%22%3A%22for%22%7D%2C%7B%22x%22%3A153.4375%2C%22y%22%3A489.46564%2C%22width%22%3A72.11563000000001%2C%22height%22%3A15.343759999999975%2C%22text%22%3A%22redirect%22%7D%2C%7B%22x%22%3A587.66565%2C%22y%22%3A489.46564%2C%22width%22%3A75.18439000000001%2C%22height%22%3A15.343759999999975%2C%22text%22%3A%22Request%22%7D%2C%7B%22x%22%3A1215.2251%2C%22y%22%3A489.46564%2C%22width%22%3A69.04689999999982%2C%22height%22%3A15.343759999999975%2C%22text%22%3A%22onLoad%22%7D%2C%7B%22x%22%3A288.46252%2C%22y%22%3A501.74063%2C%22width%22%3A53.703130000000044%2C%22height%22%3A15.34376999999995%2C%22text%22%3A%22cache%22%7D%2C%7B%22x%22%3A21.48125%2C%22y%22%3A514.0156%2C%22width%22%3A61.375005%2C%22height%22%3A18.4125600000001%2C%22text%22%3A%22unload%22%7D%2C%7B%22x%22%3A138.09375%2C%22y%22%3A553.9094%2C%22width%22%3A64.44375%2C%22height%22%3A18.412500000000023%2C%22text%22%3A%22unIoaD%22%7D%2C%7B%22x%22%3A1299.6157%2C%22y%22%3A583.0625%2C%22width%22%3A141.1624999999999%2C%22height%22%3A19.946900000000028%2C%22text%22%3A%22LoadEventEnd%22%7D%2C%7B%22x%22%3A1279.6688%2C%22y%22%3A622.9563%2C%22width%22%3A144.23120000000017%2C%22height%22%3A16.878099999999904%2C%22text%22%3A%22loadEventstart%22%7D%2C%7B%22x%22%3A1221.3625%2C%22y%22%3A656.7125%2C%22width%22%3A136.5594000000001%2C%22height%22%3A19.946900000000028%2C%22text%22%3A%22domComplete%22%7D%2C%7B%22x%22%3A1178.4%2C%22y%22%3A695.0719%2C%22width%22%3A185.6594%2C%22height%22%3A21.48126000000002%2C%22text%22%3A%22domContentLoaded%22%7D%2C%7B%22x%22%3A1133.9032%2C%22y%22%3A733.4313%2C%22width%22%3A142.69690000000014%2C%22height%22%3A19.946900000000028%2C%22text%22%3A%22domlnteractive%22%7D%2C%7B%22x%22%3A1104.75%2C%22y%22%3A771.79065%2C%22width%22%3A118.14699999999993%2C%22height%22%3A19.946900000000028%2C%22text%22%3A%22domloading%22%7D%2C%7B%22x%22%3A1040.3063%2C%22y%22%3A805.54694%2C%22width%22%3A102.80310000000009%2C%22height%22%3A18.41246000000001%2C%22text%22%3A%22unloadEnd%22%7D%2C%7B%22x%22%3A1009.6188%2C%22y%22%3A845.4407%2C%22width%22%3A113.54380000000015%2C%22height%22%3A15.343700000000013%2C%22text%22%3A%22unloadstart%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22navigationStart%20redirectstart%20redirectEnd%20fetchStart%20domainLookupStart%20domainLookupEng%20connectstart%20(secureConnectionStart)%20connectEnd%20regueststart%20responseStart%20responseEnd%20Prompt%20App%20DNS%20Response%20TCP%20Processing%20for%20redirect%20Request%20onLoad%20cache%20unload%20unIoaD%20LoadEventEnd%20loadEventstart%20domComplete%20domContentLoaded%20domlnteractive%20domloading%20unloadEnd%20unloadstart%22%2C%22width%22%3A641%2C%22height%22%3A383%7D\"></card></p><h2 id=\"7I6OJ\" data-lake-id=\"ed139714b8defd154c0c9a2ce9b80c1e\">建连应该耗时多久</h2><h3 id=\"ppSgn\" data-lake-id=\"aec6fc99a23c036e3e4b42fde7999e1e\">RTT</h3><p data-lake-id=\"45bf22c587175efb792b5b45f3fca0b9\">在介绍建连的耗时之前，我们先介绍一下 <code>RTT(Round-Trip Time)</code> 的概念。RTT，即往返时延。指的是从发送端发送数据开始，到发送端收到来自接收端的确认（ACK）的时间。一般来说这个时间是由物理距离，网络传输路径等决定的。</p><p data-lake-id=\"2cd8bd6ec30045bf72f67e0d617311f9\"><br /></p><p data-lake-id=\"9542b20e62fccff34766d30f664cff42\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1584964922127-65173f15-e1ec-4fb1-ade1-74b65cfc8e8e.png%22%2C%22originWidth%22%3A720%2C%22originHeight%22%3A584%2C%22name%22%3A%22image.png%22%2C%22size%22%3A197676%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A0%2C%22y%22%3A87%2C%22width%22%3A90.75%2C%22height%22%3A15.75%2C%22text%22%3A%22lnitiateTCP%22%7D%2C%7B%22x%22%3A-1.5%2C%22y%22%3A108.75%2C%22width%22%3A89.25%2C%22height%22%3A13.5%2C%22text%22%3A%22connection%22%7D%2C%7B%22x%22%3A115.5%2C%22y%22%3A190.5%2C%22width%22%3A36%2C%22height%22%3A16.5%2C%22text%22%3A%22RTT%22%7D%2C%7B%22x%22%3A-0.75%2C%22y%22%3A273%2C%22width%22%3A94.5%2C%22height%22%3A17.25%2C%22text%22%3A%22Requestfile%22%7D%2C%7B%22x%22%3A118.5%2C%22y%22%3A356.25%2C%22width%22%3A29.25%2C%22height%22%3A15%2C%22text%22%3A%22RTT-%22%7D%2C%7B%22x%22%3A531%2C%22y%22%3A374.25%2C%22width%22%3A163.5%2C%22height%22%3A17.25%2C%22text%22%3A%22Timetotransmitfile%22%7D%2C%7B%22x%22%3A-1.5%2C%22y%22%3A453%2C%22width%22%3A154.5%2C%22height%22%3A15%2C%22text%22%3A%22Entirefilereceived%22%7D%2C%7B%22x%22%3A153.75%2C%22y%22%3A534.75%2C%22width%22%3A42.75%2C%22height%22%3A16.5%2C%22text%22%3A%22Time%22%7D%2C%7B%22x%22%3A483.75%2C%22y%22%3A537.75%2C%22width%22%3A39%2C%22height%22%3A12.75%2C%22text%22%3A%22Time%22%7D%2C%7B%22x%22%3A141.75%2C%22y%22%3A556.5%2C%22width%22%3A67.5%2C%22height%22%3A15%2C%22text%22%3A%22atclient%22%7D%2C%7B%22x%22%3A468%2C%22y%22%3A556.5%2C%22width%22%3A71.25%2C%22height%22%3A14.25%2C%22text%22%3A%22atserver%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22lnitiateTCP%20connection%20RTT%20Requestfile%20RTT-%20Timetotransmitfile%20Entirefilereceived%20Time%20Time%20atclient%20atserver%22%2C%22width%22%3A360%2C%22height%22%3A292%7D\"></card></p><p data-lake-id=\"4b8b701373a5aaed8f7fb696fcac10da\"><br /></p><h3 id=\"IaUYe\" data-lake-id=\"5c5b9ff977c317cdc838d53f21346707\">RTT 一般是多久</h3><p data-lake-id=\"60d802055537737344b1783cec7574e2\">最简单的方式就是 Ping 一下，我们在 Ping 的时候看到的 <code>time=xxms</code>  一般<strong>接近于一个 RTT</strong></p><p data-lake-id=\"ea2c71281d817b8815ada0f84c65e387\"><strong><br /></strong></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22PING%20115.239.211.112%20(115.239.211.112)%3A%2056%20data%20bytes%5Cn64%20bytes%20from%20115.239.211.112%3A%20icmp_seq%3D0%20ttl%3D55%20time%3D4.411%20ms%22%2C%22id%22%3A%226pntV%22%7D\"></card><p data-lake-id=\"28be9d380dfce7d5e4a7c40af673c7c5\"><br /></p><p data-lake-id=\"2f340fe99ff3819e1a29c35cc3e9a305\">实际上就是一来一回（下面是 <code>tcpdump</code> 抓到的 <code>ping</code> ）：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%2211%3A59%3A42.631275%20IP%2030.38.61.21%20%3E%20115.239.211.112%3A%20ICMP%20echo%20request%2C%20id%2011482%2C%20seq%200%2C%20length%2064%5Cn11%3A59%3A42.635593%20IP%20115.239.211.112%20%3E%2030.38.61.21%3A%20ICMP%20echo%20reply%2C%20id%2011482%2C%20seq%200%2C%20length%2064%22%2C%22id%22%3A%22eP4yg%22%7D\"></card><h3 id=\"ORwmh\" data-lake-id=\"edfca786170b32a20e4d25a407c676ed\">建连需要多少个 RTT</h3><p data-lake-id=\"bd68d3a5009b831a52e330af75425a07\">TCP 一种面向连接的通讯协议，在两个目标间发送 TCP 数据之前，TCP 需要通过三次握手建立起连接。而这个连接的过程其实是在交换一些初始数据，其中最重要的是 <span>Sequence Number。</span></p><p data-lake-id=\"d62ff75f2bd039b0e0b38f5c61306634\"><br /></p><p data-lake-id=\"3f4da40a705675a10f24a60294ce6cb9\">很多地方尝试用各种看起来形象的比喻来形容三次握手，但是实际上握手的过程非常简单，为了避免造成错误的理解，我们就平铺直叙，后面会解释为什么一定要经过三次握手才能建立起连接。三次握手的过程如下：</p><p data-lake-id=\"e9aa99137cc2ac65c582a3083b269557\"><br /></p><ol start=\"1\" data-lake-id=\"ae782c153de151fcba33abab2649fbfe\"><li data-lake-id=\"3ba821df151261a3037b8db8b7101cef\">客户端向服务端发送 SYN，传输 seq = X</li><li data-lake-id=\"6aa1ce48a0476d48e744ac62ee3b5c59\">服务端向客户端发送 ACK X+1，表示收到，客户端可以从 X+1 作为 seq 发送消息。同时发送 SYN，seq = Y，把自己设置成 established 状态（可接收数据）</li><li data-lake-id=\"c0ad34e3667e458536c4a72709d24c93\">客户端向服务端发送 ACK Y+1<span>，表示收到，服务端可以从 Y+1 作为 seq 发送消息，</span><span>，把自己设置成 established 状态（可接收数据）</span></li></ol><p data-lake-id=\"f27a9d012a797e2ce40fd497eb70f3e3\"><br /></p><p data-lake-id=\"908da72338d6fc3b5215aa455a15be5d\"><strong>到了第三步客户端发送完 ACK 后就认为连接已经建立完毕（毕竟不会有第四个 ACK 再告诉它已经收到了 ACK），然后开始把应用层的数据（HTTP 报文）开始传输。而服务器端则是收到这个 ACK 后才会开始把收到的数据交付给应用层（HTTP）。</strong></p><p data-lake-id=\"eb0d2ec25de6dba421652cb31cfc53e7\"><strong><br /></strong></p><p data-lake-id=\"472507a4da8faa495cd27cd68e9e5d3d\"><strong>所以在这个过程中，客户端在建连上话费的时间是一个 RTT。</strong></p><p data-lake-id=\"dca7d273f012522e76f94aa259e2e0e7\"><br /></p><p data-lake-id=\"cebe87baaadd492ea20360aab9697fd4\">这种情况说的是纯粹的 <code>Connect</code> 时间，不包括 <code>SSL</code> ，所以只是对 <code>http</code> 协议而言的，如果是 <code>https</code> 协议还需要再考虑 SSL 握手的时间，我们后续会在别的文章中介绍。</p><h4 id=\"guKHx\" data-lake-id=\"b7bcf1c42823a1671a02646edee25075\">动手试试</h4><p data-lake-id=\"58a92a07d8dbc61f5ef32f8229e19671\">我们可以使用 <code>WireShark</code> 来抓取一次  <code>http</code> 请求来看看建连的过程。</p><p data-lake-id=\"6f82d2629bd5e1f4d3e91c0b00ea9bfe\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1584966581339-1ff4f09d-c1dc-4dab-a0ef-636e942cf5fa.png%22%2C%22originWidth%22%3A2192%2C%22originHeight%22%3A1194%2C%22name%22%3A%22image.png%22%2C%22size%22%3A1880284%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1027.5%2C%22y%22%3A6.85%2C%22width%22%3A134.71669999999995%2C%22height%22%3A29.683332999999998%2C%22text%22%3A%22Wi-FI%3AenO%22%7D%2C%7B%22x%22%3A1264.9667%2C%22y%22%3A52.516666%2C%22width%22%3A319.6666%2C%22height%22%3A52.516664000000006%2C%22text%22%3A%220Q%E8%B1%86I%22%7D%2C%7B%22x%22%3A36.533333%2C%22y%22%3A125.58333%2C%22width%22%3A335.649987%2C%22height%22%3A29.683329999999998%2C%22text%22%3A%22ip-addr220.181.38.148%22%7D%2C%7B%22x%22%3A9.133333%2C%22y%22%3A171.25%2C%22width%22%3A31.966667%2C%22height%22%3A25.11667%2C%22text%22%3A%22NO.%22%7D%2C%7B%22x%22%3A680.4333%2C%22y%22%3A171.25%2C%22width%22%3A159.83335999999997%2C%22height%22%3A29.683330000000012%2C%22text%22%3A%22Destination%22%7D%2C%7B%22x%22%3A1127.9667%2C%22y%22%3A171.25%2C%22width%22%3A171.25%2C%22height%22%3A25.11667%2C%22text%22%3A%22olLengt-lnfo%22%7D%2C%7B%22x%22%3A152.98334%2C%22y%22%3A173.53333%2C%22width%22%3A52.51666%2C%22height%22%3A22.833339999999993%2C%22text%22%3A%22Time%22%7D%2C%7B%22x%22%3A321.94998%2C%22y%22%3A173.53333%2C%22width%22%3A141.56668000000002%2C%22height%22%3A25.11667%2C%22text%22%3A%22Source%22%7D%2C%7B%22x%22%3A1011.51666%2C%22y%22%3A173.53333%2C%22width%22%3A123.30004000000008%2C%22height%22%3A22.833339999999993%2C%22text%22%3A%22Protocol0%22%7D%2C%7B%22x%22%3A68.5%2C%22y%22%3A203.21666%2C%22width%22%3A91.33332999999999%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%22512464%22%7D%2C%7B%22x%22%3A687.2833%2C%22y%22%3A203.21666%2C%22width%22%3A221.48335999999995%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1276.3833%2C%22y%22%3A203.21666%2C%22width%22%3A468.0834%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%226023980%5BS%5DSeq-owin-65535%22%7D%2C%7B%22x%22%3A1778.7167%2C%22y%22%3A203.21666%2C%22width%22%3A401.86659999999983%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%22Len-OMSS-1460WS-64TSva.%22%7D%2C%7B%22x%22%3A137%2C%22y%22%3A205.5%2C%22width%22%3A152.98334%2C%22height%22%3A25.11667%2C%22text%22%3A%22%3A464.067930%22%7D%2C%7B%22x%22%3A363.05%2C%22y%22%3A203.21666%2C%22width%22%3A198.65000000000003%2C%22height%22%3A25.11667%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1029.7833%2C%22y%22%3A205.5%2C%22width%22%3A38.816699999999855%2C%22height%22%3A25.11667%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A1080.0166%2C%22y%22%3A223.76666%2C%22width%22%3A100.46670000000017%2C%22height%22%3A36.53334000000001%2C%22text%22%3A%221RTT%22%7D%2C%7B%22x%22%3A1025.2167%2C%22y%22%3A235.18333%2C%22width%22%3A50.2333000000001%2C%22height%22%3A29.683339999999987%2C%22text%22%3A%22TCP1%22%7D%2C%7B%22x%22%3A70.78333%2C%22y%22%3A237.46666%2C%22width%22%3A68.5%2C%22height%22%3A27.40001000000001%2C%22text%22%3A%2251256%22%7D%2C%7B%22x%22%3A360.76666%2C%22y%22%3A239.75%2C%22width%22%3A232.89994000000002%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A689.56665%2C%22y%22%3A239.75%2C%22width%22%3A200.93335000000002%2C%22height%22%3A29.68331999999998%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1203.3167%2C%22y%22%3A239.75%2C%22width%22%3A595.9498999999998%2C%22height%22%3A29.68331999999998%2C%22text%22%3A%22788060239%5BY%2CACKseq-oAck-win%22%7D%2C%7B%22x%22%3A137%2C%22y%22%3A239.75%2C%22width%22%3A155.26666%2C%22height%22%3A25.11667%2C%22text%22%3A%22564.099483%22%7D%2C%7B%22x%22%3A1721.6333%2C%22y%22%3A239.75%2C%22width%22%3A452.1001000000001%2C%22height%22%3A25.11667%2C%22text%22%3A%22ck-1win-8192Len-OMSS-1452%22%7D%2C%7B%22x%22%3A70.78333%2C%22y%22%3A276.28333%2C%22width%22%3A70.78333999999998%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%2251266%22%7D%2C%7B%22x%22%3A694.1333%2C%22y%22%3A276.28333%2C%22width%22%3A221.48334%2C%22height%22%3A25.11667%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A276.28333%2C%22width%22%3A150.69999%2C%22height%22%3A25.11667%2C%22text%22%3A%22664%2C099568%22%7D%2C%7B%22x%22%3A1173.6333%2C%22y%22%3A276.28333%2C%22width%22%3A579.9667%2C%22height%22%3A29.683340000000044%2C%22text%22%3A%225460239%2B80TACKISeq1Ck-1Win-2%22%7D%2C%7B%22x%22%3A1516.1333%2C%22y%22%3A303.68332%2C%22width%22%3A595.9499999999998%2C%22height%22%3A41.10001%2C%22text%22%3A%22GET%E8%AF%B7%E6%B1%82%E5%92%8CACK%E5%90%8C%E6%97%B6%E5%8F%91%E5%87%BA%22%7D%2C%7B%22x%22%3A691.85%2C%22y%22%3A310.53333%2C%22width%22%3A230.61669999999992%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1182.7666%2C%22y%22%3A310.53333%2C%22width%22%3A342.5%2C%22height%22%3A31.966670000000022%2C%22text%22%3A%22127GET%2FHTTP%2F1.1%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A310.53333%2C%22width%22%3A75.35%2C%22height%22%3A29.683310000000006%2C%22text%22%3A%2251276%22%7D%2C%7B%22x%22%3A365.3333%2C%22y%22%3A310.53333%2C%22width%22%3A198.65004%2C%22height%22%3A29.683310000000006%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1020.64996%2C%22y%22%3A312.81665%2C%22width%22%3A66.21674000000007%2C%22height%22%3A25.11667%2C%22text%22%3A%22HTTP%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A312.81665%2C%22width%22%3A150.69999%2C%22height%22%3A25.11667%2C%22text%22%3A%22764.099648%22%7D%2C%7B%22x%22%3A365.3333%2C%22y%22%3A347.06665%2C%22width%22%3A223.76670000000001%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A347.06665%2C%22width%22%3A198.65004999999996%2C%22height%22%3A25.11667%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1022.9333%2C%22y%22%3A347.06665%2C%22width%22%3A47.94999999999993%2C%22height%22%3A22.833349999999996%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A68.5%2C%22y%22%3A347.06665%2C%22width%22%3A70.78333%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%2251336%22%7D%2C%7B%22x%22%3A143.84999%2C%22y%22%3A349.35%2C%22width%22%3A148.41667%2C%22height%22%3A25.11663999999996%2C%22text%22%3A%22364.135146%22%7D%2C%7B%22x%22%3A1217.0166%2C%22y%22%3A349.35%2C%22width%22%3A790.0333%2C%22height%22%3A29.683329999999955%2C%22text%22%3A%22608069239%5BACK%5DSeq-1Ack-74Win-24704LenG%22%7D%2C%7B%22x%22%3A1221.5833%2C%22y%22%3A381.31665%2C%22width%22%3A835.6998999999998%2C%22height%22%3A31.966679999999997%2C%22text%22%3A%2259866023PH%2CCKck247Len305%22%7D%2C%7B%22x%22%3A68.5%2C%22y%22%3A383.6%2C%22width%22%3A68.5%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%225134%22%7D%2C%7B%22x%22%3A365.3333%2C%22y%22%3A381.31665%2C%22width%22%3A232.90004%2C%22height%22%3A31.966679999999997%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A698.7%2C%22y%22%3A383.6%2C%22width%22%3A184.94995999999992%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1025.2167%2C%22y%22%3A383.6%2C%22width%22%3A45.66660000000002%2C%22height%22%3A22.833319999999958%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A385.88333%2C%22width%22%3A152.98333000000002%2C%22height%22%3A25.11667%2C%22text%22%3A%22464.135150%22%7D%2C%7B%22x%22%3A367.61667%2C%22y%22%3A417.85%2C%22width%22%3A223.76662999999996%2C%22height%22%3A29.683329999999955%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A417.85%2C%22width%22%3A194.08339999999998%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%2230.3769.155%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A420.13333%2C%22width%22%3A70.78333%2C%22height%22%3A25.11667%2C%22text%22%3A%2251356%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A420.13333%2C%22width%22%3A150.69999%2C%22height%22%3A25.11667%2C%22text%22%3A%22564.135151%22%7D%2C%7B%22x%22%3A1018.36664%2C%22y%22%3A420.13333%2C%22width%22%3A66.21666000000005%2C%22height%22%3A25.11667%2C%22text%22%3A%22HTTP%22%7D%2C%7B%22x%22%3A1185.0499%2C%22y%22%3A420.13333%2C%22width%22%3A609.6501000000001%2C%22height%22%3A29.68331999999998%2C%22text%22%3A%22135HTTP%2F1.12000K(text%2Fhtml)%22%7D%2C%7B%22x%22%3A369.9%2C%22y%22%3A454.38333%2C%22width%22%3A198.64999999999998%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A1237.5667%2C%22y%22%3A454.38333%2C%22width%22%3A753.5%2C%22height%22%3A34.25%2C%22text%22%3A%224602398%5BACK%5D5eq-74Ack306WIn261824Len%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A456.66666%2C%22width%22%3A68.49999%2C%22height%22%3A25.11667%2C%22text%22%3A%225136%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A456.66666%2C%22width%22%3A150.69999%2C%22height%22%3A22.83334000000002%2C%22text%22%3A%2264.135266%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A456.66666%2C%22width%22%3A216.9167%2C%22height%22%3A25.11667%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1022.9333%2C%22y%22%3A456.66666%2C%22width%22%3A47.94999999999993%2C%22height%22%3A22.83334000000002%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A369.9%2C%22y%22%3A490.91666%2C%22width%22%3A187.23329999999999%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A694.1333%2C%22y%22%3A490.91666%2C%22width%22%3A223.76666%2C%22height%22%3A29.683340000000044%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1233%2C%22y%22%3A490.91666%2C%22width%22%3A760.3499999999999%2C%22height%22%3A29.683340000000044%2C%22text%22%3A%22460239%5BACK%5DSeq-74Ack-387WIn-261696Len0%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A490.91666%2C%22width%22%3A73.06666000000001%2C%22height%22%3A27.399990000000003%2C%22text%22%3A%2251376%22%7D%2C%7B%22x%22%3A139.28333%2C%22y%22%3A495.48334%2C%22width%22%3A152.98333%2C%22height%22%3A25.116660000000024%2C%22text%22%3A%22764.135266%22%7D%2C%7B%22x%22%3A694.1333%2C%22y%22%3A525.1666%2C%22width%22%3A221.48334%2C%22height%22%3A31.966699999999946%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1251.2666%2C%22y%22%3A525.1666%2C%22width%22%3A764.9167%2C%22height%22%3A31.966699999999946%2C%22text%22%3A%2260239%5BFIN%2CACKSq-74Ck3872244Len%22%7D%2C%7B%22x%22%3A367.61667%2C%22y%22%3A527.45%2C%22width%22%3A196.36667%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A66.21667%2C%22y%22%3A527.45%2C%22width%22%3A79.91666000000001%2C%22height%22%3A29.683299999999917%2C%22text%22%3A%2251386%22%7D%2C%7B%22x%22%3A141.56667%2C%22y%22%3A527.45%2C%22width%22%3A146.13331%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%22864.135439%22%7D%2C%7B%22x%22%3A1025.2167%2C%22y%22%3A529.73334%2C%22width%22%3A45.66660000000002%2C%22height%22%3A22.833309999999983%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A367.61667%2C%22y%22%3A561.7%2C%22width%22%3A216.91663000000005%2C%22height%22%3A27.399999999999977%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1235.2833%2C%22y%22%3A561.7%2C%22width%22%3A760.3499999999999%2C%22height%22%3A31.96659999999997%2C%22text%22%3A%228060239%5BACK%5DSeq-387Ack-75W1n24704Len-O%22%7D%2C%7B%22x%22%3A143.84999%2C%22y%22%3A563.98334%2C%22width%22%3A146.13335%2C%22height%22%3A27.399959999999965%2C%22text%22%3A%22964.168874%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A563.98334%2C%22width%22%3A191.80009999999993%2C%22height%22%3A25.116660000000024%2C%22text%22%3A%2230.3769.155%22%7D%2C%7B%22x%22%3A1022.9333%2C%22y%22%3A566.26666%2C%22width%22%3A47.94999999999993%2C%22height%22%3A22.83334000000002%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A1217.0166%2C%22y%22%3A593.6666%2C%22width%22%3A778.6167%2C%22height%22%3A36.53340000000003%2C%22text%22%3A%2260860239%5BFINCK%5Dq387ACk75247Le%22%7D%2C%7B%22x%22%3A367.61667%2C%22y%22%3A598.23334%2C%22width%22%3A219.19997999999998%2C%22height%22%3A27.399959999999965%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A696.4166%2C%22y%22%3A598.23334%2C%22width%22%3A194.08339999999998%2C%22height%22%3A25.116660000000024%2C%22text%22%3A%2230.3769.155%22%7D%2C%7B%22x%22%3A100.46667%2C%22y%22%3A600.51666%2C%22width%22%3A187.23331%2C%22height%22%3A25.11663999999996%2C%22text%22%3A%2214064.168878%22%7D%2C%7B%22x%22%3A1020.64996%2C%22y%22%3A600.51666%2C%22width%22%3A52.51664000000005%2C%22height%22%3A25.11663999999996%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A1191.9%2C%22y%22%3A627.9166%2C%22width%22%3A774.05%2C%22height%22%3A36.53340000000003%2C%22text%22%3A%225460239CK%5D75Ck388WI6144L%22%7D%2C%7B%22x%22%3A369.9%2C%22y%22%3A632.48334%2C%22width%22%3A189.51660000000004%2C%22height%22%3A29.68326000000002%2C%22text%22%3A%2230.37.69.155%22%7D%2C%7B%22x%22%3A691.85%2C%22y%22%3A632.48334%2C%22width%22%3A221.48329999999999%2C%22height%22%3A27.399959999999965%2C%22text%22%3A%22220.181.38.148%22%7D%2C%7B%22x%22%3A1020.64996%2C%22y%22%3A634.76666%2C%22width%22%3A52.51664000000005%2C%22height%22%3A27.399940000000015%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A75.35%2C%22y%22%3A637.05%2C%22width%22%3A228.33332%2C%22height%22%3A25.116600000000062%2C%22text%22%3A%22514164.168967%22%7D%2C%7B%22x%22%3A86.76666%2C%22y%22%3A737.51666%2C%22width%22%3A1000.10004%2C%22height%22%3A34.25%2C%22text%22%3A%22Frame577ytesonwe(16bits7tu(%22%7D%2C%7B%22x%22%3A89.049995%2C%22y%22%3A774.05%2C%22width%22%3A954.4333050000001%2C%22height%22%3A31.966660000000047%2C%22text%22%3A%22thernetSAppledf%3Ae%3A6f(696ea%3A6t)D-%22%7D%2C%7B%22x%22%3A929.31665%2C%22y%22%3A774.05%2C%22width%22%3A621.06665%2C%22height%22%3A34.25%2C%22text%22%3A%22st%3AIETF-VRRP-VRID_Oe(%400%3A00%3A5e%3A00%3A61%3A0e)%22%7D%2C%7B%22x%22%3A79.916664%2C%22y%22%3A810.5833%2C%22width%22%3A931.599996%2C%22height%22%3A29.683359999999993%2C%22text%22%3A%22InternetProtocolverson43376%22%7D%2C%7B%22x%22%3A707.8333%2C%22y%22%3A840.26666%2C%22width%22%3A680.4332999999999%2C%22height%22%3A36.53333999999995%2C%22text%22%3A%2260239%2CDstport%3AooSegk7%22%7D%2C%7B%22x%22%3A57.083332%2C%22y%22%3A847.11664%2C%22width%22%3A774.0499679999999%2C%22height%22%3A31.966660000000047%2C%22text%22%3A%22TransmissionControlProtoo%22%7D%2C%7B%22x%22%3A43.38333%2C%22y%22%3A883.64996%2C%22width%22%3A447.53333%2C%22height%22%3A31.966679999999997%2C%22text%22%3A%22HypertextTransterProtocol%22%7D%2C%7B%22x%22%3A91.33333%2C%22y%22%3A1075.45%2C%22width%22%3A806.01667%2C%22height%22%3A29.683299999999917%2C%22text%22%3A%2200000500Q10e6c96cfdfea8450%22%7D%2C%7B%22x%22%3A15.983333%2C%22y%22%3A1077.7333%2C%22width%22%3A75.349997%2C%22height%22%3A22.833399999999983%2C%22text%22%3A%220000%22%7D%2C%7B%22x%22%3A11.416666%2C%22y%22%3A1107.4166%2C%22width%22%3A82.199994%2C%22height%22%3A22.833399999999983%2C%22text%22%3A%220010%22%7D%2C%7B%22x%22%3A105.03333%2C%22y%22%3A1107.4166%2C%22width%22%3A673.58331%2C%22height%22%3A25.116700000000037%2C%22text%22%3A%220071000040004006d37d1e254596%22%7D%2C%7B%22x%22%3A2004.7666%2C%22y%22%3A1153.0833%2C%22width%22%3A155.26659999999993%2C%22height%22%3A25.116700000000037%2C%22text%22%3A%22Prafile%3ADefault%22%7D%2C%7B%22x%22%3A118.73333%2C%22y%22%3A1155.3667%2C%22width%22%3A550.28333%2C%22height%22%3A25.116600000000062%2C%22text%22%3A%22wiresharkWi-Fi20200323202344XrFly.pcapng%22%7D%2C%7B%22x%22%3A1415.6666%2C%22y%22%3A1155.3667%2C%22width%22%3A406.4333999999999%2C%22height%22%3A25.116600000000062%2C%22text%22%3A%22Packets%3A16481Displayed13.1%25)%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22Wi-FI%3AenO%200Q%E8%B1%86I%20ip-addr220.181.38.148%20NO.%20Destination%20olLengt-lnfo%20Time%20Source%20Protocol0%20512464%20220.181.38.148%206023980%5BS%5DSeq-owin-65535%20Len-OMSS-1460WS-64TSva.%20%3A464.067930%2030.37.69.155%20TCP%201RTT%20TCP1%2051256%20220.181.38.148%2030.37.69.155%20788060239%5BY%2CACKseq-oAck-win%20564.099483%20ck-1win-8192Len-OMSS-1452%2051266%20220.181.38.148%20664%2C099568%205460239%2B80TACKISeq1Ck-1Win-2%20GET%E8%AF%B7%E6%B1%82%E5%92%8CACK%E5%90%8C%E6%97%B6%E5%8F%91%E5%87%BA%20220.181.38.148%20127GET%2FHTTP%2F1.1%2051276%2030.37.69.155%20HTTP%20764.099648%20220.181.38.148%2030.37.69.155%20TCP%2051336%20364.135146%20608069239%5BACK%5DSeq-1Ack-74Win-24704LenG%2059866023PH%2CCKck247Len305%205134%20220.181.38.148%2030.37.69.155%20TCP%20464.135150%20220.181.38.148%2030.3769.155%2051356%20564.135151%20HTTP%20135HTTP%2F1.12000K(text%2Fhtml)%2030.37.69.155%204602398%5BACK%5D5eq-74Ack306WIn261824Len%205136%2064.135266%20220.181.38.148%20TCP%2030.37.69.155%20220.181.38.148%20460239%5BACK%5DSeq-74Ack-387WIn-261696Len0%2051376%20764.135266%20220.181.38.148%2060239%5BFIN%2CACKSq-74Ck3872244Len%2030.37.69.155%2051386%20864.135439%20TCP%20220.181.38.148%208060239%5BACK%5DSeq-387Ack-75W1n24704Len-O%20964.168874%2030.3769.155%20TCP%2060860239%5BFINCK%5Dq387ACk75247Le%20220.181.38.148%2030.3769.155%2014064.168878%20TCP%205460239CK%5D75Ck388WI6144L%2030.37.69.155%20220.181.38.148%20TCP%20514164.168967%20Frame577ytesonwe(16bits7tu(%20thernetSAppledf%3Ae%3A6f(696ea%3A6t)D-%20st%3AIETF-VRRP-VRID_Oe(%400%3A00%3A5e%3A00%3A61%3A0e)%20InternetProtocolverson43376%2060239%2CDstport%3AooSegk7%20TransmissionControlProtoo%20HypertextTransterProtocol%2000000500Q10e6c96cfdfea8450%200000%200010%200071000040004006d37d1e254596%20Prafile%3ADefault%20wiresharkWi-Fi20200323202344XrFly.pcapng%20Packets%3A16481Displayed13.1%25)%22%2C%22width%22%3A1096%2C%22height%22%3A597%7D\"></card></p><p data-lake-id=\"3572ccc615c991183f2ec45a84451458\">可以看到这里从发起 <code>seq</code> 到收到 <code>ack</code> （经过 1 <code>RTT</code> ）后，客户端就没有再等待直接发起了 <code>GET / HTTP/1.1</code> 的请求。</p><h2 id=\"tmNZ6\" data-lake-id=\"6edabe9926215f72c168798265f3ba84\">如何优化建连时间</h2><h3 id=\"vhZdc\" data-lake-id=\"08f44c78a214025b18b2f1e4a4d41a47\">例子</h3><p data-lake-id=\"89d97211206b061653c3bb9178cb8943\">我们用一个简单的页面看看建连对网页性能的影响：<a href=\"https://xcodebuild.github.io/why-so-slow/connect/index.html\" target=\"_blank\">https://xcodebuild.github.io/why-so-slow/connect/index.html</a></p><p data-lake-id=\"ed2cb9a1d85cc99bca0f37ff7043a949\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"86f246784c65207315ed344629b8e3a6\">这是一个测试页面，源代码托管在：<a href=\"https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html\" target=\"_blank\">https://github.com/xcodebuild/why-so-slow/blob/master/connect/index.html</a></p></blockquote><p data-lake-id=\"debcc747eadd173d286fd29fffd5b7ab\"><br /></p><p data-lake-id=\"690597af27dff4cc48006593d105fac8\">就像上面说的，我们在开发场景下往往不需要重新连接，包括 <code>Disable Cache</code> 是不会禁用 <code>TCP</code> 的连接复用的，所以我们使用 <a href=\"https://www.webpagetest.org/\" target=\"_blank\">Webpage Test</a> 来看一下这个页面的性能状况。</p><p data-lake-id=\"cce34c452da003791c918ff8c26958f1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585020683958-c843ada1-7492-44d1-8c71-e65389fb9850.png%22%2C%22originWidth%22%3A1910%2C%22originHeight%22%3A1164%2C%22name%22%3A%22image.png%22%2C%22size%22%3A229615%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A773.94794%2C%22y%22%3A29.843752%2C%22width%22%3A322.3125600000001%2C%22height%22%3A41.781248000000005%2C%22text%22%3A%22WaterfallView%22%7D%2C%7B%22x%22%3A479.4896%2C%22y%22%3A139.27084%2C%22width%22%3A175.08334000000002%2C%22height%22%3A25.864580000000018%2C%22text%22%3A%22IRUMFirstPaint%22%7D%2C%7B%22x%22%3A921.1771%2C%22y%22%3A139.27084%2C%22width%22%3A238.7500000000001%2C%22height%22%3A23.875%2C%22text%22%3A%22DOMContentLoaded%22%7D%2C%7B%22x%22%3A1340.9792%2C%22y%22%3A139.27084%2C%22width%22%3A234.77089999999998%2C%22height%22%3A27.854180000000014%2C%22text%22%3A%22IDocumentComplete%22%7D%2C%7B%22x%22%3A302.4167%2C%22y%22%3A141.26042%2C%22width%22%3A145.23958%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22IStartRender%22%7D%2C%7B%22x%22%3A682.4271%2C%22y%22%3A141.26042%2C%22width%22%3A185.0313%2C%22height%22%3A21.885419999999982%2C%22text%22%3A%22IDoMInteractive%22%7D%2C%7B%22x%22%3A1223.5938%2C%22y%22%3A141.26042%2C%22width%22%3A91.52080000000001%2C%22height%22%3A21.885419999999982%2C%22text%22%3A%22OnLoaD%22%7D%2C%7B%22x%22%3A1191.7605%2C%22y%22%3A218.85417%2C%22width%22%3A61.67709999999988%2C%22height%22%3A23.875%2C%22text%22%3A%22Flash%22%7D%2C%7B%22x%22%3A1611.5626%2C%22y%22%3A218.85417%2C%22width%22%3A69.63540000000012%2C%22height%22%3A23.875%2C%22text%22%3A%22other%22%7D%2C%7B%22x%22%3A1730.9376%2C%22y%22%3A218.85417%2C%22width%22%3A145.23950000000013%2C%22height%22%3A23.875%2C%22text%22%3A%22JSExecution%22%7D%2C%7B%22x%22%3A45.760418%2C%22y%22%3A220.84377%2C%22width%22%3A55.708342%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22wait%22%7D%2C%7B%22x%22%3A194.97917%2C%22y%22%3A220.84377%2C%22width%22%3A45.760429999999985%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22dns%22%7D%2C%7B%22x%22%3A620.75%2C%22y%22%3A220.84377%2C%22width%22%3A53.71879999999999%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22html%22%7D%2C%7B%22x%22%3A775.93756%2C%22y%22%3A220.84377%2C%22width%22%3A31.83334000000002%2C%22height%22%3A23.875%2C%22text%22%3A%22Js%22%7D%2C%7B%22x%22%3A915.2084%2C%22y%22%3A220.84377%2C%22width%22%3A41.78120000000001%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22css%22%7D%2C%7B%22x%22%3A1044.5312%2C%22y%22%3A220.84377%2C%22width%22%3A63.666800000000194%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22image%22%7D%2C%7B%22x%22%3A1335.0105%2C%22y%22%3A220.84377%2C%22width%22%3A59.6875%2C%22height%22%3A19.89582999999999%2C%22text%22%3A%22Font%22%7D%2C%7B%22x%22%3A1474.2814%2C%22y%22%3A220.84377%2C%22width%22%3A65.6561999999999%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22VIdeo%22%7D%2C%7B%22x%22%3A318.33334%2C%22y%22%3A222.83334%2C%22width%22%3A87.54168999999996%2C%22height%22%3A19.895830000000018%2C%22text%22%3A%22connect%22%7D%2C%7B%22x%22%3A481.4792%2C%22y%22%3A222.83334%2C%22width%22%3A45.760400000000004%2C%22height%22%3A19.895830000000018%2C%22text%22%3A%22ssI%22%7D%2C%7B%22x%22%3A714.26044%2C%22y%22%3A296.44794%2C%22width%22%3A33.822959999999966%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.2%22%7D%2C%7B%22x%22%3A823.68756%2C%22y%22%3A296.44794%2C%22width%22%3A39.79164000000003%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.3%22%7D%2C%7B%22x%22%3A1048.5105%2C%22y%22%3A296.44794%2C%22width%22%3A39.79160000000002%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A1161.9167%2C%22y%22%3A296.44794%2C%22width%22%3A35.8125%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.6%22%7D%2C%7B%22x%22%3A1275.323%2C%22y%22%3A296.44794%2C%22width%22%3A35.8125%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.7%22%7D%2C%7B%22x%22%3A1382.7605%2C%22y%22%3A296.44794%2C%22width%22%3A43.77089999999998%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.8%22%7D%2C%7B%22x%22%3A1611.5626%2C%22y%22%3A296.44794%2C%22width%22%3A39.79160000000002%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%221.0%22%7D%2C%7B%22x%22%3A1722.9792%2C%22y%22%3A296.44794%2C%22width%22%3A37.802200000000084%2C%22height%22%3A23.875%2C%22text%22%3A%221.1%22%7D%2C%7B%22x%22%3A600.8542%2C%22y%22%3A298.4375%2C%22width%22%3A35.8125%2C%22height%22%3A19.89584000000002%2C%22text%22%3A%220.1%22%7D%2C%7B%22x%22%3A1496.1667%2C%22y%22%3A298.4375%2C%22width%22%3A41.7813000000001%2C%22height%22%3A19.89584000000002%2C%22text%22%3A%220.9%22%7D%2C%7B%22x%22%3A9.947917%2C%22y%22%3A302.4167%2C%22width%22%3A73.614593%2C%22height%22%3A23.875%2C%22text%22%3A%22step-1%22%7D%2C%7B%22x%22%3A47.750004%2C%22y%22%3A344.19794%2C%22width%22%3A459.593776%2C%22height%22%3A23.875%2C%22text%22%3A%221.xcodlebuiid.github.io-index.html%22%7D%2C%7B%22x%22%3A913.2188%2C%22y%22%3A376.03128%2C%22width%22%3A47.75%2C%22height%22%3A23.875%2C%22text%22%3A%22147g%22%7D%2C%7B%22x%22%3A47.750004%2C%22y%22%3A378.02084%2C%22width%22%3A457.604196%2C%22height%22%3A23.875%2C%22text%22%3A%222.ccn.jsdeliur.n...production.min.js%22%7D%2C%7B%22x%22%3A43.770836%2C%22y%22%3A411.84378%2C%22width%22%3A449.64586399999996%2C%22height%22%3A23.875%2C%22text%22%3A%223.cdn.jsdelivr.n...production.min.js%22%7D%2C%7B%22x%22%3A1617.5314%2C%22y%22%3A443.6771%2C%22width%22%3A65.6561999999999%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%2237%E5%95%AAS%22%7D%2C%7B%22x%22%3A25.864584%2C%22y%22%3A447.65628%2C%22width%22%3A445.666696%2C%22height%22%3A21.88542000000001%2C%22text%22%3A%224.cert.int-x3.letsencrypt.org-%22%7D%2C%7B%22x%22%3A895.31256%2C%22y%22%3A479.4896%2C%22width%22%3A75.60414000000003%2C%22height%22%3A23.875%2C%22text%22%3A%22759NS%22%7D%2C%7B%22x%22%3A33.822918%2C%22y%22%3A479.4896%2C%22width%22%3A459.593782%2C%22height%22%3A23.875%2C%22text%22%3A%225.www.ocky7coo1b1%22%7D%2C%7B%22x%22%3A1382.7605%2C%22y%22%3A513.3125%2C%22width%22%3A45.76039999999989%2C%22height%22%3A23.875%2C%22text%22%3A%220.8%22%7D%2C%7B%22x%22%3A1496.1667%2C%22y%22%3A513.3125%2C%22width%22%3A45.76040000000012%2C%22height%22%3A23.875%2C%22text%22%3A%220.9%22%7D%2C%7B%22x%22%3A821.69794%2C%22y%22%3A515.3021%2C%22width%22%3A43.77085999999997%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.3%22%7D%2C%7B%22x%22%3A1159.9271%2C%22y%22%3A515.3021%2C%22width%22%3A39.79169999999999%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%220.6%22%7D%2C%7B%22x%22%3A1611.5626%2C%22y%22%3A515.3021%2C%22width%22%3A41.7813000000001%2C%22height%22%3A23.875%2C%22text%22%3A%221.0%22%7D%2C%7B%22x%22%3A1720.9896%2C%22y%22%3A515.3021%2C%22width%22%3A41.781299999999874%2C%22height%22%3A23.875%2C%22text%22%3A%221.1%22%7D%2C%7B%22x%22%3A1046.5209%2C%22y%22%3A517.2917%2C%22width%22%3A43.77080000000001%2C%22height%22%3A19.89580000000001%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A1267.3646%2C%22y%22%3A517.2917%2C%22width%22%3A47.75%2C%22height%22%3A19.89580000000001%2C%22text%22%3A%220.7%22%7D%2C%7B%22x%22%3A95.50001%2C%22y%22%3A578.96875%2C%22width%22%3A192.98959%2C%22height%22%3A25.864649999999983%2C%22text%22%3A%22%E4%B8%80cpuUtilization%22%7D%2C%7B%22x%22%3A431.7396%2C%22y%22%3A608.8125%2C%22width%22%3A161.1563%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22Request%235%22%7D%2C%7B%22x%22%3A646.6146%2C%22y%22%3A608.8125%2C%22width%22%3A89.53129999999999%2C%22height%22%3A23.875059999999962%2C%22text%22%3A%22Details%22%7D%2C%7B%22x%22%3A1024.6355%2C%22y%22%3A608.8125%2C%22width%22%3A165.1353999999999%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22RawDetailsOB%22%7D%2C%7B%22x%22%3A1181.8125%2C%22y%22%3A608.8125%2C%22width%22%3A93.51050000000009%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22object%22%7D%2C%7B%22x%22%3A758.0313%2C%22y%22%3A612.7917%2C%22width%22%3A109.4271%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22RequestT%22%7D%2C%7B%22x%22%3A885.3646%2C%22y%22%3A612.7917%2C%22width%22%3A119.375%2C%22height%22%3A23.875%2C%22text%22%3A%22Response%22%7D%2C%7B%22x%22%3A103.458336%2C%22y%22%3A674.4688%2C%22width%22%3A324.302104%2C%22height%22%3A29.843759999999975%2C%22text%22%3A%22BandsidthIn(o-5000Kblo%22%7D%2C%7B%22x%22%3A479.4896%2C%22y%22%3A680.43756%2C%22width%22%3A744.1042000000001%2C%22height%22%3A23.875%2C%22text%22%3A%22RL%3Ahttps%3A%2F%2Fwww.mocky.io%2F5e7978632d00007c0018b11%22%7D%2C%7B%22x%22%3A471.53128%2C%22y%22%3A714.26044%2C%22width%22%3A787.8751200000002%2C%22height%22%3A21.885459999999966%2C%22text%22%3A%22adedBy%3Ahttps%3A%2F%2Fxcodebuil.githuowwi%22%7D%2C%7B%22x%22%3A439.69794%2C%22y%22%3A746.0938%2C%22width%22%3A258.64585999999997%2C%22height%22%3A21.885400000000004%2C%22text%22%3A%22Host%3AwwW.mocky.Io%22%7D%2C%7B%22x%22%3A97.489586%2C%22y%22%3A773.94794%2C%22width%22%3A246.708354%2C%22height%22%3A27.85415999999998%2C%22text%22%3A%22BrowserHainThread%22%7D%2C%7B%22x%22%3A437.70834%2C%22y%22%3A773.94794%2C%22width%22%3A248.69795999999997%2C%22height%22%3A25.864619999999945%2C%22text%22%3A%22IP%3A34.249.48.47%22%7D%2C%7B%22x%22%3A443.6771%2C%22y%22%3A805.7813%2C%22width%22%3A292.4688%2C%22height%22%3A27.85414000000003%2C%22text%22%3A%22Error%2FStatusCode%3A200%22%7D%2C%7B%22x%22%3A101.46876%2C%22y%22%3A841.5938%2C%22width%22%3A240.73958000000002%2C%22height%22%3A23.875%2C%22text%22%3A%22PareisInteractive%22%7D%2C%7B%22x%22%3A441.68753%2C%22y%22%3A841.5938%2C%22width%22%3A202.93752999999998%2C%22height%22%3A23.875%2C%22text%22%3A%22Priority%3AHigh%22%7D%2C%7B%22x%22%3A435.71878%2C%22y%22%3A871.43756%2C%22width%22%3A232.78127999999998%2C%22height%22%3A25.864540000000034%2C%22text%22%3A%22Protocol%3Ahttp%2F1.1%22%7D%2C%7B%22x%22%3A435.71878%2C%22y%22%3A903.2709%2C%22width%22%3A246.70832000000001%2C%22height%22%3A25.864540000000034%2C%22text%22%3A%22RequestID%3A4542.6%22%7D%2C%7B%22x%22%3A437.70834%2C%22y%22%3A933.1146%2C%22width%22%3A242.72921999999994%2C%22height%22%3A27.85419999999999%2C%22text%22%3A%22clientPort%3A34938%22%7D%2C%7B%22x%22%3A437.70834%2C%22y%22%3A968.9271%2C%22width%22%3A266.60421999999994%2C%22height%22%3A25.864599999999996%2C%22text%22%3A%22Discovered%3A0.427s%22%7D%2C%7B%22x%22%3A435.71878%2C%22y%22%3A1000.76044%2C%22width%22%3A294.45832%2C%22height%22%3A25.864559999999983%2C%22text%22%3A%22RequestStart%3A0.988s%22%7D%2C%7B%22x%22%3A437.70834%2C%22y%22%3A1032.5938%2C%22width%22%3A288.4896%2C%22height%22%3A25.864599999999882%2C%22text%22%3A%22DNSLoOkup%3A30ms%22%7D%2C%7B%22x%22%3A435.71878%2C%22y%22%3A1064.4271%2C%22width%22%3A344.19792%2C%22height%22%3A25.864599999999882%2C%22text%22%3A%22Initialconnection%3A197ms%22%7D%2C%7B%22x%22%3A198.95834%2C%22y%22%3A1088.3021%2C%22width%22%3A139.27086%2C%22height%22%3A27.85409999999979%2C%22text%22%3A%22DNSLookup%22%7D%2C%7B%22x%22%3A433.7292%2C%22y%22%3A1096.2605%2C%22width%22%3A350.1667%2C%22height%22%3A25.864499999999907%2C%22text%22%3A%22ssLNegotiation%3A314m%22%7D%2C%7B%22x%22%3A433.7292%2C%22y%22%3A1128.0938%2C%22width%22%3A350.1667%2C%22height%22%3A23.875%2C%22text%22%3A%22TimetoFIrsTByTE%3A217mS%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22WaterfallView%20IRUMFirstPaint%20DOMContentLoaded%20IDocumentComplete%20IStartRender%20IDoMInteractive%20OnLoaD%20Flash%20other%20JSExecution%20wait%20dns%20html%20Js%20css%20image%20Font%20VIdeo%20connect%20ssI%200.2%200.3%200.5%200.6%200.7%200.8%201.0%201.1%200.1%200.9%20step-1%201.xcodlebuiid.github.io-index.html%20147g%202.ccn.jsdeliur.n...production.min.js%203.cdn.jsdelivr.n...production.min.js%2037%E5%95%AAS%204.cert.int-x3.letsencrypt.org-%20759NS%205.www.ocky7coo1b1%200.8%200.9%200.3%200.6%201.0%201.1%200.5%200.7%20%E4%B8%80cpuUtilization%20Request%235%20Details%20RawDetailsOB%20object%20RequestT%20Response%20BandsidthIn(o-5000Kblo%20RL%3Ahttps%3A%2F%2Fwww.mocky.io%2F5e7978632d00007c0018b11%20adedBy%3Ahttps%3A%2F%2Fxcodebuil.githuowwi%20Host%3AwwW.mocky.Io%20BrowserHainThread%20IP%3A34.249.48.47%20Error%2FStatusCode%3A200%20PareisInteractive%20Priority%3AHigh%20Protocol%3Ahttp%2F1.1%20RequestID%3A4542.6%20clientPort%3A34938%20Discovered%3A0.427s%20RequestStart%3A0.988s%20DNSLoOkup%3A30ms%20Initialconnection%3A197ms%20DNSLookup%20ssLNegotiation%3A314m%20TimetoFIrsTByTE%3A217mS%22%2C%22width%22%3A955%2C%22height%22%3A582%7D\"></card></p><p data-lake-id=\"800631c30623d7de088278a8c16ba509\"><br /></p><p data-lake-id=\"7ef3910ef9899b2a2128d6981ee67e54\">我们可以看到这这个页面的 JavaScript 文件以及后面的 <code>fetch</code> 请求都有个很长的 <code>DNS + Connect + SSL</code> 时间。因为他们的域名不同，所以需要重新解析域名。不是同一个 TCP 连接，所以需要重新建连（包括 SSL 握手）。</p><p data-lake-id=\"afcf8a7dcc3fa92d20f24e4aeccb86fe\"><br /></p><p data-lake-id=\"9f704e170e8c88f5740719505af3123c\">在图中这个 <code>fetch</code> 请求的 <code>Connect + SSL</code> 一共耗时 <code>500ms</code> ，意味着用户必须等待这个建连完成后才能真正发起这个请求。</p><h3 id=\"zlxEH\" data-lake-id=\"0744e0d629afe6e1b5a63ceb54cdf4c5\">pre-connect</h3><p data-lake-id=\"a6a97aebcf654d199cd72cde8a0e26b7\">为了解决上面这种问题，Chrome 引入了 <a href=\"https://web.dev/uses-rel-preconnect/\" target=\"_blank\"><code>Preconnect</code></a> （现在大部分浏览器都是支持的）。</p><p data-lake-id=\"137884bddae0f61b77e65c88eaae4151\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585102598647-3d2dd3b0-fbfc-4bbc-99f5-10debdf6ee91.png%22%2C%22originWidth%22%3A736%2C%22originHeight%22%3A300%2C%22name%22%3A%22image.png%22%2C%22size%22%3A76442%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A9.2%2C%22y%22%3A17.633333%2C%22width%22%3A181.70000000000002%2C%22height%22%3A16.100001%2C%22text%22%3A%22WithoutPreconnect%22%7D%2C%7B%22x%22%3A99.666664%2C%22y%22%3A59.033333%2C%22width%22%3A101.199986%2C%22height%22%3A13.033332999999999%2C%22text%22%3A%22DNS%2FTCP%2FTLS%22%7D%2C%7B%22x%22%3A468.43332%2C%22y%22%3A92%2C%22width%22%3A99.66668000000004%2C%22height%22%3A13.799994999999996%2C%22text%22%3A%22DNS%2FTCP%2FTLS%22%7D%2C%7B%22x%22%3A602.6%2C%22y%22%3A121.13333%2C%22width%22%3A107.33330000000001%2C%22height%22%3A13.033330000000007%2C%22text%22%3A%22LoadTime-2.6s%22%7D%2C%7B%22x%22%3A11.5%2C%22y%22%3A167.9%2C%22width%22%3A151.03333%2C%22height%22%3A15.333319999999986%2C%22text%22%3A%22WithPreconnect%22%7D%2C%7B%22x%22%3A101.96666%2C%22y%22%3A213.9%2C%22width%22%3A98.13332999999999%2C%22height%22%3A13.033320000000003%2C%22text%22%3A%22DNS%2FTCP%2FTLS%22%7D%2C%7B%22x%22%3A100.43333%2C%22y%22%3A247.63333%2C%22width%22%3A98.89999999999999%2C%22height%22%3A13.79998999999998%2C%22text%22%3A%22DNS%2FTCP%2FTLS%22%7D%2C%7B%22x%22%3A601.8333%2C%22y%22%3A275.23334%2C%22width%22%3A110.40003999999999%2C%22height%22%3A16.09996000000001%2C%22text%22%3A%22LoadTime-2.1s%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22WithoutPreconnect%20DNS%2FTCP%2FTLS%20DNS%2FTCP%2FTLS%20LoadTime-2.6s%20WithPreconnect%20DNS%2FTCP%2FTLS%20DNS%2FTCP%2FTLS%20LoadTime-2.1s%22%2C%22width%22%3A368%2C%22height%22%3A150%7D\"></card></p><p data-lake-id=\"4fa8837eaf14cae7bb776402bb2a91b1\">我们可以在页面的 <code>&lt;head&gt;</code> 中加入</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Clink%20rel%3D%5C%22preconnect%5C%22%20href%3D%5C%22https%3A%2F%2Fwww.mocky.io%5C%22%20crossorigin%3E%22%2C%22id%22%3A%22yWrSj%22%7D\"></card><p data-lake-id=\"cdfa9385bcb1b76ec4f0ee2ac63b9dde\"><br /></p><p data-lake-id=\"53b5923343d19fd0acf27b19c6906bba\">来告知浏览器提前建立连接。</p><p data-lake-id=\"93387630c007351e1392c5103478f004\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585043302410-4fc5bf0c-b9f3-45ef-bba2-3ebbe7ce0ce0.png%22%2C%22originWidth%22%3A1994%2C%22originHeight%22%3A538%2C%22name%22%3A%22image.png%22%2C%22size%22%3A401496%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A828.7563%2C%22y%22%3A10.385417%2C%22width%22%3A330.25620000000004%2C%22height%22%3A43.618748999999994%2C%22text%22%3A%22WaterfallView%22%7D%2C%7B%22x%22%3A535.8875%2C%22y%22%3A120.47083%2C%22width%22%3A180.70624999999995%2C%22height%22%3A27.00208999999998%2C%22text%22%3A%22RUMFirstPaint%22%7D%2C%7B%22x%22%3A357.25833%2C%22y%22%3A122.54792%2C%22width%22%3A147.47293000000002%2C%22height%22%3A24.924999999999983%2C%22text%22%3A%22lStartRender%22%7D%2C%7B%22x%22%3A739.44165%2C%22y%22%3A124.625%2C%22width%22%3A178.62921000000006%2C%22height%22%3A22.847919999999988%2C%22text%22%3A%22IDomInteractive%22%7D%2C%7B%22x%22%3A1273.2521%2C%22y%22%3A124.625%2C%22width%22%3A101.77710000000002%2C%22height%22%3A24.92500000000001%2C%22text%22%3A%22OnLoad%22%7D%2C%7B%22x%22%3A1399.9542%2C%22y%22%3A124.625%2C%22width%22%3A216.01660000000015%2C%22height%22%3A24.92500000000001%2C%22text%22%3A%22IDocumentCompleto%22%7D%2C%7B%22x%22%3A984.53754%2C%22y%22%3A126.70209%2C%22width%22%3A240.94155999999998%2C%22height%22%3A24.92500000000001%2C%22text%22%3A%22DOMContentLoaded%22%7D%2C%7B%22x%22%3A1213.0167%2C%22y%22%3A164.08958%2C%22width%22%3A195.24580000000014%2C%22height%22%3A29.079169999999976%2C%22text%22%3A%22%E8%BF%99%E9%87%8C%E6%89%8D%E5%BC%80%E5%A7%8B%E8%B0%83%E7%94%A8fe%22%7D%2C%7B%22x%22%3A1402.0312%2C%22y%22%3A168.24374%2C%22width%22%3A78.92920000000004%2C%22height%22%3A22.84792999999999%2C%22text%22%3A%22%E7%94%A8fetch%22%7D%2C%7B%22x%22%3A679.20624%2C%22y%22%3A203.55417%2C%22width%22%3A49.850059999999985%2C%22height%22%3A20.77082999999999%2C%22text%22%3A%22html%22%7D%2C%7B%22x%22%3A834.9875%2C%22y%22%3A203.55417%2C%22width%22%3A29.079150000000027%2C%22height%22%3A27.00209000000001%2C%22text%22%3A%22js%22%7D%2C%7B%22x%22%3A1528.7334%2C%22y%22%3A203.55417%2C%22width%22%3A68.54369999999994%2C%22height%22%3A22.847910000000013%2C%22text%22%3A%22VidE0%22%7D%2C%7B%22x%22%3A1782.1376%2C%22y%22%3A203.55417%2C%22width%22%3A147.47289999999998%2C%22height%22%3A24.92500000000001%2C%22text%22%3A%22JSExEcution%22%7D%2C%7B%22x%22%3A373.875%2C%22y%22%3A203.55417%2C%22width%22%3A91.39166%2C%22height%22%3A20.77082999999999%2C%22text%22%3A%22connect%22%7D%2C%7B%22x%22%3A1244.173%2C%22y%22%3A205.63126%2C%22width%22%3A68.54369999999994%2C%22height%22%3A20.770820000000015%2C%22text%22%3A%22flash%22%7D%2C%7B%22x%22%3A1676.2063%2C%22y%22%3A205.63126%2C%22width%22%3A62.3125%2C%22height%22%3A20.770820000000015%2C%22text%22%3A%22other%22%7D%2C%7B%22x%22%3A1100.8541%2C%22y%22%3A207.70833%2C%22width%22%3A64.38969999999995%2C%22height%22%3A20.77084000000002%2C%22text%22%3A%22iMage%22%7D%2C%7B%22x%22%3A726.9792%2C%22y%22%3A278.32916%2C%22width%22%3A47.77290000000005%2C%22height%22%3A27.002079999999978%2C%22text%22%3A%220.2%22%7D%2C%7B%22x%22%3A1771.7521%2C%22y%22%3A278.32916%2C%22width%22%3A43.61869999999999%2C%22height%22%3A24.925020000000018%2C%22text%22%3A%221.3%22%7D%2C%7B%22x%22%3A635.5875%2C%22y%22%3A280.40625%2C%22width%22%3A43.61874%2C%22height%22%3A24.92498999999998%2C%22text%22%3A%220.1%22%7D%2C%7B%22x%22%3A828.7563%2C%22y%22%3A280.40625%2C%22width%22%3A39.464500000000044%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%220.3%22%7D%2C%7B%22x%22%3A920.14795%2C%22y%22%3A280.40625%2C%22width%22%3A39.46454999999992%2C%22height%22%3A20.770849999999996%2C%22text%22%3A%220.4%22%7D%2C%7B%22x%22%3A1013.6167%2C%22y%22%3A280.40625%2C%22width%22%3A41.54160000000002%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A1208.8625%2C%22y%22%3A280.40625%2C%22width%22%3A39.46460000000002%2C%22height%22%3A20.770849999999996%2C%22text%22%3A%220.7%22%7D%2C%7B%22x%22%3A1300.2542%2C%22y%22%3A280.40625%2C%22width%22%3A41.54169999999999%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%220.8%22%7D%2C%7B%22x%22%3A1391.6459%2C%22y%22%3A280.40625%2C%22width%22%3A43.61869999999999%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%220.9%22%7D%2C%7B%22x%22%3A1684.5146%2C%22y%22%3A280.40625%2C%22width%22%3A37.387500000000045%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%221.2%22%7D%2C%7B%22x%22%3A1867.298%2C%22y%22%3A280.40625%2C%22width%22%3A41.54160000000002%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%221.4%22%7D%2C%7B%22x%22%3A1111.2396%2C%22y%22%3A282.48334%2C%22width%22%3A41.54159999999979%2C%22height%22%3A20.77084000000002%2C%22text%22%3A%220.6%22%7D%2C%7B%22x%22%3A1584.8146%2C%22y%22%3A282.48334%2C%22width%22%3A39.46460000000002%2C%22height%22%3A22.84789999999998%2C%22text%22%3A%221.1%22%7D%2C%7B%22x%22%3A70.620834%2C%22y%22%3A286.6375%2C%22width%22%3A76.85208599999999%2C%22height%22%3A22.84790000000004%2C%22text%22%3A%22step-1%22%7D%2C%7B%22x%22%3A114.239586%2C%22y%22%3A326.10208%2C%22width%22%3A442.418714%2C%22height%22%3A27.002079999999978%2C%22text%22%3A%221.xcodebuild.sit...-precornect.htmi%22%7D%2C%7B%22x%22%3A953.3813%2C%22y%22%3A328.17917%2C%22width%22%3A58.15829999999994%2C%22height%22%3A22.84793000000002%2C%22text%22%3A%22375ms%22%7D%2C%7B%22x%22%3A1142.3959%2C%22y%22%3A359.33542%2C%22width%22%3A49.849899999999934%2C%22height%22%3A24.924980000000005%2C%22text%22%3A%22155%22%7D%2C%7B%22x%22%3A103.854164%2C%22y%22%3A359.33542%2C%22width%22%3A471.497936%2C%22height%22%3A29.07916%2C%22text%22%3A%222.cdn.jsdelivr.n...production.min.Js%22%7D%2C%7B%22x%22%3A1204.7084%2C%22y%22%3A394.64584%2C%22width%22%3A68.54369999999994%2C%22height%22%3A22.84789999999998%2C%22text%22%3A%22109%22%7D%2C%7B%22x%22%3A97.62292%2C%22y%22%3A396.72293%2C%22width%22%3A459.03538000000003%2C%22height%22%3A24.92498999999998%2C%22text%22%3A%223.cdn.Jsdelivr.n...produiction.min.J%22%7D%2C%7B%22x%22%3A1636.7417%2C%22y%22%3A427.87918%2C%22width%22%3A70.62079999999992%2C%22height%22%3A24.92498999999998%2C%22text%22%3A%2236NS%22%7D%2C%7B%22x%22%3A97.62292%2C%22y%22%3A429.95627%2C%22width%22%3A425.80207999999993%2C%22height%22%3A24.92498999999998%2C%22text%22%3A%224.cert.int-x3.letsencrypt.org-%22%7D%2C%7B%22x%22%3A963.76666%2C%22y%22%3A461.11252%2C%22width%22%3A76.85213999999996%2C%22height%22%3A24.924980000000005%2C%22text%22%3A%22880ms%22%7D%2C%7B%22x%22%3A103.854164%2C%22y%22%3A461.11252%2C%22width%22%3A456.95833600000003%2C%22height%22%3A27.002079999999978%2C%22text%22%3A%225.wWw.ocky.009c73113%22%7D%2C%7B%22x%22%3A1676.2063%2C%22y%22%3A496.4229%2C%22width%22%3A43.618799999999965%2C%22height%22%3A27.002099999999928%2C%22text%22%3A%221.2%22%7D%2C%7B%22x%22%3A1771.7521%2C%22y%22%3A496.4229%2C%22width%22%3A41.54169999999999%2C%22height%22%3A24.924999999999955%2C%22text%22%3A%221.3%22%7D%2C%7B%22x%22%3A635.5875%2C%22y%22%3A498.5%2C%22width%22%3A39.464560000000006%2C%22height%22%3A22.84789999999998%2C%22text%22%3A%220.1%22%7D%2C%7B%22x%22%3A915.9938%2C%22y%22%3A496.4229%2C%22width%22%3A45.69580000000008%2C%22height%22%3A24.924999999999955%2C%22text%22%3A%220.4%22%7D%2C%7B%22x%22%3A1017.7708%2C%22y%22%3A498.5%2C%22width%22%3A33.233400000000074%2C%22height%22%3A20.77080000000001%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A1109.1625%2C%22y%22%3A498.5%2C%22width%22%3A41.54169999999999%2C%22height%22%3A22.84789999999998%2C%22text%22%3A%220.6%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22WaterfallView%20RUMFirstPaint%20lStartRender%20IDomInteractive%20OnLoad%20IDocumentCompleto%20DOMContentLoaded%20%E8%BF%99%E9%87%8C%E6%89%8D%E5%BC%80%E5%A7%8B%E8%B0%83%E7%94%A8fe%20%E7%94%A8fetch%20html%20js%20VidE0%20JSExEcution%20connect%20flash%20other%20iMage%200.2%201.3%200.1%200.3%200.4%200.5%200.7%200.8%200.9%201.2%201.4%200.6%201.1%20step-1%201.xcodebuild.sit...-precornect.htmi%20375ms%20155%202.cdn.jsdelivr.n...production.min.Js%20109%203.cdn.Jsdelivr.n...produiction.min.J%2036NS%204.cert.int-x3.letsencrypt.org-%20880ms%205.wWw.ocky.009c73113%201.2%201.3%200.1%200.4%200.5%200.6%22%2C%22width%22%3A997%2C%22height%22%3A269%7D\"></card></p><p data-lake-id=\"7e76604f0ebc96c939f484151b3ecb34\">可以看到这种情况下，我们在 JS 加载后前（实际上 <code>fetch</code> 这个时候才能开始执行），就开始建立连接。同时 <code>preconnect</code> 也附带着让浏览器提前进行了 DNS 解析。</p><h3 id=\"QIrav\" data-lake-id=\"78a8bcb0e57657edb1fe385347d6c081\">连接复用</h3><p data-lake-id=\"051097bcd53f9be26d32f8df0f6cd3ab\">当然如果直接使用同一个连接，即使不使用 <code>pre-connect</code> 就能天然减少额外的连接次数。</p><h4 id=\"cSppd\" data-lake-id=\"ca062d8c857698ffe7d142655feb0366\">域名收拢</h4><p data-lake-id=\"b294e747a4bb36c398558ede70b441a7\">在 HTTP 1 时代，为了解决阻塞的问题，很多网站都做了分散域名的优化让多个请求可以并行加载。而在 HTTP 2 普及后，已经具备了连接复用的能力，使用多个分散的域名只会让我们消耗更高的连接成本。</p><p data-lake-id=\"517fab71968a2ac8b1146c92b4d8f5ad\"><br /></p><p data-lake-id=\"81ac2cf0d027cb4e7b0c8779f03bc73f\">所以尽可能把域名收拢到相同域名，可以尽可能的减少建连的耗时。</p><h4 id=\"SbrZd\" data-lake-id=\"6100b4eaf78c4bd2b4c207e4eec8f186\">IP 收拢</h4><p data-lake-id=\"af9a8d3461a997e1086ca6c62fe57224\">我们都知道，一个 TCP 连接是由一个四元组组成的（源 IP、源端口、目标 IP、目标端口），和域名其实没有关系。所以看起来很反直觉的一点是，当两个请求域名不同，但来自同一个 IP 时，同样可以复用连接（虽然会额外解析一次 DNS）。</p><p data-lake-id=\"9409a5fdecfff4861dd6dc87b907fbfa\"><br /></p><p data-lake-id=\"a0f641aa7ebbfe70182d8b29d31f18b5\">如果我们试用了类似于阿里云全站加速的技术，把页面和静态资源的 IP 指向同一个可以帮助我们减少重复的连接建立。</p><h3 id=\"7UdXx\" data-lake-id=\"e58da19aee88d4850ea291dcdfc5151b\">连接为什么不复用</h3><h4 data-lake-id=\"1b651f3aa0903587dab0c887ae4e8dda\" id=\"8RMHh\">如何确定一个连接</h4><p data-lake-id=\"2086181818360c3aa34716b282df07fe\">看起来无论是 <code>pre-connect</code> 还是链接复用都非常简单，但实际应用中并非如此。由于一些浏览器安全策略，不同的连接之间复用会受到一些限制。</p><p data-lake-id=\"776bd91c2054a7ca7cf91ddcbfd600d6\"><br /></p><p data-lake-id=\"26a63609679fc28034647fcd6ee470aa\">在 <a href=\"https://fetch.spec.whatwg.org/#cors-protocol-and-credentials\" target=\"_blank\">https://fetch.spec.whatwg.org/#cors-protocol-and-credentials</a> 我们可以看到</p><p data-lake-id=\"c49ba6356e1fe8e92318d172d6832c64\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"c9e20f7d007a80c9c582a97445231917\">A user agent has an associated connection pool. A connection pool consists of zero or more connections. Each connection is identified by an origin (an origin) and credentials (a boolean).</p></blockquote><p data-lake-id=\"120ee7167ba71fc7dd6f2f283d9e1102\"><br /></p><p data-lake-id=\"34c0f9d96c0bda363c43671201d68747\">即一个连接是由 <code>origin</code> 和 <code>credentials</code> 确定的，这里的 <code>origin</code> 并非单纯是指我们加载的连接的 <code>origin</code> ，而是对于页面上不同的资源来说，会遵循不同的策略（详细的策略见 <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin\" target=\"_blank\">https://html.spec.whatwg.org/multipage/origin.html#concept-origin</a>）。</p><p data-lake-id=\"773a24606f8283d083f79baae5b63709\"><br /></p><p data-lake-id=\"6477e19caa9d2af0d79ab4ed3f510216\">例如对于图像而言（其实对于 <code>script/css</code> 等来说也是一样的）</p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"44cf5ac260de4660c97ed053d5a201eb\">For images of <code><a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element\" target=\"_blank\">img</a></code> elements</p><p data-lake-id=\"3743496dad55c944f878841d4fb6c9c9\">If the <a href=\"https://html.spec.whatwg.org/multipage/images.html#img-req-data\" target=\"_blank\">image data</a> is <a href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-cross-origin\" target=\"_blank\">CORS-cross-origin</a></p><p data-lake-id=\"8559060a85109b496d1cf7cd0fe5fdce\" style=\"text-indent: 2em;\">A unique <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin-opaque\" target=\"_blank\">opaque origin</a> assigned when the image is created.</p><p data-lake-id=\"8db595db0ead478d1926ced1d12d5bb0\">If the <a href=\"https://html.spec.whatwg.org/multipage/images.html#img-req-data\" target=\"_blank\">image data</a> is <a href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-same-origin\" target=\"_blank\">CORS-same-origin</a></p><p data-lake-id=\"252c8fa7340ed1e946c894dd1704577e\" style=\"text-indent: 2em;\">The <code><a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element\" target=\"_blank\">img</a></code> element's <a href=\"https://dom.spec.whatwg.org/#concept-node-document\" target=\"_blank\">node document</a>'s <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin\" target=\"_blank\">origin</a>.</p></blockquote><p data-lake-id=\"38738fd5a20e55a0d99e57adc35a1d0d\"><br /></p><p data-lake-id=\"b3e1190c1e148dfbdb6f28134b8e9afa\">即在有 <code>crossorigin</code> 时（不是单纯的是另外一个域名时），则其 <code>origin</code> 是图片的 <code>origin</code> 。</p><p data-lake-id=\"2100e098b9b1fcb5ab9471fabcfcba5d\">如果没有（一般来说是没有的），则 <code>origin</code> 是页面相同的 <code>origin</code> 。</p><p data-lake-id=\"b12094b5d23261d28ea6a8c7598686c9\"><br /></p><p data-lake-id=\"4a5c9cf7adab611267b47aa24c8b93a6\">这意味着对于 <code>cors</code> 和 <code>non-cors</code> 的请求、<code><span>credentials=true</span></code> 和 <code><span>credentials=false</span></code> 的请求来说，他们的连接是不能复用的。</p><p data-lake-id=\"f4bc2d339c084a9ab5afa63396b6314d\"><br /></p><p data-lake-id=\"2c5a0136e3c65c9f0c98e8727e65e6bf\">例如 <a href=\"https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html\" target=\"_blank\">https://xcodebuild.github.io/why-so-slow/connect/cors-non-cors.html</a> 这个页面中，有四个来自同一个域名的 <code>img</code> ，但是后面两个是 <code>crossorigin</code> 的</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cimg%20src%3D%5C%22https%3A%2F%2Fi.picsum.photos%2Fid%2F1061%2F200%2F200.jpg%5C%22%2F%3E%5Cn%3Cimg%20src%3D%5C%22https%3A%2F%2Fi.picsum.photos%2Fid%2F1061%2F200%2F300.jpg%5C%22%2F%3E%5Cn%3Cimg%20src%3D%5C%22https%3A%2F%2Fi.picsum.photos%2Fid%2F1061%2F100%2F300.jpg%5C%22%20crossorigin%2F%3E%5Cn%3Cimg%20src%3D%5C%22https%3A%2F%2Fi.picsum.photos%2Fid%2F1061%2F300%2F300.jpg%5C%22%20crossorigin%2F%3E%22%2C%22id%22%3A%22qjOm4%22%7D\"></card><p data-lake-id=\"5868cac9301043b06379a47479551182\"><br /></p><p data-lake-id=\"9f8410e4d4ede8eb343bb39a9337f754\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585190581512-5105a07b-5871-4d57-ac19-829f926b978c.png%22%2C%22originWidth%22%3A1924%2C%22originHeight%22%3A916%2C%22name%22%3A%22image.png%22%2C%22size%22%3A538733%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A791.6458%2C%22y%22%3A36.075%2C%22width%22%3A322.6709000000001%2C%22height%22%3A42.08749999999999%2C%22text%22%3A%22WaterfallView%22%7D%2C%7B%22x%22%3A322.67084%2C%22y%22%3A144.3%2C%22width%22%3A144.29998999999998%2C%22height%22%3A26.05417%2C%22text%22%3A%22IStartRender%22%7D%2C%7B%22x%22%3A495.02917%2C%22y%22%3A144.3%2C%22width%22%3A180.37502999999992%2C%22height%22%3A26.05417%2C%22text%22%3A%22IRUMFirstPaint%22%7D%2C%7B%22x%22%3A939.95416%2C%22y%22%3A144.3%2C%22width%22%3A240.5000399999999%2C%22height%22%3A24.049999999999983%2C%22text%22%3A%22DOMContentLoaded%22%7D%2C%7B%22x%22%3A1352.8125%2C%22y%22%3A144.3%2C%22width%22%3A240.5%2C%22height%22%3A30.0625%2C%22text%22%3A%22dIDocumentComplete%22%7D%2C%7B%22x%22%3A697.45%2C%22y%22%3A146.30417%2C%22width%22%3A186.38749999999993%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%22IDOMInteracitive%22%7D%2C%7B%22x%22%3A1238.575%2C%22y%22%3A146.30417%2C%22width%22%3A96.20000000000005%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%22OnLoad%22%7D%2C%7B%22x%22%3A1745.6292%2C%22y%22%3A222.46251%2C%22width%22%3A142.29579999999987%2C%22height%22%3A26.054149999999993%2C%22text%22%3A%22JSExecution%22%7D%2C%7B%22x%22%3A1210.5167%2C%22y%22%3A224.46667%2C%22width%22%3A62.12920000000008%2C%22height%22%3A24.049990000000008%2C%22text%22%3A%22Flash%22%7D%2C%7B%22x%22%3A1356.8208%2C%22y%22%3A224.46667%2C%22width%22%3A50.10419999999999%2C%22height%22%3A22.045829999999995%2C%22text%22%3A%22font%22%7D%2C%7B%22x%22%3A66.1375%2C%22y%22%3A226.47084%2C%22width%22%3A52.108334%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22wait%22%7D%2C%7B%22x%22%3A218.45416%2C%22y%22%3A226.47084%2C%22width%22%3A40.08334000000002%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22dns%22%7D%2C%7B%22x%22%3A501.04166%2C%22y%22%3A226.47084%2C%22width%22%3A38.07919000000004%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22ssI%22%7D%2C%7B%22x%22%3A639.32916%2C%22y%22%3A226.47084%2C%22width%22%3A50.10419000000002%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22html%22%7D%2C%7B%22x%22%3A795.6542%2C%22y%22%3A226.47084%2C%22width%22%3A30.0625%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22js%22%7D%2C%7B%22x%22%3A1062.2084%2C%22y%22%3A226.47084%2C%22width%22%3A58.12079999999992%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22IMage%22%7D%2C%7B%22x%22%3A1495.1084%2C%22y%22%3A226.47084%2C%22width%22%3A64.13329999999996%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22video%22%7D%2C%7B%22x%22%3A1633.3959%2C%22y%22%3A226.47084%2C%22width%22%3A60.125%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%22other%22%7D%2C%7B%22x%22%3A336.7%2C%22y%22%3A228.475%2C%22width%22%3A84.17500000000001%2C%22height%22%3A20.041660000000007%2C%22text%22%3A%22connect%22%7D%2C%7B%22x%22%3A931.9375%2C%22y%22%3A228.475%2C%22width%22%3A44.091699999999946%2C%22height%22%3A20.041660000000007%2C%22text%22%3A%22CSS%22%7D%2C%7B%22x%22%3A1639.4083%2C%22y%22%3A298.62085%2C%22width%22%3A46.09590000000003%2C%22height%22%3A26.054149999999993%2C%22text%22%3A%221.5%22%7D%2C%7B%22x%22%3A575.19586%2C%22y%22%3A300.625%2C%22width%22%3A44.091639999999984%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%220.1%22%7D%2C%7B%22x%22%3A657.3667%2C%22y%22%3A300.625%2C%22width%22%3A40.08330000000001%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%220.2%22%7D%2C%7B%22x%22%3A725.50836%2C%22y%22%3A300.625%2C%22width%22%3A44.09168%2C%22height%22%3A22.04584%2C%22text%22%3A%220.3%22%7D%2C%7B%22x%22%3A887.8458%2C%22y%22%3A300.625%2C%22width%22%3A30.0625%2C%22height%22%3A26.05417%2C%22text%22%3A%220.5%22%7D%2C%7B%22x%22%3A959.99585%2C%22y%22%3A300.625%2C%22width%22%3A44.09164999999996%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%220.6%22%7D%2C%7B%22x%22%3A1032.1459%2C%22y%22%3A300.625%2C%22width%22%3A44.09159999999997%2C%22height%22%3A22.04584%2C%22text%22%3A%220.7%22%7D%2C%7B%22x%22%3A1186.4667%2C%22y%22%3A300.625%2C%22width%22%3A42.08750000000009%2C%22height%22%3A22.04584%2C%22text%22%3A%220.9%22%7D%2C%7B%22x%22%3A1491.1%2C%22y%22%3A300.625%2C%22width%22%3A44.09170000000017%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%221.3%22%7D%2C%7B%22x%22%3A1565.2542%2C%22y%22%3A300.625%2C%22width%22%3A44.09159999999997%2C%22height%22%3A22.04584%2C%22text%22%3A%221.4%22%7D%2C%7B%22x%22%3A1719.5751%2C%22y%22%3A300.625%2C%22width%22%3A38.079099999999926%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%221.6%22%7D%2C%7B%22x%22%3A1793.7291%2C%22y%22%3A300.625%2C%22width%22%3A40.08339999999998%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%221.7%22%7D%2C%7B%22x%22%3A805.675%2C%22y%22%3A302.62918%2C%22width%22%3A44.09166000000005%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%220.4%22%7D%2C%7B%22x%22%3A1264.6292%2C%22y%22%3A302.62918%2C%22width%22%3A44.09159999999997%2C%22height%22%3A20.04165999999998%2C%22text%22%3A%221.0%22%7D%2C%7B%22x%22%3A1418.95%2C%22y%22%3A302.62918%2C%22width%22%3A36.075000000000045%2C%22height%22%3A22.045819999999992%2C%22text%22%3A%221.2%22%7D%2C%7B%22x%22%3A32.066666%2C%22y%22%3A306.6375%2C%22width%22%3A76.158334%2C%22height%22%3A24.05000000000001%2C%22text%22%3A%22step-1%22%7D%2C%7B%22x%22%3A72.15%2C%22y%22%3A346.72083%2C%22width%22%3A456.95000000000005%2C%22height%22%3A26.05417%2C%22text%22%3A%221.xcodebuild.git...ors-non-cors.html%22%7D%2C%7B%22x%22%3A68.14167%2C%22y%22%3A382.79584%2C%22width%22%3A376.78335000000004%2C%22height%22%3A24.04998999999998%2C%22text%22%3A%222.i.picsum.photos-200.jpg%22%7D%2C%7B%22x%22%3A1012.1042%2C%22y%22%3A382.79584%2C%22width%22%3A68.14159999999993%2C%22height%22%3A20.04165999999998%2C%22text%22%3A%22178m%22%7D%2C%7B%22x%22%3A60.125%2C%22y%22%3A416.86667%2C%22width%22%3A344.71667%2C%22height%22%3A26.05417%2C%22text%22%3A%223.i.picsum.photos-300.jpg%22%7D%2C%7B%22x%22%3A58.120834%2C%22y%22%3A450.9375%2C%22width%22%3A352.733326%2C%22height%22%3A24.050020000000018%2C%22text%22%3A%224.i.picsum.photos-300.jpg%22%7D%2C%7B%22x%22%3A1016.1125%2C%22y%22%3A452.94168%2C%22width%22%3A70.14580000000001%2C%22height%22%3A22.04584%2C%22text%22%3A%22149m%22%7D%2C%7B%22x%22%3A62.129166%2C%22y%22%3A483.00418%2C%22width%22%3A354.737504%2C%22height%22%3A26.05417%2C%22text%22%3A%225.i.picsun.photos-300.jpg%22%7D%2C%7B%22x%22%3A1198.4917%2C%22y%22%3A515.07086%2C%22width%22%3A627.3042%2C%22height%22%3A30.0625%2C%22text%22%3A%220.91.01.11.21.3141.51.61.7%22%7D%2C%7B%22x%22%3A118.245834%2C%22y%22%3A585.2167%2C%22width%22%3A186.387496%2C%22height%22%3A26.054100000000062%2C%22text%22%3A%22-cpuUtilization%22%7D%2C%7B%22x%22%3A120.25%2C%22y%22%3A679.4125%2C%22width%22%3A352.73334%2C%22height%22%3A30.0625%2C%22text%22%3A%22BandhuidthIn(o-5.000kops)%22%7D%2C%7B%22x%22%3A116.24167%2C%22y%22%3A777.6167%2C%22width%22%3A244.50833%2C%22height%22%3A30.0625%2C%22text%22%3A%22BraowserMainThread%22%7D%2C%7B%22x%22%3A118.245834%2C%22y%22%3A847.7625%2C%22width%22%3A240.50001600000002%2C%22height%22%3A24.049999999999955%2C%22text%22%3A%22PageisInteractive%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22WaterfallView%20IStartRender%20IRUMFirstPaint%20DOMContentLoaded%20dIDocumentComplete%20IDOMInteracitive%20OnLoad%20JSExecution%20Flash%20font%20wait%20dns%20ssI%20html%20js%20IMage%20video%20other%20connect%20CSS%201.5%200.1%200.2%200.3%200.5%200.6%200.7%200.9%201.3%201.4%201.6%201.7%200.4%201.0%201.2%20step-1%201.xcodebuild.git...ors-non-cors.html%202.i.picsum.photos-200.jpg%20178m%203.i.picsum.photos-300.jpg%204.i.picsum.photos-300.jpg%20149m%205.i.picsun.photos-300.jpg%200.91.01.11.21.3141.51.61.7%20-cpuUtilization%20BandhuidthIn(o-5.000kops)%20BraowserMainThread%20PageisInteractive%22%2C%22width%22%3A962%2C%22height%22%3A458%7D\"></card></p><p data-lake-id=\"4da7628a3b87eee54f02504b0d61adf2\">这样就会发现前面两个和后面两个分别能够复用连接，但是 <code>cors</code> 的和 <code>non-cors</code> 的不能复用连接。</p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"12aa126383eb69dbc7340c9f2205f3da\">其实这里如果有 crossorigin=&quot;use-credentials&quot;，其和 cors 也不能复用连接</p></blockquote><p data-lake-id=\"5600f710637ff3bdcf5cbe66c699316e\">具体这么做的原因主要是为了安全考虑，在 <a href=\"https://github.com/whatwg/fetch/issues/341\" target=\"_blank\">https://github.com/whatwg/fetch/issues/341</a> 中有提到，在这里不展开。</p><h4 data-lake-id=\"e872d748ee4bf8a610db0c1f81880c37\" id=\"0RLnO\">怎么避免不复用</h4><p data-lake-id=\"a5b74125bb3297ce3f0faff01fdf7578\">知道了怎么确定一个连接后，我们就知道怎么避免连接没有复用的问题。无论是我们尝试让两个请求复用一个连接还是通过 <code>preconnect</code> 去提前建连，都应该保持其 <code>cors</code> 和 <code>credentials</code> 的一致性。</p><p data-lake-id=\"80cb4a22b79d8b28edd5791528c8b817\"><br /></p><p data-lake-id=\"236c7fa1f7757395e21decdfb3ba3263\">由于实际规则其实蛮复杂的，并不能保证我们总是能判断策略是否符合预期，<strong>还是建议通过 </strong><strong><code>WebPageTest</code></strong><strong> 等工具验证是否有多余的建连。</strong></p><p data-lake-id=\"976905f2b2af29d300081e9a3216a9f4\"><br /></p><p data-lake-id=\"d45f6a86700f21654ffe21f1bce28cb7\">当然通过 Chrome Devtools 也能够验证这一点，我们可以在 Network 面板打开 <code>Connection ID</code> ，可以看到不同的连接使用的 <code>Connection ID</code> 是不同的。</p><p data-lake-id=\"0a3115b0b66ec5975000fb9396f6a6c3\"><br /></p><p data-lake-id=\"a2d4f632c2fa703c2abd8e56fa8c0440\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1585191129731-7ff634e7-4184-4de0-98a0-d3339c388644.png%22%2C%22originWidth%22%3A2012%2C%22originHeight%22%3A202%2C%22name%22%3A%22image.png%22%2C%22size%22%3A181126%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A578.45%2C%22y%22%3A12.575%2C%22width%22%3A44.01249999999993%2C%22height%22%3A25.150000000000002%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A1288.9375%2C%22y%22%3A12.575%2C%22width%22%3A77.5458000000001%2C%22height%22%3A23.054166%2C%22text%22%3A%227.3KB%22%7D%2C%7B%22x%22%3A46.108334%2C%22y%22%3A14.670834%2C%22width%22%3A81.73749600000001%2C%22height%22%3A25.150001000000003%2C%22text%22%3A%22200.jpg%22%7D%2C%7B%22x%22%3A917.975%2C%22y%22%3A14.670834%2C%22width%22%3A217.96670000000006%2C%22height%22%3A25.150001000000003%2C%22text%22%3A%22cors-non-cors.html%22%7D%2C%7B%22x%22%3A1454.5083%2C%22y%22%3A14.670834%2C%22width%22%3A81.73749999999995%2C%22height%22%3A23.054166000000002%2C%22text%22%3A%22754Ms%22%7D%2C%7B%22x%22%3A1542.5333%2C%22y%22%3A14.670834%2C%22width%22%3A46.10829999999987%2C%22height%22%3A20.958332%2C%22text%22%3A%22229%22%7D%2C%7B%22x%22%3A750.30835%2C%22y%22%3A16.766666%2C%22width%22%3A50.29998999999998%2C%22height%22%3A23.054169%2C%22text%22%3A%22ipeg%22%7D%2C%7B%22x%22%3A46.108334%2C%22y%22%3A56.5875%2C%22width%22%3A79.641666%2C%22height%22%3A25.15%2C%22text%22%3A%22300.jpg%22%7D%2C%7B%22x%22%3A582.64166%2C%22y%22%3A56.5875%2C%22width%22%3A39.820839999999976%2C%22height%22%3A23.054170000000006%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A1282.65%2C%22y%22%3A56.5875%2C%22width%22%3A83.83330000000001%2C%22height%22%3A23.054170000000006%2C%22text%22%3A%2210.2kB%22%7D%2C%7B%22x%22%3A1450.3167%2C%22y%22%3A56.5875%2C%22width%22%3A83.83330000000001%2C%22height%22%3A25.15%2C%22text%22%3A%22755ms%22%7D%2C%7B%22x%22%3A1546.725%2C%22y%22%3A56.5875%2C%22width%22%3A39.82080000000019%2C%22height%22%3A23.054170000000006%2C%22text%22%3A%22229%22%7D%2C%7B%22x%22%3A750.30835%2C%22y%22%3A58.683334%2C%22width%22%3A52.39580999999998%2C%22height%22%3A20.958336000000003%2C%22text%22%3A%22jipeg%22%7D%2C%7B%22x%22%3A917.975%2C%22y%22%3A56.5875%2C%22width%22%3A224.2541%2C%22height%22%3A25.15%2C%22text%22%3A%22corS-non-cors.html%22%7D%2C%7B%22x%22%3A580.54584%2C%22y%22%3A96.40833%2C%22width%22%3A48.20416%2C%22height%22%3A25.150003999999996%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A1544.6292%2C%22y%22%3A96.40833%2C%22width%22%3A46.10829999999987%2C%22height%22%3A25.150003999999996%2C%22text%22%3A%22s243%22%7D%2C%7B%22x%22%3A44.0125%2C%22y%22%3A98.504166%2C%22width%22%3A83.83333%2C%22height%22%3A25.150003999999996%2C%22text%22%3A%22300.jpg%22%7D%2C%7B%22x%22%3A924.2625%2C%22y%22%3A98.504166%2C%22width%22%3A213.77499999999986%2C%22height%22%3A23.054168000000004%2C%22text%22%3A%22cors-non-cors.html%22%7D%2C%7B%22x%22%3A1291.0333%2C%22y%22%3A98.504166%2C%22width%22%3A73.35419999999999%2C%22height%22%3A20.958334000000008%2C%22text%22%3A%225.8kB%22%7D%2C%7B%22x%22%3A1450.3167%2C%22y%22%3A98.504166%2C%22width%22%3A81.73749999999995%2C%22height%22%3A23.054168000000004%2C%22text%22%3A%22753ms%22%7D%2C%7B%22x%22%3A748.2125%2C%22y%22%3A100.6%2C%22width%22%3A52.39584000000002%2C%22height%22%3A23.05417%2C%22text%22%3A%22ipog%22%7D%2C%7B%22x%22%3A580.54584%2C%22y%22%3A138.325%2C%22width%22%3A48.20416%2C%22height%22%3A25.150000000000006%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A44.0125%2C%22y%22%3A140.42084%2C%22width%22%3A83.83333%2C%22height%22%3A27.245830000000012%2C%22text%22%3A%22300.jpg%22%7D%2C%7B%22x%22%3A1278.4584%2C%22y%22%3A140.42084%2C%22width%22%3A85.92910000000006%2C%22height%22%3A25.149990000000003%2C%22text%22%3A%2214.6kB%22%7D%2C%7B%22x%22%3A1462.8917%2C%22y%22%3A138.325%2C%22width%22%3A62.875%2C%22height%22%3A27.245830000000012%2C%22text%22%3A%222.58s%22%7D%2C%7B%22x%22%3A1546.725%2C%22y%22%3A140.42084%2C%22width%22%3A44.012500000000045%2C%22height%22%3A25.149990000000003%2C%22text%22%3A%22243%22%7D%2C%7B%22x%22%3A752.4042%2C%22y%22%3A142.51666%2C%22width%22%3A50.299960000000056%2C%22height%22%3A23.05417%2C%22text%22%3A%22ipeg%22%7D%2C%7B%22x%22%3A924.2625%2C%22y%22%3A142.51666%2C%22width%22%3A209.5833%2C%22height%22%3A23.05417%2C%22text%22%3A%22corS-non-cors.html%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22200%207.3KB%20200.jpg%20cors-non-cors.html%20754Ms%20229%20ipeg%20300.jpg%20200%2010.2kB%20755ms%20229%20jipeg%20corS-non-cors.html%20200%20s243%20300.jpg%20cors-non-cors.html%205.8kB%20753ms%20ipog%20200%20300.jpg%2014.6kB%202.58s%20243%20ipeg%20corS-non-cors.html%22%2C%22width%22%3A1006%2C%22height%22%3A101%7D\"></card></p><h2 id=\"EyboO\" data-lake-id=\"81e2aaea9defd8d7f05478e785575ef3\">为什么要握手</h2><p data-lake-id=\"cde95d2636384e8380030a65f73e99ec\">为什么一定要先握手才能发送 HTTP 报文呢？这是由 TCP 本身的设计决定的，TCP 是一种可靠的传输层通信协议。所谓可靠，就是能保证数据流的顺序和完整性。</p><h3 id=\"qVj1E\" data-lake-id=\"ea5974f97f7c04f3e6b00ed283cd96d1\">ISN</h3><p data-lake-id=\"f80fa130199732a4efe2053f764896ca\">TCP 本身在网络层（IP 协议）的上层，应用层的下层（HTTP 协议）。当应用层发起请求时，把包传给 TCP，TCP 将其分割成合适的大小，将其传递给网络层。</p><p data-lake-id=\"e01f3acdba3193c10d03421381e3bdeb\"><br /></p><p data-lake-id=\"f5f90712762731f0e0e43a9f5bb49b6a\">为了保证不丢包，TCP 会给每一个包一个序号，接收端接受到后返回响应的确认消息。如果在合理的时间内没有收到确认，发送端则会认为发生了丢包，会尝试重新发送。</p><p data-lake-id=\"734d2352f27650d5e07762ad813c6e79\"><br /></p><p data-lake-id=\"264a4c99abf8ddb64c01bd36ce3e1df7\">而作为接收端，收到的包可能是乱序的（网络层不保证传输顺序）或者重复的（例如上面重新发送的时候就会重复），就会按照接收方的序号重新组建传输包的内容，然后将其交付给应用层。</p><p data-lake-id=\"9e0759b2beeb3429812ef38586a60bdd\"><br /></p><p data-lake-id=\"059e672ae7b629ceeb0d2bdc6a290df9\">理解了 TCP 保证顺序和完整性的原理，就理解了 TCP 包的序号（Sequence Number<strong>）</strong>的重要性，而 TCP 握手时就是为了相互交换初始序列号（ISN，Inital Sequence Number<strong>），</strong>从而保证互相收到的包都能够保持正确的顺序。</p><h4 id=\"MZ1LO\" data-lake-id=\"5cce42754381d63a51a1dc3e7956a09d\">为什么不能用固定值</h4><p data-lake-id=\"18011ddb451b01aa6ba276337fff3b8e\">从 ISN 的使用场景很自然可以想到，只要我们统一用一个固定值（例如0）作为 ISN，不就可以直接避免握手的性能损耗了么？</p><p data-lake-id=\"a2586b51e95547afd1edb1ed910b7fc9\"><br /></p><h5 id=\"Uj6iu\" data-lake-id=\"9d4f80a69f9a2664d2d6f0159be0e6b2\">避免相邻的 TCP 连接互相干扰</h5><p data-lake-id=\"8bf52e2b1a4316490f35ca9d6b04db7f\">假设我们把 ISN 统一设置为 0，当我们的客户端和一个服务器建立起连接后传输了一部分数据包后，突然网络中断了，这个时候他们之间重新建立起连接，ISN 仍然为 0。</p><p data-lake-id=\"d29f47fe1cae82b12397edfea2e924d0\"><br /></p><p data-lake-id=\"15d28bdcec02026342161eb18b1cbf03\">这个时候服务器端可能同时收到序号为 N 的包，但却无从判断这个包属于哪一个 TCP 连接。</p><h3 id=\"RPdQe\" data-lake-id=\"7c95bc17c4e4f24397713d76f9f74d3f\">结论</h3><p data-lake-id=\"63d7a2e8999188e7ba6aa1b2379b27c2\">TCP 为了确保能够把数据按照正确顺序、完整的发送给目标，必须通过握手同步 ISN。而由于 TCP 是全双工的（即双向通信），握手至少需要三次才能完成。</p><p data-lake-id=\"a2eeb26c9d779f5c0c3e49318325be5e\"><br /></p><p data-lake-id=\"a49c46cc5dca4d8d5a0845bb2cec370f\">其实对于客户端（浏览器）来说，从发送 ACK 到接受到 SYN-ACK 的过程就已经完成了 TCP 的建连，此时就可以开始给服务器端传输数据了。</p><h2 data-lake-id=\"33517611d33f530fc641ce7720d99b7c\" id=\"CeCLZ\">能不能更快一点</h2><h3 data-lake-id=\"1efdc8ddd8a0577afe77d27d70682d30\" id=\"IPdfI\">TCP Fast Open</h3><p data-lake-id=\"d0eb46a0c03ff2ebf3ebeabf0b1956a2\">TCP 协议每次都要等待 SYN-ACK+SYN-ACK 后，服务端的 TCP 才会把接收到的数据包传输给应用层，这样当连接不稳定时总是需要重新建立连接。那么，为什么不直接在第一次传输 SYN 时直接发送数据呢？</p><p data-lake-id=\"6fe199de0acf7f46d8652bc017a7e331\"><br /></p><p data-lake-id=\"2ac239e483c6bd375d42c59ff1c429e0\">事实上在 TCP 上有一个拓展标准是支持这么做的，称之为 TCP Fast Open，在 TFO 第一次建立连接时和正常的三次握手是相同的，但客户端会额外拿到一个 TFO Cookie。而当之后再重新建立连接（例如说断网后重连，或者移动设备切换网络登）时，则直接由 SYN 携带 TFO Cookie 和数据发送。服务端收到校验 Cookie 有效直接把数据交付给应用层。</p><p data-lake-id=\"a736d223f5c5752a64eaf631f7d69717\"><br /></p><p data-lake-id=\"9c165643bdb5ed9dfa455d1176bdb58e\">然而 TFO 并没有在所有的客户端和服务端默认打开，目前绝大多数浏览器都是不支持的，而且由于 TCP 作为协议层由操作系统实现，无法由应用层的浏览器、客户端等自由控制。</p><h3 data-lake-id=\"513c89fb34f3685e7a5d4da8f26831d5\" id=\"Yk40Q\">QUIC/HTTP3</h3><p data-lake-id=\"3d4080ad9779ba79973b59c1547da18c\">QUIC 和 HTTP3 也解决了建连耗时的问题，不在本文展开，后续会在其他文章介绍。</p><h2 data-lake-id=\"9338d05edc1197048619caa01d340429\" id=\"M0DPI\">总结</h2><p data-lake-id=\"b5dfaef9a22789393626a871f788c0b4\">由于 HTTP 是基于 TCP 的，而 TCP 为了可靠性是面向连接的，需要通过三次握手建立连接。</p><p data-lake-id=\"2bb56bc5bcd4debb387b8c681334888e\"><br /></p><p data-lake-id=\"2e3efb623bbc2f4c42176684612714d3\">在 HTTP2 后我们有了多路复用可以让多个请求在一个连接中进行，但是连接的复用并不是单纯由域名决定的，同一个域名的连接可能不能复用一个连接，而不同的域名其实也可能复用一个连接。我们需要尽可能确定连接被正确的复用了。如果使用了 CDN 技术，我们可以尝试让页面和资源使用相同的 IP 从而复用链接。</p><p data-lake-id=\"7c8f71d4911813d5114e8807269f0c17\"><br /></p><p data-lake-id=\"d106bc70ca5c39b06d8855b1bac12469\">除此之外，我们可以使用 <code>preconnect</code> 来提前建连，同样的，也需要确定这个提前建立的连接被正确复用了。这对于即将发起的请求、即将到来的 <code>redirect</code> 等非常有效。<span style=\"background-color: transparent;\"><br /></span></p><h2 data-lake-id=\"4ce15ad4ba6bcd2a8e4b85ad54ecf2cd\" id=\"MzPEp\">拓展阅读</h2><ul data-lake-id=\"90b7a58b04b97e8452e8bbd6083abeb6\"><li data-lake-id=\"753323fd1967269bdc238849416b4f77\"><a href=\"https://crenshaw.dev/preconnect-resource-hint-crossorigin-attribute/\" target=\"_blank\">preconnect resource hint and the crossorigin attribute</a></li><li data-lake-id=\"f1e180aa7f197bed5e2efa18a0c1b283\"><a href=\"https://github.com/whatwg/fetch/issues/341\" target=\"_blank\">https://github.com/whatwg/fetch/issues/341</a></li></ul>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-03-26T16:56:17.000Z",
    "deleted_at": null,
    "created_at": "2020-03-26T03:09:32.000Z",
    "updated_at": "2020-03-26T16:56:17.000Z",
    "published_at": "2020-03-26T16:56:17.000Z",
    "first_published_at": "2020-03-26T03:09:57.000Z",
    "word_count": 3598,
    "cover": "https://cdn.nlark.com/yuque/0/2020/png/236311/1584964408688-4c021c34-501c-408c-a704-1f30656ccbb1.png",
    "description": "我们都知道 HTTP 是基于 TCP 的，而 TCP 是面向连接的。当我们向服务器请求一个页面时，首先需要建立 TCP 连接，才能开始真正开始传输内容。这个时间平时不容易被人察觉，因为开发场景下我们往往不需要重新建立连接。但是在有些场景（尤其是新用户场景、landing page 等）却会对页...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 3982499,
    "slug": "lightproxy",
    "title": "LightProxy 全能代理抓包工具",
    "book_id": 653495,
    "book": {
      "id": 653495,
      "type": "Column",
      "slug": "blog",
      "name": "blog",
      "user_id": 236311,
      "description": "",
      "creator_id": 236311,
      "public": 0,
      "items_count": 3,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2020-03-26T03:16:58.967Z",
      "updated_at": "2020-03-26T03:16:58.000Z",
      "created_at": "2019-12-24T14:26:42.000Z",
      "namespace": "xcodebuild/blog",
      "user": {
        "id": 236311,
        "type": "User",
        "login": "xcodebuild",
        "name": "xcodebuIld",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
        "books_count": 6,
        "public_books_count": 1,
        "followers_count": 2,
        "following_count": 0,
        "created_at": "2019-01-03T03:16:21.000Z",
        "updated_at": "2020-03-23T08:18:51.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 236311,
    "creator": {
      "id": 236311,
      "type": "User",
      "login": "xcodebuild",
      "name": "xcodebuIld",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
      "books_count": 6,
      "public_books_count": 1,
      "followers_count": 2,
      "following_count": 0,
      "created_at": "2019-01-03T03:16:21.000Z",
      "updated_at": "2020-03-23T08:18:51.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "> 原文地址：[https://github.com/alibaba/lightproxy/issues/19](https://github.com/alibaba/lightproxy/issues/19)\n\n<a name=\"u8H7E\"></a>\n## ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png#align=left&display=inline&height=75&name=image.png&originHeight=150&originWidth=400&size=12307&status=done&style=none&width=200)\n\n`LightProxy` 是 `IFE` 团队开发的一款基于 `Electron` 和 `whistle` 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 `HTTP` 代理使用规则转发、修改每一个请求和响应的内容。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png#align=left&display=inline&height=352&name=image.png&originHeight=1005&originWidth=1500&size=224010&status=done&style=none&width=525)\n<a name=\"vz7QC\"></a>\n## \n<a name=\"NJPM5\"></a>\n## 为什么需要一个代理工具\n**因为代理工具能够让你随心所欲的掌控自己当前的开发环境。**\n\n**开发环境**是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都**让一个非常简单的需求轻松消耗掉数天的时间**。\n\n当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 `build` 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。\n\n> ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png#align=left&display=inline&height=120&name=image.png&originHeight=239&originWidth=211&size=134204&status=done&style=none&width=105.5)\n> \n> 希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。\n\n\n当你的接口和页面突然不能工作时，代理工具可以快速 `mock` 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。\n\n<a name=\"CJSHA\"></a>\n## 什么是好的开发环境\n既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。\n\n<a name=\"UmNIw\"></a>\n### 稳定\n好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。<br />依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。\n\n<a name=\"JgdYr\"></a>\n### 快速验证\n修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 `Hot reload` 和更高级的 `HMR` 。\n\n有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。\n\n这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png#align=left&display=inline&height=112&name=image.png&originHeight=224&originWidth=225&size=100533&status=done&style=none&width=112.5)\n\n<a name=\"r9l9z\"></a>\n### 和线上的一致性\n很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 `DEMO` 页面，最后开发完再搬到线上。\n\n这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 `if-else` 的逻辑，例如最常见的：\n\n```javascript\nconst API_BASE = utils.isDaily ? 'http://localhost:7001:': 'https://xxxx/';\n```\n\n这种情况也往往导致 `Bug` 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。\n\n<a name=\"3MNL0\"></a>\n### 确定性\n开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。\n\n有些情况下我们利用 `hosts` 切换工具来进行联调，但在切完 `hosts` 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。\n\n这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。\n\n<a name=\"6aYPs\"></a>\n## LightProxy 如何解决这些问题\n那么 `LightProxy` 要如何解决上面的这些问题呢\n\n`LightProxy` 通过基于 `whistle` 的代理能力，能够任意修改开发环境中的 `request` 和 `response` 。\n\n<a name=\"WxTiC\"></a>\n### 举个例子\n例如当我们需要在线上页面中加入一个 `DIV` ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 `LightProxy` 我们只需要使用：\n\n```javascript\nhttps://www.alibaba.com/ htmlPrepend://(<div>test</div>)\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png#align=left&display=inline&height=139&name=image.png&originHeight=278&originWidth=1099&size=93886&status=done&style=none&width=549.5)\n\n就可以在一个线上的页面中插入一个 `div` 。\n\n同样的，我们可以直接把页面中的一个 `JS` 转发到本地一个开发中的文件\n\n```javascript\nhttps://www.google.com/xx.js file:///User/xxx/xxx.js\n```\n\n当后端缺少 `CORS` 头时，我们可以直接给它先加上 `CORS` 头\n\n```javascript\nhttps://xxx.com/xx.json resCors:// # 给响应的请求增加 CORS header\n```\n\n也可以直接把某个文件变成一个内联的文字，只要用类似 `ES6` 字符串框起来\n\n```javascript\nhttps://xxx.com/xx.json `test text`\n```\n\n总体来说，`LightProxy` 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。\n\n甚至于，你可以自己用 `NodeJS` 书写针对某个规则的响应：[使用 NodeJS 编写规则](https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8)\n\n<a name=\"DTTMJ\"></a>\n## 快速确认\n为了能够快速确认代理是否按预期工作，我们在经过 `LightProxy` 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png#align=left&display=inline&height=85&name=image.png&originHeight=170&originWidth=1022&size=29831&status=done&style=none&width=511)\n\n<a name=\"SASae\"></a>\n## 没有银弹\n虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。\n\n这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。\n\n<a name=\"19TAe\"></a>\n## 开始 & 下载\n说了这么多，开始使用 `LightProxy` 控制你的开发环境吧：[https://github.com/alibaba/lightproxy](https://github.com/alibaba/lightproxy)\n\n<a name=\"B9W04\"></a>\n### 下载\n[**macOS 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg)<br />[**Windows 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe)\n\n<a name=\"ddxHZ\"></a>\n## 问题反馈\n欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：[https://github.com/alibaba/lightproxy/issues](https://github.com/alibaba/lightproxy/issues)\n\n> ps: Whistle 的作者也在群里，欢迎来撩\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png#align=left&display=inline&height=248&name=image.png&originHeight=1280&originWidth=970&size=338210&status=done&style=none&width=188)\n",
    "body_draft": "> 原文地址：[https://github.com/alibaba/lightproxy/issues/19](https://github.com/alibaba/lightproxy/issues/19)\n\n<a name=\"u8H7E\"></a>\n## ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png#align=left&display=inline&height=75&name=image.png&originHeight=150&originWidth=400&size=12307&status=done&style=none&width=200)\n\n`LightProxy` 是 `IFE` 团队开发的一款基于 `Electron` 和 `whistle` 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 `HTTP` 代理使用规则转发、修改每一个请求和响应的内容。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png#align=left&display=inline&height=352&name=image.png&originHeight=1005&originWidth=1500&size=224010&status=done&style=none&width=525)\n<a name=\"vz7QC\"></a>\n## \n<a name=\"NJPM5\"></a>\n## 为什么需要一个代理工具\n**因为代理工具能够让你随心所欲的掌控自己当前的开发环境。**\n\n**开发环境**是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都**让一个非常简单的需求轻松消耗掉数天的时间**。\n\n当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 `build` 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。\n\n> ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png#align=left&display=inline&height=120&name=image.png&originHeight=239&originWidth=211&size=134204&status=done&style=none&width=105.5)\n> \n> 希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。\n\n\n当你的接口和页面突然不能工作时，代理工具可以快速 `mock` 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。\n\n<a name=\"CJSHA\"></a>\n## 什么是好的开发环境\n既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。\n\n<a name=\"UmNIw\"></a>\n### 稳定\n好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。<br />依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。\n\n<a name=\"JgdYr\"></a>\n### 快速验证\n修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 `Hot reload` 和更高级的 `HMR` 。\n\n有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。\n\n这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png#align=left&display=inline&height=112&name=image.png&originHeight=224&originWidth=225&size=100533&status=done&style=none&width=112.5)\n\n<a name=\"r9l9z\"></a>\n### 和线上的一致性\n很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 `DEMO` 页面，最后开发完再搬到线上。\n\n这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 `if-else` 的逻辑，例如最常见的：\n\n```javascript\nconst API_BASE = utils.isDaily ? 'http://localhost:7001:': 'https://xxxx/';\n```\n\n这种情况也往往导致 `Bug` 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。\n\n<a name=\"3MNL0\"></a>\n### 确定性\n开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。\n\n有些情况下我们利用 `hosts` 切换工具来进行联调，但在切完 `hosts` 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。\n\n这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。\n\n<a name=\"6aYPs\"></a>\n## LightProxy 如何解决这些问题\n那么 `LightProxy` 要如何解决上面的这些问题呢\n\n`LightProxy` 通过基于 `whistle` 的代理能力，能够任意修改开发环境中的 `request` 和 `response` 。\n\n<a name=\"WxTiC\"></a>\n### 举个例子\n例如当我们需要在线上页面中加入一个 `DIV` ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 `LightProxy` 我们只需要使用：\n\n```javascript\nhttps://www.alibaba.com/ htmlPrepend://(<div>test</div>)\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png#align=left&display=inline&height=139&name=image.png&originHeight=278&originWidth=1099&size=93886&status=done&style=none&width=549.5)\n\n就可以在一个线上的页面中插入一个 `div` 。\n\n同样的，我们可以直接把页面中的一个 `JS` 转发到本地一个开发中的文件\n\n```javascript\nhttps://www.google.com/xx.js file:///User/xxx/xxx.js\n```\n\n当后端缺少 `CORS` 头时，我们可以直接给它先加上 `CORS` 头\n\n```javascript\nhttps://xxx.com/xx.json resCors:// # 给响应的请求增加 CORS header\n```\n\n也可以直接把某个文件变成一个内联的文字，只要用类似 `ES6` 字符串框起来\n\n```javascript\nhttps://xxx.com/xx.json `test text`\n```\n\n总体来说，`LightProxy` 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。\n\n甚至于，你可以自己用 `NodeJS` 书写针对某个规则的响应：[使用 NodeJS 编写规则](https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8)\n\n<a name=\"DTTMJ\"></a>\n## 快速确认\n为了能够快速确认代理是否按预期工作，我们在经过 `LightProxy` 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png#align=left&display=inline&height=85&name=image.png&originHeight=170&originWidth=1022&size=29831&status=done&style=none&width=511)\n\n<a name=\"SASae\"></a>\n## 没有银弹\n虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。\n\n这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。\n\n<a name=\"19TAe\"></a>\n## 开始 & 下载\n说了这么多，开始使用 `LightProxy` 控制你的开发环境吧：[https://github.com/alibaba/lightproxy](https://github.com/alibaba/lightproxy)\n\n<a name=\"B9W04\"></a>\n### 下载\n[**macOS 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg)<br />[**Windows 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe)\n\n<a name=\"ddxHZ\"></a>\n## 问题反馈\n欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：[https://github.com/alibaba/lightproxy/issues](https://github.com/alibaba/lightproxy/issues)\n\n> ps: Whistle 的作者也在群里，欢迎来撩\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png#align=left&display=inline&height=248&name=image.png&originHeight=1280&originWidth=970&size=338210&status=done&style=none&width=188)\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine\" data-lake-element=\"root\" data-selection-236311=\"%7B%22path%22%3A%5B%5B0%2C0%2C1%2C0%2C47%5D%2C%5B0%2C0%2C1%2C0%2C47%5D%5D%2C%22uuid%22%3A%22236311%22%2C%22active%22%3Atrue%7D\"><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">原文地址：<a href=\"https://github.com/alibaba/lightproxy/issues/19\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues/19</a></p></blockquote><h2 id=\"u8H7E\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 200px; height: 75px;\"></span></h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;是 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">IFE</code>&nbsp;团队开发的一款基于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Electron</code>&nbsp;和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">whistle</code>&nbsp;的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">HTTP</code>&nbsp;代理使用规则转发、修改每一个请求和响应的内容。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 525px; height: 352px;\"></span></p><h2 id=\"vz7QC\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><br></h2><h2 id=\"NJPM5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">为什么需要一个代理工具</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>因为代理工具能够让你随心所欲的掌控自己当前的开发环境。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>开发环境</strong>是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都<strong>让一个非常简单的需求轻松消耗掉数天的时间</strong>。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">build</code> 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 105.5px; height: 120px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span style=\"color: #222222;\"><span>希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。</span></span></p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当你的接口和页面突然不能工作时，代理工具可以快速 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">mock</code>&nbsp;一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"CJSHA\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">什么是好的开发环境</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"UmNIw\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">稳定</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"JgdYr\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">快速验证</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Hot reload</code>&nbsp;和更高级的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">HMR</code>&nbsp;。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 112.5px; height: 112px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"r9l9z\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">和线上的一致性</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">DEMO</code>&nbsp;页面，最后开发完再搬到线上。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">if-else</code>&nbsp;的逻辑，例如最常见的：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"pYW11\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">API_BASE</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">utils</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">isDaily</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">?</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'http://localhost:7001:'</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'https://xxxx/'</span>;</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种情况也往往导致 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Bug</code>&nbsp;非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"3MNL0\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">确定性</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">有些情况下我们利用&nbsp;<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">hosts</code>&nbsp;切换工具来进行联调，但在切完 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">hosts</code>&nbsp;后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"6aYPs\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">LightProxy 如何解决这些问题</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">那么&nbsp;<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;要如何解决上面的这些问题呢</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;通过基于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">whistle</code>&nbsp;的代理能力，能够任意修改开发环境中的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">request</code>&nbsp;和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">response</code>&nbsp;。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"WxTiC\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">举个例子</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">例如当我们需要在线上页面中加入一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">DIV</code>&nbsp;，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;我们只需要使用：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"HkZn9\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//www.alibaba.com/ htmlPrepend://(&lt;div&gt;test&lt;/div&gt;)</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 549.5px; height: 139px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">就可以在一个线上的页面中插入一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">div</code>&nbsp;。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">同样的，我们可以直接把页面中的一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">JS</code>&nbsp;转发到本地一个开发中的文件</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"bDifr\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//www.google.com/xx.js file:///User/xxx/xxx.js</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当后端缺少 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">CORS</code>&nbsp;头时，我们可以直接给它先加上 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">CORS</code>&nbsp;头</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"Zw7hJ\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//xxx.com/xx.json resCors:// # 给响应的请求增加 CORS header</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">也可以直接把某个文件变成一个内联的文字，只要用类似 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">ES6</code>&nbsp;字符串框起来</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"3rzMc\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//xxx.com/xx.json `test text`</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">总体来说，<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>LightProxy</span></code> 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">甚至于，你可以自己用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">NodeJS</code>&nbsp;书写针对某个规则的响应：<a href=\"https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8\" target=\"_blank\">使用 NodeJS 编写规则</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"DTTMJ\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">快速确认</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">为了能够快速确认代理是否按预期工作，我们在经过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>LightProxy</span></code> 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 511px; height: 85px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"SASae\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">没有银弹</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"19TAe\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">开始 &amp; 下载</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">说了这么多，开始使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;控制你的开发环境吧：<a href=\"https://github.com/alibaba/lightproxy\" target=\"_blank\">https://github.com/alibaba/lightproxy</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"B9W04\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">下载</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg\" target=\"_blank\"><span class=\"lake-fontsize-12\" data-mce-style=\"font-size: 12px\" style=\"font-size: 16px; line-height: 24px;\"><strong><u>macOS 版</u></strong></span></a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe\" target=\"_blank\"><span class=\"lake-fontsize-12\" data-mce-style=\"font-size: 12px\" style=\"font-size: 16px; line-height: 24px;\"><strong><u>Windows 版</u></strong></span></a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"ddxHZ\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">问题反馈</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：<a href=\"https://github.com/alibaba/lightproxy/issues\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">ps: Whistle 的作者也在群里，欢迎来撩</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 188px; height: 248px;\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><blockquote><p>原文地址：<a href=\"https://github.com/alibaba/lightproxy/issues/19\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues/19</a></p></blockquote><h2 id=\"u8H7E\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png%22%2C%22originWidth%22%3A400%2C%22originHeight%22%3A150%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12307%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A151.33333%2C%22y%22%3A52%2C%22width%22%3A222.66667%2C%22height%22%3A66.666664%2C%22text%22%3A%22shtproxy%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22shtproxy%22%2C%22width%22%3A200%2C%22height%22%3A75%7D\"></card></h2><p><br /></p><p><code>LightProxy</code> 是 <code>IFE</code> 团队开发的一款基于 <code>Electron</code> 和 <code>whistle</code> 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 <code>HTTP</code> 代理使用规则转发、修改每一个请求和响应的内容。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png%22%2C%22originWidth%22%3A1500%2C%22originHeight%22%3A1005%2C%22name%22%3A%22image.png%22%2C%22size%22%3A224010%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A225%2C%22y%22%3A54.6875%2C%22width%22%3A32.8125%2C%22height%22%3A21.875%2C%22text%22%3A%22%E5%8C%95%22%7D%2C%7B%22x%22%3A1245.3125%2C%22y%22%3A56.25%2C%22width%22%3A93.75%2C%22height%22%3A17.1875%2C%22text%22%3A%22%E8%BE%93%E5%85%A5%2F%E7%BB%86%E5%85%A5%E8%A7%82%E5%88%99%22%7D%2C%7B%22x%22%3A304.6875%2C%22y%22%3A82.8125%2C%22width%22%3A384.375%2C%22height%22%3A21.875%2C%22text%22%3A%221%23LightProxyDetaultRules%2C%E5%85%A5%2F%E6%8F%92%E5%85%A5%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A84.375%2C%22y%22%3A98.4375%2C%22width%22%3A64.0625%2C%22height%22%3A17.1875%2C%22text%22%3A%22Default%22%7D%2C%7B%22x%22%3A306.25%2C%22y%22%3A104.6875%2C%22width%22%3A360.9375%2C%22height%22%3A21.875%2C%22text%22%3A%222%E5%88%9D%E5%A7%8B%E8%A7%84%E5%88%99%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%B8%80%E4%BA%9B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8B%E5%B7%A5%E4%BD%9C%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A129.6875%2C%22width%22%3A162.5%2C%22height%22%3A18.75%2C%22text%22%3A%223%23%E5%9C%A8%E6%AF%94%E8%BE%93%E5%85%A5%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A310.9375%2C%22y%22%3A151.5625%2C%22width%22%3A150%2C%22height%22%3A17.1875%2C%22text%22%3A%224%23command%2Bs%E4%BF%9D%E5%AD%98%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A173.4375%2C%22width%22%3A175%2C%22height%22%3A18.75%2C%22text%22%3A%225%23%E5%8F%8C%E5%87%BB%E5%90%AF%E7%94%A8%E6%88%96%E8%80%85%E7%A6%81%E7%94%A8%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A1354.6875%2C%22y%22%3A217.1875%2C%22width%22%3A54.6875%2C%22height%22%3A15.625%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%22%7D%2C%7B%22x%22%3A318.75%2C%22y%22%3A218.75%2C%22width%22%3A110.9375%2C%22height%22%3A18.75%2C%22text%22%3A%22%23hosts%E7%BB%91%E5%AE%9A%22%7D%2C%7B%22x%22%3A309.375%2C%22y%22%3A240.625%2C%22width%22%3A245.3125%2C%22height%22%3A18.75%2C%22text%22%3A%22810.101.73189g.al1cdn.co%22%7D%2C%7B%22x%22%3A307.8125%2C%22y%22%3A259.375%2C%22width%22%3A268.75%2C%22height%22%3A26.5625%2C%22text%22%3A%22148205.215168alicnc%22%7D%2C%7B%22x%22%3A601.5625%2C%22y%22%3A264.0625%2C%22width%22%3A243.75%2C%22height%22%3A20.3125%2C%22text%22%3A%22cmb.alicdn.comu.alicdn.com%22%7D%2C%7B%22x%22%3A1356.25%2C%22y%22%3A300%2C%22width%22%3A53.125%2C%22height%22%3A15.625%2C%22text%22%3A%22%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86%22%7D%2C%7B%22x%22%3A312.5%2C%22y%22%3A306.25%2C%22width%22%3A154.6875%2C%22height%22%3A18.75%2C%22text%22%3A%221%E6%9D%A5%E7%9B%B4%E6%8E%A5%E8%BD%AC%E5%8F%91%E7%BD%91%E9%A1%B5%22%7D%2C%7B%22x%22%3A339.0625%2C%22y%22%3A329.6875%2C%22width%22%3A409.375%2C%22height%22%3A20.3125%2C%22text%22%3A%222H%3A%2F%2FWMAOQGLECOTS%3A%22%7D%2C%7B%22x%22%3A307.8125%2C%22y%22%3A375%2C%22width%22%3A153.125%2C%22height%22%3A15.625%2C%22text%22%3A%2214%E8%BD%AC%E5%8F%91%E5%88%B0%E6%96%87%E4%BB%B6%22%7D%2C%7B%22x%22%3A1365.625%2C%22y%22%3A382.8125%2C%22width%22%3A32.8125%2C%22height%22%3A17.1875%2C%22text%22%3A%22%E8%AE%BE%E7%BD%AE%22%7D%2C%7B%22x%22%3A312.5%2C%22y%22%3A396.875%2C%22width%22%3A454.6875%2C%22height%22%3A18.75%2C%22text%22%3A%2215%23https%3A%2F%2FwwgooqlecofleeXxxxx.html%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A464.0625%2C%22width%22%3A401.5625%2C%22height%22%3A18.75%2C%22text%22%3A%2218https%3A%2F%2F*XXXcomAAeALER%2FXXXXXXhTMI%22%7D%2C%7B%22x%22%3A304.6875%2C%22y%22%3A506.25%2C%22width%22%3A200%2C%22height%22%3A20.3125%2C%22text%22%3A%2220%23%E6%9B%B4%E5%A4%9A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88%E5%8F%82%E7%85%A7%E6%96%87%E6%A1%A3%22%7D%2C%7B%22x%22%3A368.75%2C%22y%22%3A551.5625%2C%22width%22%3A707.8125%2C%22height%22%3A20.3125%2C%22text%22%3A%222disable%3A%2F%2Finterceptattandekont.chh%22%7D%2C%7B%22x%22%3A342.1875%2C%22y%22%3A576.5625%2C%22width%22%3A635.9375%2C%22height%22%3A18.75%2C%22text%22%3A%22stttang.tbaba-ln.comuth-.mmom%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A598.4375%2C%22width%22%3A332.8125%2C%22height%22%3A18.75%2C%22text%22%3A%22static.dingtalk.commac%22%7D%2C%7B%22x%22%3A314.0625%2C%22y%22%3A639.0625%2C%22width%22%3A301.5625%2C%22height%22%3A20.3125%2C%22text%22%3A%2224%23APPLEMacStoreUpdateeTc%22%7D%2C%7B%22x%22%3A332.8125%2C%22y%22%3A662.5%2C%22width%22%3A509.375%2C%22height%22%3A20.3125%2C%22text%22%3A%2225d1sable%3A%2F%2FInterceptppLe.comcomc%22%7D%2C%7B%22x%22%3A287.5%2C%22y%22%3A684.375%2C%22width%22%3A28.125%2C%22height%22%3A21.875%2C%22text%22%3A%2226%22%7D%2C%7B%22x%22%3A1128.125%2C%22y%22%3A884.375%2C%22width%22%3A289.0625%2C%22height%22%3A20.3125%2C%22text%22%3A%22%E4%BB%A3%E7%90%86%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%26%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%3A12338%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%8C%95%20%E8%BE%93%E5%85%A5%2F%E7%BB%86%E5%85%A5%E8%A7%82%E5%88%99%201%23LightProxyDetaultRules%2C%E5%85%A5%2F%E6%8F%92%E5%85%A5%E8%A7%84%E5%88%99%20Default%202%E5%88%9D%E5%A7%8B%E8%A7%84%E5%88%99%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%B8%80%E4%BA%9B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8B%E5%B7%A5%E4%BD%9C%203%23%E5%9C%A8%E6%AF%94%E8%BE%93%E5%85%A5%E8%A7%84%E5%88%99%204%23command%2Bs%E4%BF%9D%E5%AD%98%205%23%E5%8F%8C%E5%87%BB%E5%90%AF%E7%94%A8%E6%88%96%E8%80%85%E7%A6%81%E7%94%A8%E8%A7%84%E5%88%99%20%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%20%23hosts%E7%BB%91%E5%AE%9A%20810.101.73189g.al1cdn.co%20148205.215168alicnc%20cmb.alicdn.comu.alicdn.com%20%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86%201%E6%9D%A5%E7%9B%B4%E6%8E%A5%E8%BD%AC%E5%8F%91%E7%BD%91%E9%A1%B5%202H%3A%2F%2FWMAOQGLECOTS%3A%2014%E8%BD%AC%E5%8F%91%E5%88%B0%E6%96%87%E4%BB%B6%20%E8%AE%BE%E7%BD%AE%2015%23https%3A%2F%2FwwgooqlecofleeXxxxx.html%2018https%3A%2F%2F*XXXcomAAeALER%2FXXXXXXhTMI%2020%23%E6%9B%B4%E5%A4%9A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88%E5%8F%82%E7%85%A7%E6%96%87%E6%A1%A3%202disable%3A%2F%2Finterceptattandekont.chh%20stttang.tbaba-ln.comuth-.mmom%20static.dingtalk.commac%2024%23APPLEMacStoreUpdateeTc%2025d1sable%3A%2F%2FInterceptppLe.comcomc%2026%20%E4%BB%A3%E7%90%86%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%26%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%3A12338%22%2C%22width%22%3A525%2C%22height%22%3A352%7D\"></card></p><h2 id=\"vz7QC\"><br /></h2><h2 id=\"NJPM5\">为什么需要一个代理工具</h2><p><strong>因为代理工具能够让你随心所欲的掌控自己当前的开发环境。</strong></p><p><br /></p><p><strong>开发环境</strong>是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都<strong>让一个非常简单的需求轻松消耗掉数天的时间</strong>。</p><p><br /></p><p>当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 <code>build</code> 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。</p><p><br /></p><blockquote><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png%22%2C%22originWidth%22%3A211%2C%22originHeight%22%3A239%2C%22name%22%3A%22image.png%22%2C%22size%22%3A134204%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A105.5%2C%22height%22%3A120%7D\"></card></p><p><br /></p><p><span style=\"color: #222222;\"><span>希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。</span></span></p></blockquote><p><br /></p><p>当你的接口和页面突然不能工作时，代理工具可以快速 <code>mock</code> 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。</p><p><br /></p><h2 id=\"CJSHA\">什么是好的开发环境</h2><p>既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。</p><p><br /></p><h3 id=\"UmNIw\">稳定</h3><p>好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。</p><p>依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。</p><p><br /></p><h3 id=\"JgdYr\">快速验证</h3><p>修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 <code>Hot reload</code> 和更高级的 <code>HMR</code> 。</p><p><br /></p><p>有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。</p><p><br /></p><p>这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png%22%2C%22originWidth%22%3A225%2C%22originHeight%22%3A224%2C%22name%22%3A%22image.png%22%2C%22size%22%3A100533%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1.3333334%2C%22y%22%3A0.6666667%2C%22width%22%3A121.3333306%2C%22height%22%3A19.3333333%2C%22text%22%3A%22%E4%B8%80%E6%9D%AF%E8%8C%B6%2C%E4%B8%80%E5%8C%85%E7%83%9F%2C%22%7D%2C%7B%22x%22%3A89.333336%2C%22y%22%3A22%2C%22width%22%3A122.666664%2C%22height%22%3A18.666668%2C%22text%22%3A%22%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E5%A4%A9.%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%80%E6%9D%AF%E8%8C%B6%2C%E4%B8%80%E5%8C%85%E7%83%9F%2C%20%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E5%A4%A9.%22%2C%22width%22%3A112.5%2C%22height%22%3A112%7D\"></card></p><p><br /></p><h3 id=\"r9l9z\">和线上的一致性</h3><p>很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 <code>DEMO</code> 页面，最后开发完再搬到线上。</p><p><br /></p><p>这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 <code>if-else</code> 的逻辑，例如最常见的：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20API_BASE%20%3D%20utils.isDaily%20%3F%20'http%3A%2F%2Flocalhost%3A7001%3A'%3A%20'https%3A%2F%2Fxxxx%2F'%3B%22%2C%22id%22%3A%22pYW11%22%7D\"></card><p><br /></p><p>这种情况也往往导致 <code>Bug</code> 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。</p><p><br /></p><h3 id=\"3MNL0\">确定性</h3><p>开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。</p><p><br /></p><p>有些情况下我们利用 <code>hosts</code> 切换工具来进行联调，但在切完 <code>hosts</code> 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。</p><p><br /></p><p>这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。</p><p><br /></p><h2 id=\"6aYPs\">LightProxy 如何解决这些问题</h2><p>那么 <code>LightProxy</code> 要如何解决上面的这些问题呢</p><p><br /></p><p><code>LightProxy</code> 通过基于 <code>whistle</code> 的代理能力，能够任意修改开发环境中的 <code>request</code> 和 <code>response</code> 。</p><p><br /></p><h3 id=\"WxTiC\">举个例子</h3><p>例如当我们需要在线上页面中加入一个 <code>DIV</code> ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 <code>LightProxy</code> 我们只需要使用：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fwww.alibaba.com%2F%20htmlPrepend%3A%2F%2F(%3Cdiv%3Etest%3C%2Fdiv%3E)%22%2C%22id%22%3A%22HkZn9%22%7D\"></card><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png%22%2C%22originWidth%22%3A1099%2C%22originHeight%22%3A278%2C%22name%22%3A%22image.png%22%2C%22size%22%3A93886%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A22.895834%2C%22y%22%3A11.447917%2C%22width%22%3A138.51978599999998%2C%22height%22%3A16.027083%2C%22text%22%3A%22cdivtest%2Fdiv%E4%B8%80%24%22%7D%2C%7B%22x%22%3A288.4875%2C%22y%22%3A26.330208%2C%22width%22%3A477.37809999999996%2C%22height%22%3A17.171875%2C%22text%22%3A%22%2F%2FINGOLCRK4%22%7D%2C%7B%22x%22%3A44.646873%2C%22y%22%3A43.502083%2C%22width%22%3A485.39162699999997%2C%22height%22%3A16.027084000000002%2C%22text%22%3A%22metacontent%5C%22text%2Fhtml%3Bcharseteutf-8%5C%22httpequivontnt-Type%22%7D%2C%7B%22x%22%3A18.316666%2C%22y%22%3A58.384377%2C%22width%22%3A373.202074%2C%22height%22%3A16.027083000000005%2C%22text%22%3A%22titleentitleo%22%7D%2C%7B%22x%22%3A38.922916%2C%22y%22%3A75.55625%2C%22width%22%3A493.40518399999996%2C%22height%22%3A14.882289999999998%2C%22text%22%3A%22netaname%5C%22kewwordscontent%5C%22MnUfacturersSup%22%7D%2C%7B%22x%22%3A540.3417%2C%22y%22%3A75.55625%2C%22width%22%3A512.8667%2C%22height%22%3A16.027085999999997%2C%22text%22%3A%22smotersuc%22%7D%2C%7B%22x%22%3A65.25313%2C%22y%22%3A92.72813%2C%22width%22%3A469.36457%2C%22height%22%3A13.737490000000008%2C%22text%22%3A%22metaname%5C%22descriptioncontent%5C%22FindquattyMuoctures%2CSue%22%7D%2C%7B%22x%22%3A554.07916%2C%22y%22%3A92.72813%2C%22width%22%3A523.16974%2C%22height%22%3A14.882280000000009%2C%22text%22%3A%22iers%2CEXpoRtRSmte%2C%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A106.46562%2C%22width%22%3A127.071876%2C%22height%22%3A13.737504999999999%2C%22text%22%3A%22alibaba.com%3E%22%7D%2C%7B%22x%22%3A35.48854%2C%22y%22%3A123.6375%2C%22width%22%3A368.62291%2C%22height%22%3A14.882289999999998%2C%22text%22%3A%22metahttp-equiv%5C%22x-dnsprefetch-controtucontente%5C%22on%22%7D%2C%7B%22x%22%3A36.63333%2C%22y%22%3A139.66458%2C%22width%22%3A317.1073%2C%22height%22%3A13.737500000000011%2C%22text%22%3A%22cuinkrel-%5C%22dns-prefetch%5C%22href-%5C%22u%2Fi.alicdn.com%5C%22%22%7D%2C%7B%22x%22%3A32.054165%2C%22y%22%3A154.54688%2C%22width%22%3A331.989595%2C%22height%22%3A16.027080000000012%2C%22text%22%3A%22%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2Fbealicdn.com%22%7D%2C%7B%22x%22%3A27.475%2C%22y%22%3A170.57396%2C%22width%22%3A325.12082999999996%2C%22height%22%3A14.882290000000012%2C%22text%22%3A%22clinkrel-%5C%22dns-prefetch%5C%22href-%2F%2Fis.olicdn.com%5C%22%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A186.60104%2C%22width%22%3A356.03019600000005%2C%22height%22%3A14.882299999999987%2C%22text%22%3A%22linkrel-%5C%22dns-prefetch%5C%22href-y%2Fu.alicdn.com%5C%22%22%7D%2C%7B%22x%22%3A20.60625%2C%22y%22%3A203.77292%2C%22width%22%3A326.26565%2C%22height%22%3A12.592710000000011%2C%22text%22%3A%22%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fg.alicdn.com'%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A219.8%2C%22width%22%3A322.831246%2C%22height%22%3A11.447909999999979%2C%22text%22%3A%22%3Ciinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fassetslicdn.co%22%7D%2C%7B%22x%22%3A24.040625%2C%22y%22%3A235.82709%2C%22width%22%3A389.22915500000005%2C%22height%22%3A12.592690000000005%2C%22text%22%3A%22Linkrel-%5C%22dns-prefetch%5C%22href%5C%22%2Fimg.aticdn.com%22%7D%2C%7B%22x%22%3A27.475%2C%22y%22%3A251.85417%2C%22width%22%3A394.95313%2C%22height%22%3A13.737500000000011%2C%22text%22%3A%22linkrei%5C%22dns-prefetch%5C%22href-%5C%22%2Fcmap.atibaba.com%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22cdivtest%2Fdiv%E4%B8%80%24%20%2F%2FINGOLCRK4%20metacontent%5C%22text%2Fhtml%3Bcharseteutf-8%5C%22httpequivontnt-Type%20titleentitleo%20netaname%5C%22kewwordscontent%5C%22MnUfacturersSup%20smotersuc%20metaname%5C%22descriptioncontent%5C%22FindquattyMuoctures%2CSue%20iers%2CEXpoRtRSmte%2C%20alibaba.com%3E%20metahttp-equiv%5C%22x-dnsprefetch-controtucontente%5C%22on%20cuinkrel-%5C%22dns-prefetch%5C%22href-%5C%22u%2Fi.alicdn.com%5C%22%20%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2Fbealicdn.com%20clinkrel-%5C%22dns-prefetch%5C%22href-%2F%2Fis.olicdn.com%5C%22%20linkrel-%5C%22dns-prefetch%5C%22href-y%2Fu.alicdn.com%5C%22%20%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fg.alicdn.com'%20%3Ciinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fassetslicdn.co%20Linkrel-%5C%22dns-prefetch%5C%22href%5C%22%2Fimg.aticdn.com%20linkrei%5C%22dns-prefetch%5C%22href-%5C%22%2Fcmap.atibaba.com%22%2C%22width%22%3A549.5%2C%22height%22%3A139%7D\"></card></p><p><br /></p><p>就可以在一个线上的页面中插入一个 <code>div</code> 。</p><p><br /></p><p>同样的，我们可以直接把页面中的一个 <code>JS</code> 转发到本地一个开发中的文件</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fwww.google.com%2Fxx.js%20file%3A%2F%2F%2FUser%2Fxxx%2Fxxx.js%22%2C%22id%22%3A%22bDifr%22%7D\"></card><p><br /></p><p>当后端缺少 <code>CORS</code> 头时，我们可以直接给它先加上 <code>CORS</code> 头</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fxxx.com%2Fxx.json%20resCors%3A%2F%2F%20%23%20%E7%BB%99%E5%93%8D%E5%BA%94%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A2%9E%E5%8A%A0%20CORS%20header%22%2C%22id%22%3A%22Zw7hJ%22%7D\"></card><p><br /></p><p>也可以直接把某个文件变成一个内联的文字，只要用类似 <code>ES6</code> 字符串框起来</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fxxx.com%2Fxx.json%20%60test%20text%60%22%2C%22id%22%3A%223rzMc%22%7D\"></card><p><br /></p><p>总体来说，<code><span>LightProxy</span></code> 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。</p><p><br /></p><p>甚至于，你可以自己用 <code>NodeJS</code> 书写针对某个规则的响应：<a href=\"https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8\" target=\"_blank\">使用 NodeJS 编写规则</a></p><p><br /></p><h2 id=\"DTTMJ\">快速确认</h2><p>为了能够快速确认代理是否按预期工作，我们在经过 <code><span>LightProxy</span></code> 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png%22%2C%22originWidth%22%3A1022%2C%22originHeight%22%3A170%2C%22name%22%3A%22image.png%22%2C%22size%22%3A29831%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A229.95%2C%22y%22%3A2.1291666%2C%22width%22%3A540.80836%2C%22height%22%3A26.614583399999997%2C%22text%22%3A%22lp%3ASeehttps%3A%2F%2Fgithub.com%2Fatibaba%2Flightrox%22%7D%2C%7B%22x%22%3A29.808334%2C%22y%22%3A3.19375%2C%22width%22%3A178.850006%2C%22height%22%3A24.485416999999998%2C%22text%22%3A%22lightproxy-help_%22%7D%2C%7B%22x%22%3A59.61667%2C%22y%22%3A45.777084%2C%22width%22%3A409.86459%2C%22height%22%3A23.420829999999995%2C%22text%22%3A%22lightproxy-host-ip_180101.12%22%7D%2C%7B%22x%22%3A86.23125%2C%22y%22%3A87.29584%2C%22width%22%3A472.675%2C%22height%22%3A23.420829999999995%2C%22text%22%3A%22ghtproxy-real-urlhttp%2Fwww.aidu.com%22%7D%2C%7B%22x%22%3A25.55%2C%22y%22%3A130.94376%2C%22width%22%3A301.27709999999996%2C%22height%22%3A22.356240000000014%2C%22text%22%3A%22lightproxy-rulesone%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22lp%3ASeehttps%3A%2F%2Fgithub.com%2Fatibaba%2Flightrox%20lightproxy-help_%20lightproxy-host-ip_180101.12%20ghtproxy-real-urlhttp%2Fwww.aidu.com%20lightproxy-rulesone%22%2C%22width%22%3A511%2C%22height%22%3A85%7D\"></card></p><p><br /></p><h2 id=\"SASae\">没有银弹</h2><p>虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。</p><p><br /></p><p>这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。</p><p><br /></p><h2 id=\"19TAe\">开始 &amp; 下载</h2><p>说了这么多，开始使用 <code>LightProxy</code> 控制你的开发环境吧：<a href=\"https://github.com/alibaba/lightproxy\" target=\"_blank\">https://github.com/alibaba/lightproxy</a></p><p><br /></p><h3 id=\"B9W04\">下载</h3><p><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg\" target=\"_blank\"><span class=\"lake-fontsize-12\"><strong><u>macOS 版</u></strong></span></a></p><p><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe\" target=\"_blank\"><span class=\"lake-fontsize-12\"><strong><u>Windows 版</u></strong></span></a></p><p><br /></p><h2 id=\"ddxHZ\">问题反馈</h2><p>欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：<a href=\"https://github.com/alibaba/lightproxy/issues\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues</a></p><p><br /></p><blockquote><p>ps: Whistle 的作者也在群里，欢迎来撩</p></blockquote><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png%22%2C%22originWidth%22%3A970%2C%22originHeight%22%3A1280%2C%22name%22%3A%22image.png%22%2C%22size%22%3A338210%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A118.666664%2C%22y%22%3A129.33333%2C%22width%22%3A416.000036%2C%22height%22%3A50.66667000000001%2C%22text%22%3A%22LightProxy%E5%BC%80%E6%BA%90%E7%BE%A4%22%7D%2C%7B%22x%22%3A766.6667%2C%22y%22%3A129.33333%2C%22width%22%3A60%2C%22height%22%3A60%2C%22text%22%3A%22L%22%7D%2C%7B%22x%22%3A117.333336%2C%22y%22%3A190.66667%2C%22width%22%3A58.666664%2C%22height%22%3A32%2C%22text%22%3A%223%E4%BA%BA%22%7D%2C%7B%22x%22%3A264%2C%22y%22%3A1144%2C%22width%22%3A470.6667%2C%22height%22%3A33.33339999999998%2C%22text%22%3A%22%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22LightProxy%E5%BC%80%E6%BA%90%E7%BE%A4%20L%203%E4%BA%BA%20%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%2C%22width%22%3A188%2C%22height%22%3A248%7D\"></card></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><blockquote><p>原文地址：<a href=\"https://github.com/alibaba/lightproxy/issues/19\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues/19</a></p></blockquote><h2 id=\"u8H7E\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png%22%2C%22originWidth%22%3A400%2C%22originHeight%22%3A150%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12307%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A151.33333%2C%22y%22%3A52%2C%22width%22%3A222.66667%2C%22height%22%3A66.666664%2C%22text%22%3A%22shtproxy%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22shtproxy%22%2C%22width%22%3A200%2C%22height%22%3A75%7D\"></card></h2><p><br /></p><p><code>LightProxy</code> 是 <code>IFE</code> 团队开发的一款基于 <code>Electron</code> 和 <code>whistle</code> 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 <code>HTTP</code> 代理使用规则转发、修改每一个请求和响应的内容。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png%22%2C%22originWidth%22%3A1500%2C%22originHeight%22%3A1005%2C%22name%22%3A%22image.png%22%2C%22size%22%3A224010%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A225%2C%22y%22%3A54.6875%2C%22width%22%3A32.8125%2C%22height%22%3A21.875%2C%22text%22%3A%22%E5%8C%95%22%7D%2C%7B%22x%22%3A1245.3125%2C%22y%22%3A56.25%2C%22width%22%3A93.75%2C%22height%22%3A17.1875%2C%22text%22%3A%22%E8%BE%93%E5%85%A5%2F%E7%BB%86%E5%85%A5%E8%A7%82%E5%88%99%22%7D%2C%7B%22x%22%3A304.6875%2C%22y%22%3A82.8125%2C%22width%22%3A384.375%2C%22height%22%3A21.875%2C%22text%22%3A%221%23LightProxyDetaultRules%2C%E5%85%A5%2F%E6%8F%92%E5%85%A5%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A84.375%2C%22y%22%3A98.4375%2C%22width%22%3A64.0625%2C%22height%22%3A17.1875%2C%22text%22%3A%22Default%22%7D%2C%7B%22x%22%3A306.25%2C%22y%22%3A104.6875%2C%22width%22%3A360.9375%2C%22height%22%3A21.875%2C%22text%22%3A%222%E5%88%9D%E5%A7%8B%E8%A7%84%E5%88%99%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%B8%80%E4%BA%9B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8B%E5%B7%A5%E4%BD%9C%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A129.6875%2C%22width%22%3A162.5%2C%22height%22%3A18.75%2C%22text%22%3A%223%23%E5%9C%A8%E6%AF%94%E8%BE%93%E5%85%A5%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A310.9375%2C%22y%22%3A151.5625%2C%22width%22%3A150%2C%22height%22%3A17.1875%2C%22text%22%3A%224%23command%2Bs%E4%BF%9D%E5%AD%98%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A173.4375%2C%22width%22%3A175%2C%22height%22%3A18.75%2C%22text%22%3A%225%23%E5%8F%8C%E5%87%BB%E5%90%AF%E7%94%A8%E6%88%96%E8%80%85%E7%A6%81%E7%94%A8%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A1354.6875%2C%22y%22%3A217.1875%2C%22width%22%3A54.6875%2C%22height%22%3A15.625%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%22%7D%2C%7B%22x%22%3A318.75%2C%22y%22%3A218.75%2C%22width%22%3A110.9375%2C%22height%22%3A18.75%2C%22text%22%3A%22%23hosts%E7%BB%91%E5%AE%9A%22%7D%2C%7B%22x%22%3A309.375%2C%22y%22%3A240.625%2C%22width%22%3A245.3125%2C%22height%22%3A18.75%2C%22text%22%3A%22810.101.73189g.al1cdn.co%22%7D%2C%7B%22x%22%3A307.8125%2C%22y%22%3A259.375%2C%22width%22%3A268.75%2C%22height%22%3A26.5625%2C%22text%22%3A%22148205.215168alicnc%22%7D%2C%7B%22x%22%3A601.5625%2C%22y%22%3A264.0625%2C%22width%22%3A243.75%2C%22height%22%3A20.3125%2C%22text%22%3A%22cmb.alicdn.comu.alicdn.com%22%7D%2C%7B%22x%22%3A1356.25%2C%22y%22%3A300%2C%22width%22%3A53.125%2C%22height%22%3A15.625%2C%22text%22%3A%22%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86%22%7D%2C%7B%22x%22%3A312.5%2C%22y%22%3A306.25%2C%22width%22%3A154.6875%2C%22height%22%3A18.75%2C%22text%22%3A%221%E6%9D%A5%E7%9B%B4%E6%8E%A5%E8%BD%AC%E5%8F%91%E7%BD%91%E9%A1%B5%22%7D%2C%7B%22x%22%3A339.0625%2C%22y%22%3A329.6875%2C%22width%22%3A409.375%2C%22height%22%3A20.3125%2C%22text%22%3A%222H%3A%2F%2FWMAOQGLECOTS%3A%22%7D%2C%7B%22x%22%3A307.8125%2C%22y%22%3A375%2C%22width%22%3A153.125%2C%22height%22%3A15.625%2C%22text%22%3A%2214%E8%BD%AC%E5%8F%91%E5%88%B0%E6%96%87%E4%BB%B6%22%7D%2C%7B%22x%22%3A1365.625%2C%22y%22%3A382.8125%2C%22width%22%3A32.8125%2C%22height%22%3A17.1875%2C%22text%22%3A%22%E8%AE%BE%E7%BD%AE%22%7D%2C%7B%22x%22%3A312.5%2C%22y%22%3A396.875%2C%22width%22%3A454.6875%2C%22height%22%3A18.75%2C%22text%22%3A%2215%23https%3A%2F%2FwwgooqlecofleeXxxxx.html%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A464.0625%2C%22width%22%3A401.5625%2C%22height%22%3A18.75%2C%22text%22%3A%2218https%3A%2F%2F*XXXcomAAeALER%2FXXXXXXhTMI%22%7D%2C%7B%22x%22%3A304.6875%2C%22y%22%3A506.25%2C%22width%22%3A200%2C%22height%22%3A20.3125%2C%22text%22%3A%2220%23%E6%9B%B4%E5%A4%9A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88%E5%8F%82%E7%85%A7%E6%96%87%E6%A1%A3%22%7D%2C%7B%22x%22%3A368.75%2C%22y%22%3A551.5625%2C%22width%22%3A707.8125%2C%22height%22%3A20.3125%2C%22text%22%3A%222disable%3A%2F%2Finterceptattandekont.chh%22%7D%2C%7B%22x%22%3A342.1875%2C%22y%22%3A576.5625%2C%22width%22%3A635.9375%2C%22height%22%3A18.75%2C%22text%22%3A%22stttang.tbaba-ln.comuth-.mmom%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A598.4375%2C%22width%22%3A332.8125%2C%22height%22%3A18.75%2C%22text%22%3A%22static.dingtalk.commac%22%7D%2C%7B%22x%22%3A314.0625%2C%22y%22%3A639.0625%2C%22width%22%3A301.5625%2C%22height%22%3A20.3125%2C%22text%22%3A%2224%23APPLEMacStoreUpdateeTc%22%7D%2C%7B%22x%22%3A332.8125%2C%22y%22%3A662.5%2C%22width%22%3A509.375%2C%22height%22%3A20.3125%2C%22text%22%3A%2225d1sable%3A%2F%2FInterceptppLe.comcomc%22%7D%2C%7B%22x%22%3A287.5%2C%22y%22%3A684.375%2C%22width%22%3A28.125%2C%22height%22%3A21.875%2C%22text%22%3A%2226%22%7D%2C%7B%22x%22%3A1128.125%2C%22y%22%3A884.375%2C%22width%22%3A289.0625%2C%22height%22%3A20.3125%2C%22text%22%3A%22%E4%BB%A3%E7%90%86%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%26%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%3A12338%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%8C%95%20%E8%BE%93%E5%85%A5%2F%E7%BB%86%E5%85%A5%E8%A7%82%E5%88%99%201%23LightProxyDetaultRules%2C%E5%85%A5%2F%E6%8F%92%E5%85%A5%E8%A7%84%E5%88%99%20Default%202%E5%88%9D%E5%A7%8B%E8%A7%84%E5%88%99%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%B8%80%E4%BA%9B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8B%E5%B7%A5%E4%BD%9C%203%23%E5%9C%A8%E6%AF%94%E8%BE%93%E5%85%A5%E8%A7%84%E5%88%99%204%23command%2Bs%E4%BF%9D%E5%AD%98%205%23%E5%8F%8C%E5%87%BB%E5%90%AF%E7%94%A8%E6%88%96%E8%80%85%E7%A6%81%E7%94%A8%E8%A7%84%E5%88%99%20%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%20%23hosts%E7%BB%91%E5%AE%9A%20810.101.73189g.al1cdn.co%20148205.215168alicnc%20cmb.alicdn.comu.alicdn.com%20%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86%201%E6%9D%A5%E7%9B%B4%E6%8E%A5%E8%BD%AC%E5%8F%91%E7%BD%91%E9%A1%B5%202H%3A%2F%2FWMAOQGLECOTS%3A%2014%E8%BD%AC%E5%8F%91%E5%88%B0%E6%96%87%E4%BB%B6%20%E8%AE%BE%E7%BD%AE%2015%23https%3A%2F%2FwwgooqlecofleeXxxxx.html%2018https%3A%2F%2F*XXXcomAAeALER%2FXXXXXXhTMI%2020%23%E6%9B%B4%E5%A4%9A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88%E5%8F%82%E7%85%A7%E6%96%87%E6%A1%A3%202disable%3A%2F%2Finterceptattandekont.chh%20stttang.tbaba-ln.comuth-.mmom%20static.dingtalk.commac%2024%23APPLEMacStoreUpdateeTc%2025d1sable%3A%2F%2FInterceptppLe.comcomc%2026%20%E4%BB%A3%E7%90%86%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%26%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%3A12338%22%2C%22width%22%3A525%2C%22height%22%3A352%7D\"></card></p><h2 id=\"vz7QC\"><br /></h2><h2 id=\"NJPM5\">为什么需要一个代理工具</h2><p><strong>因为代理工具能够让你随心所欲的掌控自己当前的开发环境。</strong></p><p><br /></p><p><strong>开发环境</strong>是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都<strong>让一个非常简单的需求轻松消耗掉数天的时间</strong>。</p><p><br /></p><p>当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 <code>build</code> 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。</p><p><br /></p><blockquote><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png%22%2C%22originWidth%22%3A211%2C%22originHeight%22%3A239%2C%22name%22%3A%22image.png%22%2C%22size%22%3A134204%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A105.5%2C%22height%22%3A120%7D\"></card></p><p><br /></p><p><span style=\"color: #222222;\"><span>希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。</span></span></p></blockquote><p><br /></p><p>当你的接口和页面突然不能工作时，代理工具可以快速 <code>mock</code> 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。</p><p><br /></p><h2 id=\"CJSHA\">什么是好的开发环境</h2><p>既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。</p><p><br /></p><h3 id=\"UmNIw\">稳定</h3><p>好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。</p><p>依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。</p><p><br /></p><h3 id=\"JgdYr\">快速验证</h3><p>修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 <code>Hot reload</code> 和更高级的 <code>HMR</code> 。</p><p><br /></p><p>有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。</p><p><br /></p><p>这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png%22%2C%22originWidth%22%3A225%2C%22originHeight%22%3A224%2C%22name%22%3A%22image.png%22%2C%22size%22%3A100533%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1.3333334%2C%22y%22%3A0.6666667%2C%22width%22%3A121.3333306%2C%22height%22%3A19.3333333%2C%22text%22%3A%22%E4%B8%80%E6%9D%AF%E8%8C%B6%2C%E4%B8%80%E5%8C%85%E7%83%9F%2C%22%7D%2C%7B%22x%22%3A89.333336%2C%22y%22%3A22%2C%22width%22%3A122.666664%2C%22height%22%3A18.666668%2C%22text%22%3A%22%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E5%A4%A9.%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%80%E6%9D%AF%E8%8C%B6%2C%E4%B8%80%E5%8C%85%E7%83%9F%2C%20%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E5%A4%A9.%22%2C%22width%22%3A112.5%2C%22height%22%3A112%7D\"></card></p><p><br /></p><h3 id=\"r9l9z\">和线上的一致性</h3><p>很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 <code>DEMO</code> 页面，最后开发完再搬到线上。</p><p><br /></p><p>这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 <code>if-else</code> 的逻辑，例如最常见的：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20API_BASE%20%3D%20utils.isDaily%20%3F%20'http%3A%2F%2Flocalhost%3A7001%3A'%3A%20'https%3A%2F%2Fxxxx%2F'%3B%22%2C%22id%22%3A%22pYW11%22%7D\"></card><p><br /></p><p>这种情况也往往导致 <code>Bug</code> 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。</p><p><br /></p><h3 id=\"3MNL0\">确定性</h3><p>开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。</p><p><br /></p><p>有些情况下我们利用 <code>hosts</code> 切换工具来进行联调，但在切完 <code>hosts</code> 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。</p><p><br /></p><p>这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。</p><p><br /></p><h2 id=\"6aYPs\">LightProxy 如何解决这些问题</h2><p>那么 <code>LightProxy</code> 要如何解决上面的这些问题呢</p><p><br /></p><p><code>LightProxy</code> 通过基于 <code>whistle</code> 的代理能力，能够任意修改开发环境中的 <code>request</code> 和 <code>response</code> 。</p><p><br /></p><h3 id=\"WxTiC\">举个例子</h3><p>例如当我们需要在线上页面中加入一个 <code>DIV</code> ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 <code>LightProxy</code> 我们只需要使用：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fwww.alibaba.com%2F%20htmlPrepend%3A%2F%2F(%3Cdiv%3Etest%3C%2Fdiv%3E)%22%2C%22id%22%3A%22HkZn9%22%7D\"></card><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png%22%2C%22originWidth%22%3A1099%2C%22originHeight%22%3A278%2C%22name%22%3A%22image.png%22%2C%22size%22%3A93886%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A22.895834%2C%22y%22%3A11.447917%2C%22width%22%3A138.51978599999998%2C%22height%22%3A16.027083%2C%22text%22%3A%22cdivtest%2Fdiv%E4%B8%80%24%22%7D%2C%7B%22x%22%3A288.4875%2C%22y%22%3A26.330208%2C%22width%22%3A477.37809999999996%2C%22height%22%3A17.171875%2C%22text%22%3A%22%2F%2FINGOLCRK4%22%7D%2C%7B%22x%22%3A44.646873%2C%22y%22%3A43.502083%2C%22width%22%3A485.39162699999997%2C%22height%22%3A16.027084000000002%2C%22text%22%3A%22metacontent%5C%22text%2Fhtml%3Bcharseteutf-8%5C%22httpequivontnt-Type%22%7D%2C%7B%22x%22%3A18.316666%2C%22y%22%3A58.384377%2C%22width%22%3A373.202074%2C%22height%22%3A16.027083000000005%2C%22text%22%3A%22titleentitleo%22%7D%2C%7B%22x%22%3A38.922916%2C%22y%22%3A75.55625%2C%22width%22%3A493.40518399999996%2C%22height%22%3A14.882289999999998%2C%22text%22%3A%22netaname%5C%22kewwordscontent%5C%22MnUfacturersSup%22%7D%2C%7B%22x%22%3A540.3417%2C%22y%22%3A75.55625%2C%22width%22%3A512.8667%2C%22height%22%3A16.027085999999997%2C%22text%22%3A%22smotersuc%22%7D%2C%7B%22x%22%3A65.25313%2C%22y%22%3A92.72813%2C%22width%22%3A469.36457%2C%22height%22%3A13.737490000000008%2C%22text%22%3A%22metaname%5C%22descriptioncontent%5C%22FindquattyMuoctures%2CSue%22%7D%2C%7B%22x%22%3A554.07916%2C%22y%22%3A92.72813%2C%22width%22%3A523.16974%2C%22height%22%3A14.882280000000009%2C%22text%22%3A%22iers%2CEXpoRtRSmte%2C%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A106.46562%2C%22width%22%3A127.071876%2C%22height%22%3A13.737504999999999%2C%22text%22%3A%22alibaba.com%3E%22%7D%2C%7B%22x%22%3A35.48854%2C%22y%22%3A123.6375%2C%22width%22%3A368.62291%2C%22height%22%3A14.882289999999998%2C%22text%22%3A%22metahttp-equiv%5C%22x-dnsprefetch-controtucontente%5C%22on%22%7D%2C%7B%22x%22%3A36.63333%2C%22y%22%3A139.66458%2C%22width%22%3A317.1073%2C%22height%22%3A13.737500000000011%2C%22text%22%3A%22cuinkrel-%5C%22dns-prefetch%5C%22href-%5C%22u%2Fi.alicdn.com%5C%22%22%7D%2C%7B%22x%22%3A32.054165%2C%22y%22%3A154.54688%2C%22width%22%3A331.989595%2C%22height%22%3A16.027080000000012%2C%22text%22%3A%22%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2Fbealicdn.com%22%7D%2C%7B%22x%22%3A27.475%2C%22y%22%3A170.57396%2C%22width%22%3A325.12082999999996%2C%22height%22%3A14.882290000000012%2C%22text%22%3A%22clinkrel-%5C%22dns-prefetch%5C%22href-%2F%2Fis.olicdn.com%5C%22%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A186.60104%2C%22width%22%3A356.03019600000005%2C%22height%22%3A14.882299999999987%2C%22text%22%3A%22linkrel-%5C%22dns-prefetch%5C%22href-y%2Fu.alicdn.com%5C%22%22%7D%2C%7B%22x%22%3A20.60625%2C%22y%22%3A203.77292%2C%22width%22%3A326.26565%2C%22height%22%3A12.592710000000011%2C%22text%22%3A%22%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fg.alicdn.com'%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A219.8%2C%22width%22%3A322.831246%2C%22height%22%3A11.447909999999979%2C%22text%22%3A%22%3Ciinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fassetslicdn.co%22%7D%2C%7B%22x%22%3A24.040625%2C%22y%22%3A235.82709%2C%22width%22%3A389.22915500000005%2C%22height%22%3A12.592690000000005%2C%22text%22%3A%22Linkrel-%5C%22dns-prefetch%5C%22href%5C%22%2Fimg.aticdn.com%22%7D%2C%7B%22x%22%3A27.475%2C%22y%22%3A251.85417%2C%22width%22%3A394.95313%2C%22height%22%3A13.737500000000011%2C%22text%22%3A%22linkrei%5C%22dns-prefetch%5C%22href-%5C%22%2Fcmap.atibaba.com%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22cdivtest%2Fdiv%E4%B8%80%24%20%2F%2FINGOLCRK4%20metacontent%5C%22text%2Fhtml%3Bcharseteutf-8%5C%22httpequivontnt-Type%20titleentitleo%20netaname%5C%22kewwordscontent%5C%22MnUfacturersSup%20smotersuc%20metaname%5C%22descriptioncontent%5C%22FindquattyMuoctures%2CSue%20iers%2CEXpoRtRSmte%2C%20alibaba.com%3E%20metahttp-equiv%5C%22x-dnsprefetch-controtucontente%5C%22on%20cuinkrel-%5C%22dns-prefetch%5C%22href-%5C%22u%2Fi.alicdn.com%5C%22%20%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2Fbealicdn.com%20clinkrel-%5C%22dns-prefetch%5C%22href-%2F%2Fis.olicdn.com%5C%22%20linkrel-%5C%22dns-prefetch%5C%22href-y%2Fu.alicdn.com%5C%22%20%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fg.alicdn.com'%20%3Ciinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fassetslicdn.co%20Linkrel-%5C%22dns-prefetch%5C%22href%5C%22%2Fimg.aticdn.com%20linkrei%5C%22dns-prefetch%5C%22href-%5C%22%2Fcmap.atibaba.com%22%2C%22width%22%3A549.5%2C%22height%22%3A139%7D\"></card></p><p><br /></p><p>就可以在一个线上的页面中插入一个 <code>div</code> 。</p><p><br /></p><p>同样的，我们可以直接把页面中的一个 <code>JS</code> 转发到本地一个开发中的文件</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fwww.google.com%2Fxx.js%20file%3A%2F%2F%2FUser%2Fxxx%2Fxxx.js%22%2C%22id%22%3A%22bDifr%22%7D\"></card><p><br /></p><p>当后端缺少 <code>CORS</code> 头时，我们可以直接给它先加上 <code>CORS</code> 头</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fxxx.com%2Fxx.json%20resCors%3A%2F%2F%20%23%20%E7%BB%99%E5%93%8D%E5%BA%94%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A2%9E%E5%8A%A0%20CORS%20header%22%2C%22id%22%3A%22Zw7hJ%22%7D\"></card><p><br /></p><p>也可以直接把某个文件变成一个内联的文字，只要用类似 <code>ES6</code> 字符串框起来</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fxxx.com%2Fxx.json%20%60test%20text%60%22%2C%22id%22%3A%223rzMc%22%7D\"></card><p><br /></p><p>总体来说，<code><span>LightProxy</span></code> 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。</p><p><br /></p><p>甚至于，你可以自己用 <code>NodeJS</code> 书写针对某个规则的响应：<a href=\"https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8\" target=\"_blank\">使用 NodeJS 编写规则</a></p><p><br /></p><h2 id=\"DTTMJ\">快速确认</h2><p>为了能够快速确认代理是否按预期工作，我们在经过 <code><span>LightProxy</span></code> 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png%22%2C%22originWidth%22%3A1022%2C%22originHeight%22%3A170%2C%22name%22%3A%22image.png%22%2C%22size%22%3A29831%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A229.95%2C%22y%22%3A2.1291666%2C%22width%22%3A540.80836%2C%22height%22%3A26.614583399999997%2C%22text%22%3A%22lp%3ASeehttps%3A%2F%2Fgithub.com%2Fatibaba%2Flightrox%22%7D%2C%7B%22x%22%3A29.808334%2C%22y%22%3A3.19375%2C%22width%22%3A178.850006%2C%22height%22%3A24.485416999999998%2C%22text%22%3A%22lightproxy-help_%22%7D%2C%7B%22x%22%3A59.61667%2C%22y%22%3A45.777084%2C%22width%22%3A409.86459%2C%22height%22%3A23.420829999999995%2C%22text%22%3A%22lightproxy-host-ip_180101.12%22%7D%2C%7B%22x%22%3A86.23125%2C%22y%22%3A87.29584%2C%22width%22%3A472.675%2C%22height%22%3A23.420829999999995%2C%22text%22%3A%22ghtproxy-real-urlhttp%2Fwww.aidu.com%22%7D%2C%7B%22x%22%3A25.55%2C%22y%22%3A130.94376%2C%22width%22%3A301.27709999999996%2C%22height%22%3A22.356240000000014%2C%22text%22%3A%22lightproxy-rulesone%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22lp%3ASeehttps%3A%2F%2Fgithub.com%2Fatibaba%2Flightrox%20lightproxy-help_%20lightproxy-host-ip_180101.12%20ghtproxy-real-urlhttp%2Fwww.aidu.com%20lightproxy-rulesone%22%2C%22width%22%3A511%2C%22height%22%3A85%7D\"></card></p><p><br /></p><h2 id=\"SASae\">没有银弹</h2><p>虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。</p><p><br /></p><p>这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。</p><p><br /></p><h2 id=\"19TAe\">开始 &amp; 下载</h2><p>说了这么多，开始使用 <code>LightProxy</code> 控制你的开发环境吧：<a href=\"https://github.com/alibaba/lightproxy\" target=\"_blank\">https://github.com/alibaba/lightproxy</a></p><p><br /></p><h3 id=\"B9W04\">下载</h3><p><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg\" target=\"_blank\"><span class=\"lake-fontsize-12\"><strong><u>macOS 版</u></strong></span></a></p><p><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe\" target=\"_blank\"><span class=\"lake-fontsize-12\"><strong><u>Windows 版</u></strong></span></a></p><p><br /></p><h2 id=\"ddxHZ\">问题反馈</h2><p>欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：<a href=\"https://github.com/alibaba/lightproxy/issues\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues</a></p><p><br /></p><blockquote><p>ps: Whistle 的作者也在群里，欢迎来撩</p></blockquote><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png%22%2C%22originWidth%22%3A970%2C%22originHeight%22%3A1280%2C%22name%22%3A%22image.png%22%2C%22size%22%3A338210%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A118.666664%2C%22y%22%3A129.33333%2C%22width%22%3A416.000036%2C%22height%22%3A50.66667000000001%2C%22text%22%3A%22LightProxy%E5%BC%80%E6%BA%90%E7%BE%A4%22%7D%2C%7B%22x%22%3A766.6667%2C%22y%22%3A129.33333%2C%22width%22%3A60%2C%22height%22%3A60%2C%22text%22%3A%22L%22%7D%2C%7B%22x%22%3A117.333336%2C%22y%22%3A190.66667%2C%22width%22%3A58.666664%2C%22height%22%3A32%2C%22text%22%3A%223%E4%BA%BA%22%7D%2C%7B%22x%22%3A264%2C%22y%22%3A1144%2C%22width%22%3A470.6667%2C%22height%22%3A33.33339999999998%2C%22text%22%3A%22%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22LightProxy%E5%BC%80%E6%BA%90%E7%BE%A4%20L%203%E4%BA%BA%20%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%2C%22width%22%3A188%2C%22height%22%3A248%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-01-06T03:11:10.000Z",
    "deleted_at": null,
    "created_at": "2020-01-05T06:21:54.000Z",
    "updated_at": "2020-01-06T03:11:10.000Z",
    "published_at": "2020-01-06T03:11:10.000Z",
    "first_published_at": "2020-01-06T02:30:12.000Z",
    "word_count": 1760,
    "cover": "",
    "description": "原文地址：https://github.com/alibaba/lightproxy/issues/19LightProxy 是 IFE 团队开发的一款基于 Electron 和 whistle 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 HTTP 代理使用规则...",
    "custom_description": "LightProxy 是 IFE 团队开发的一款基于 Electron 和 whistle 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 HTTP 代理使用规则转发、修改每一个请求和响应的内容。为什么需要一个代理工具因为代理工具能够让你随心所欲的掌控自己当前的开发...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 3820165,
    "slug": "micro-macro-task-and-promise-perf",
    "title": "宏任务、微任务和 Promise 的性能",
    "book_id": 653495,
    "book": {
      "id": 653495,
      "type": "Column",
      "slug": "blog",
      "name": "blog",
      "user_id": 236311,
      "description": "",
      "creator_id": 236311,
      "public": 0,
      "items_count": 3,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2020-03-26T03:16:58.967Z",
      "updated_at": "2020-03-26T03:16:58.000Z",
      "created_at": "2019-12-24T14:26:42.000Z",
      "namespace": "xcodebuild/blog",
      "user": {
        "id": 236311,
        "type": "User",
        "login": "xcodebuild",
        "name": "xcodebuIld",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
        "books_count": 6,
        "public_books_count": 1,
        "followers_count": 2,
        "following_count": 0,
        "created_at": "2019-01-03T03:16:21.000Z",
        "updated_at": "2020-03-23T08:18:51.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 236311,
    "creator": {
      "id": 236311,
      "type": "User",
      "login": "xcodebuild",
      "name": "xcodebuIld",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
      "books_count": 6,
      "public_books_count": 1,
      "followers_count": 2,
      "following_count": 0,
      "created_at": "2019-01-03T03:16:21.000Z",
      "updated_at": "2020-03-23T08:18:51.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"AK0O6\"></a>\n## 背景\n\n我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ `MacroTask` ），而后者属于微任务（ `MicroTask` ）。\n\n很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 `++i++++`  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理解宏任务和微任务的执行时序，但却让人对于它们之间真正的差异摸不着头脑。\n\n更重要的是，我们完全不应该依赖这个微小的时序差异进行开发（正如同在 c++ 中不应该依赖未定义行为一样）。虽然宏任务和微任务的定义是存在于标准中的，但是不同的运行环境并不一定能够精准的遵循标准，而且某些场景下的 `Promise` 是各种千奇百怪的 polyfill。\n\n**总之，本文不关注执行时序上的差异，只关注性能。**<br />**\n<a name=\"R7Jsf\"></a>\n## 异步\n\n无论是宏任务还是微任务，首先都是异步任务。在 JavaScript 中的异步是靠事件循环来实现的，拿大家最常见的 setTimeout 为例。\n\n```javascript\n// 同步代码\nlet count = 1;\n\nsetTimeout(() => {\n\t// 异步\n  count = 2;\n}, 0);\n\n// 同步\ncount = 3;\n```\n\n一个异步任务会被丢到事件循环的队列中，而这部分代码会在接下来同步执行的代码后面才执行（这个时序总是可靠的）。每次事件循环中，浏览器会执行队列中的任务，然后进入下一个事件循环。\n\n> 当浏览器需要做一些渲染工作时，会等待这一帧的渲染工作完成，再进入下一个事件循环\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png#align=left&display=inline&height=304&name=image.png&originHeight=912&originWidth=1788&size=336135&status=done&style=none&width=596)\n\n那么，为什么已经有了这么一个机制，为什么又要有所谓的微任务呢，难道只是为了让大家猜测不同异步任务的执行时序么？\n\n我们来看一个 `async function` 的例子\n\n```javascript\nconst asyncTick = () => Promise.resolve();\n\n(async function(){\n\tfor (let i = 0; i < 10; i++) {\n  \tawait asyncTick();\n  }\n})()\n```\n\n我们看到这里明明其实没有异步等待的任务，但是如果 `Promise.resolve` 每次都和 `setTimeout` 一样往异步队列里丢一个任务然后等待一个事件循环来执行。看起来似乎没有什么大的问题，因为『事件循环』和一个 `for` 循环听起来似乎并没有什么本质上的不同。\n\n**然后在事实上，一次事件循环的耗时是远远超出一次 for 循环的。**<br />**<br />我们都知道 `setTimeout(fn, 0)` 并非真的是立即执行，而是要等待至少 `4ms` （事实上可能是 10ms）才会执行。\n\n> [MDN 相关文档](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting)\n> \n> In modern browsers, `setTimeout()`/`setInterval()` calls are throttled to a minimum of once every 4 ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals.\n> <br />**Note**: 4 ms is [specified by the HTML5 spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers) and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.\n\n\n这意味着如果我们仍然采用这种方式去执行 async function（实际上就是 Promise) ，性能会非常的糟糕。\n\n而且对于正在执行一些复杂任务的页面（例如绘制）就更加糟糕了，整个循环都会被这个任务直接阻塞。\n\n微任务就是为了适应这种场景，**和宏任务最大的不同在于，如果在执行微任务的过程中我们往任务队列中新增了任务，浏览器会全部消费掉为止，再进入下一个循环**。这也是为什么微任务和宏任务的时序上会存在差别。\n\n看一个例子：\n\n```javascript\n// setTimeout 版本\nfunction test(){\n   console.log('test');\n   setTimeout(test);\n}\ntest();\n\n// Promise.resolve 版本\n// 这会卡住你的标签页\nfunction test(){\n   console.log('test');\n   Promise.resolve().then(test);\n}\ntest();\n\n// 同步版本\n// 这会卡住你的标签页\nfunction test(){\n   console.log('test');\n   test();\n}\ntest();\n```\n\n你会发现 `setTimeout` 版本的页面仍然能够操作，而控制台上 `test` 的输出次数在不断增加。\n\n而 `Promise.resolve` 和直接递归的表现是一样的（其实有一些区别， `Promise.resolve` 仍然是异步执行的），标签页被卡住，Chrome Devtools 上的输出次数隔一段时间蹦一下。\n\n> 不得不说 Chrome 的 Devtools 优化的确实不错，其实这里已经是死循环的状态了，JS 线程被完全阻塞\n\n\n<a name=\"DWWPv\"></a>\n### Promise 的性能\n\n了解宏任务和微任务的差异有助于我们理解 Promise 的性能。\n\n我们在实际生产中常常发现某些环境下的 Promise 的性能表现非常不如意，有些是不同容器的实现，另一些则是不同版本的 polyfill 实现。尤其是一些开发者会更倾向于体积更小的 `polyfill` ，例如这个有 `1.3k Star` 的实现\n\n[https://github.com/taylorhakes/promise-polyfill](https://github.com/taylorhakes/promise-polyfill)\n\n默认就是使用 `setTimout` 模拟的 `Promise.resolve` ，我们在 [https://jsperf.com/promise-performance-with-timers](https://jsperf.com/promise-performance-with-timers) 可以看到性能的对比已经有了数量级的差距（事实上比较复杂的异步任务会感觉到明显的延迟）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png#align=left&display=inline&height=406&name=image.png&originHeight=1218&originWidth=1950&size=202161&status=done&style=none&width=650)\n\n\n<a name=\"czISa\"></a>\n### 如何正确的模拟 Promise.resolve\n\n除了 `Promise` 是微任务外，还有很多 API 也是通过微任务设定的异步任务，其实如果有了解过 `Vue` 源码的同学就会注意到 `Vue` 的 `$nextTick` 源码中，在没有 `Promise.resolve` 时就是用 `MutationObserver` 模拟的。\n\n看一个简化的的 `Vue.$nextTick` ：\n\n```javascript\nconst timerFunc = (cb) => {\n    let counter = 1\n    const observer = new MutationObserver(cb);\n    const textNode = document.createTextNode(String(counter))\n    observer.observe(textNode, {\n      characterData: true\n    })\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n}\n```\n\n原理其实非常简单，手动构造一个 `MutationObserver` 然后触发 DOM 元素的改变，从而触发异步任务。\n\n使用这种方式就明显把数量级拉了回来\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png#align=left&display=inline&height=359&name=image.png&originHeight=1076&originWidth=1952&size=173379&status=done&style=none&width=650.6666666666666)\n\n\n> 由于这个 Promise 本身实现偏向于体积的缘故，这里的 benchmark 性能仍有数倍差距，但其实 `bluebird` 等注重性能的实现方式在 `timer` 函数用 `MutationObserver` 构造的情况下性能和原生不相上下，某些版本的浏览器下甚至更快\n> \n> **![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png#align=left&display=inline&height=303&name=image.png&originHeight=908&originWidth=1264&size=58867&status=done&style=none&width=421.3333333333333)**\n\n\n\n当然实际上 Vue 中的 `NextTick` 实现要更细致一些，例如通过复用 `MutationObserver` 的方式避免多次创建等。**不过能够让 Promise 实现在性能上拉开百倍差距的就只有宏任务和微任务之间的差异。**<br />**\n> 除 `MutationObserver` 外还有很多其他的 API 使用的也是微任务，但从兼容性和性能角度 `MutationObserver` 仍然是使用最广泛的。\n\n\n<a name=\"uADje\"></a>\n### 总结\n\n宏任务和微任务在机制上的差异会导致不同的 `Promise` 实现产生巨大的性能差异，大到足以直接影响用户的直接体感。所以我们还是要避免暴力引入 `Promise polyfill` 的方式，在现代浏览器上优先使用 `Native Promise` ，而在需要 polyfill 的地方则需要避免性能出现破坏性下滑的情况。\n\n另外，哪条 `console.log` 先执行看懂了就好了，真的不是问题的关键，因为你永远不应该依赖宏任务和微任务的时序差异来编程。\n\n<a name=\"71Z7C\"></a>\n## 拓展阅读\n\n- [视频][ Jake Archibald's talk The Event Loop](https://vimeo.com/254947206)\n- [https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting)\n- [https://github.com/taylorhakes/promise-polyfill](https://github.com/taylorhakes/promise-polyfill)\n- [https://jsperf.com/promise-vs-bluebird](https://jsperf.com/promise-vs-bluebird)\n",
    "body_draft": "<a name=\"AK0O6\"></a>\n## 背景\n\n我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ `MacroTask` ），而后者属于微任务（ `MicroTask` ）。\n\n很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 `++i++++`  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理解宏任务和微任务的执行时序，但却让人对于它们之间真正的差异摸不着头脑。\n\n更重要的是，我们完全不应该依赖这个微小的时序差异进行开发（正如同在 c++ 中不应该依赖未定义行为一样）。虽然宏任务和微任务的定义是存在于标准中的，但是不同的运行环境并不一定能够精准的遵循标准，而且某些场景下的 `Promise` 是各种千奇百怪的 polyfill。\n\n**总之，本文不关注执行时序上的差异，只关注性能。**<br />**\n<a name=\"R7Jsf\"></a>\n## 异步\n\n无论是宏任务还是微任务，首先都是异步任务。在 JavaScript 中的异步是靠事件循环来实现的，拿大家最常见的 setTimeout 为例。\n\n```javascript\n// 同步代码\nlet count = 1;\n\nsetTimeout(() => {\n\t// 异步\n  count = 2;\n}, 0);\n\n// 同步\ncount = 3;\n```\n\n一个异步任务会被丢到事件循环的队列中，而这部分代码会在接下来同步执行的代码后面才执行（这个时序总是可靠的）。每次事件循环中，浏览器会执行队列中的任务，然后进入下一个事件循环。\n\n> 当浏览器需要做一些渲染工作时，会等待这一帧的渲染工作完成，再进入下一个事件循环\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png#align=left&display=inline&height=304&name=image.png&originHeight=912&originWidth=1788&size=336135&status=done&style=none&width=596)\n\n那么，为什么已经有了这么一个机制，为什么又要有所谓的微任务呢，难道只是为了让大家猜测不同异步任务的执行时序么？\n\n我们来看一个 `async function` 的例子\n\n```javascript\nconst asyncTick = () => Promise.resolve();\n\n(async function(){\n\tfor (let i = 0; i < 10; i++) {\n  \tawait asyncTick();\n  }\n})()\n```\n\n我们看到这里明明其实没有异步等待的任务，但是如果 `Promise.resolve` 每次都和 `setTimeout` 一样往异步队列里丢一个任务然后等待一个事件循环来执行。看起来似乎没有什么大的问题，因为『事件循环』和一个 `for` 循环听起来似乎并没有什么本质上的不同。\n\n**然后在事实上，一次事件循环的耗时是远远超出一次 for 循环的。**<br />**<br />我们都知道 `setTimeout(fn, 0)` 并非真的是立即执行，而是要等待至少 `4ms` （事实上可能是 10ms）才会执行。\n\n> [MDN 相关文档](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting)\n> \n> In modern browsers, `setTimeout()`/`setInterval()` calls are throttled to a minimum of once every 4 ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals.\n> <br />**Note**: 4 ms is [specified by the HTML5 spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers) and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.\n\n\n这意味着如果我们仍然采用这种方式去执行 async function（实际上就是 Promise) ，性能会非常的糟糕。\n\n而且对于正在执行一些复杂任务的页面（例如绘制）就更加糟糕了，整个循环都会被这个任务直接阻塞。\n\n微任务就是为了适应这种场景，**和宏任务最大的不同在于，如果在执行微任务的过程中我们往任务队列中新增了任务，浏览器会全部消费掉为止，再进入下一个循环**。这也是为什么微任务和宏任务的时序上会存在差别。\n\n看一个例子：\n\n```javascript\n// setTimeout 版本\nfunction test(){\n   console.log('test');\n   setTimeout(test);\n}\ntest();\n\n// Promise.resolve 版本\n// 这会卡住你的标签页\nfunction test(){\n   console.log('test');\n   Promise.resolve().then(test);\n}\ntest();\n\n// 同步版本\n// 这会卡住你的标签页\nfunction test(){\n   console.log('test');\n   test();\n}\ntest();\n```\n\n你会发现 `setTimeout` 版本的页面仍然能够操作，而控制台上 `test` 的输出次数在不断增加。\n\n而 `Promise.resolve` 和直接递归的表现是一样的（其实有一些区别， `Promise.resolve` 仍然是异步执行的），标签页被卡住，Chrome Devtools 上的输出次数隔一段时间蹦一下。\n\n> 不得不说 Chrome 的 Devtools 优化的确实不错，其实这里已经是死循环的状态了，JS 线程被完全阻塞\n\n\n<a name=\"DWWPv\"></a>\n### Promise 的性能\n\n了解宏任务和微任务的差异有助于我们理解 Promise 的性能。\n\n我们在实际生产中常常发现某些环境下的 Promise 的性能表现非常不如意，有些是不同容器的实现，另一些则是不同版本的 polyfill 实现。尤其是一些开发者会更倾向于体积更小的 `polyfill` ，例如这个有 `1.3k Star` 的实现\n\n[https://github.com/taylorhakes/promise-polyfill](https://github.com/taylorhakes/promise-polyfill)\n\n默认就是使用 `setTimout` 模拟的 `Promise.resolve` ，我们在 [https://jsperf.com/promise-performance-with-timers](https://jsperf.com/promise-performance-with-timers) 可以看到性能的对比已经有了数量级的差距（事实上比较复杂的异步任务会感觉到明显的延迟）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png#align=left&display=inline&height=406&name=image.png&originHeight=1218&originWidth=1950&size=202161&status=done&style=none&width=650)\n\n\n<a name=\"czISa\"></a>\n### 如何正确的模拟 Promise.resolve\n\n除了 `Promise` 是微任务外，还有很多 API 也是通过微任务设定的异步任务，其实如果有了解过 `Vue` 源码的同学就会注意到 `Vue` 的 `$nextTick` 源码中，在没有 `Promise.resolve` 时就是用 `MutationObserver` 模拟的。\n\n看一个简化的的 `Vue.$nextTick` ：\n\n```javascript\nconst timerFunc = (cb) => {\n    let counter = 1\n    const observer = new MutationObserver(cb);\n    const textNode = document.createTextNode(String(counter))\n    observer.observe(textNode, {\n      characterData: true\n    })\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n}\n```\n\n原理其实非常简单，手动构造一个 `MutationObserver` 然后触发 DOM 元素的改变，从而触发异步任务。\n\n使用这种方式就明显把数量级拉了回来\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png#align=left&display=inline&height=359&name=image.png&originHeight=1076&originWidth=1952&size=173379&status=done&style=none&width=650.6666666666666)\n\n\n> 由于这个 Promise 本身实现偏向于体积的缘故，这里的 benchmark 性能仍有数倍差距，但其实 `bluebird` 等注重性能的实现方式在 `timer` 函数用 `MutationObserver` 构造的情况下性能和原生不相上下，某些版本的浏览器下甚至更快\n> \n> **![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png#align=left&display=inline&height=303&name=image.png&originHeight=908&originWidth=1264&size=58867&status=done&style=none&width=421.3333333333333)**\n\n\n\n当然实际上 Vue 中的 `NextTick` 实现要更细致一些，例如通过复用 `MutationObserver` 的方式避免多次创建等。**不过能够让 Promise 实现在性能上拉开百倍差距的就只有宏任务和微任务之间的差异。**<br />**\n> 除 `MutationObserver` 外还有很多其他的 API 使用的也是微任务，但从兼容性和性能角度 `MutationObserver` 仍然是使用最广泛的。\n\n\n<a name=\"uADje\"></a>\n### 总结\n\n宏任务和微任务在机制上的差异会导致不同的 `Promise` 实现产生巨大的性能差异，大到足以直接影响用户的直接体感。所以我们还是要避免暴力引入 `Promise polyfill` 的方式，在现代浏览器上优先使用 `Native Promise` ，而在需要 polyfill 的地方则需要避免性能出现破坏性下滑的情况。\n\n另外，哪条 `console.log` 先执行看懂了就好了，真的不是问题的关键，因为你永远不应该依赖宏任务和微任务的时序差异来编程。\n\n<a name=\"71Z7C\"></a>\n## 拓展阅读\n\n- [视频][ Jake Archibald's talk The Event Loop](https://vimeo.com/254947206)\n- [https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting)\n- [https://github.com/taylorhakes/promise-polyfill](https://github.com/taylorhakes/promise-polyfill)\n- [https://jsperf.com/promise-vs-bluebird](https://jsperf.com/promise-vs-bluebird)\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine\" data-lake-element=\"root\" data-selection-236311=\"%7B%22path%22%3A%5B%5B2%2C4%2C1%5D%2C%5B2%2C4%2C1%5D%5D%2C%22uuid%22%3A%22236311%22%2C%22active%22%3Atrue%7D\"><h2 id=\"AK0O6\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">背景</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MacroTask</code>&nbsp;），而后者属于微任务（ <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MicroTask</code>&nbsp;）。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">++i++++</code>&nbsp; 一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理解宏任务和微任务的执行时序，但却让人对于它们之间真正的差异摸不着头脑。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">更重要的是，我们完全不应该依赖这个微小的时序差异进行开发（正如同在 c++ 中不应该依赖未定义行为一样）。虽然宏任务和微任务的定义是存在于标准中的，但是不同的运行环境并不一定能够精准的遵循标准，而且某些场景下的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise</code> 是各种千奇百怪的 polyfill。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>总之，本文不关注执行时序上的差异，只关注性能。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><br></strong></p><h2 id=\"R7Jsf\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">异步</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">无论是宏任务还是微任务，首先都是异步任务。在 JavaScript 中的异步是靠事件循环来实现的，拿大家最常见的 setTimeout 为例。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"bTQtY\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 同步代码</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setTimeout</span>(() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 异步</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">2</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}, <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 同步</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">3</span>;</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">一个异步任务会被丢到事件循环的队列中，而这部分代码会在接下来同步执行的代码后面才执行（这个时序总是可靠的）。每次事件循环中，浏览器会执行队列中的任务，然后进入下一个事件循环。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当浏览器需要做一些渲染工作时，会等待这一帧的渲染工作完成，再进入下一个事件循环</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 596px; height: 304px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">那么，为什么已经有了这么一个机制，为什么又要有所谓的微任务呢，难道只是为了让大家猜测不同异步任务的执行时序么？</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们来看一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">async function</code> 的例子</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"0lVzI\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">asyncTick</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Promise</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">resolve</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">(<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">async</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span>(){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">for</span> (<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">i</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>; <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">i</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">10</span>; <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">i</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">++</span>) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">await</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">asyncTick</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">})()</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们看到这里明明其实没有异步等待的任务，但是如果 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> 每次都和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimeout</code> 一样往异步队列里丢一个任务然后等待一个事件循环来执行。看起来似乎没有什么大的问题，因为『事件循环』和一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">for</code> 循环听起来似乎并没有什么本质上的不同。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>然后在事实上，一次事件循环的耗时是远远超出一次 for 循环的。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><br></strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们都知道 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimeout(fn, 0)</code> 并非真的是立即执行，而是要等待至少 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">4ms</code> （事实上可能是 10ms）才会执行。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">MDN 相关文档</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">In modern browsers,&nbsp;</span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimeout()</code><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">/</span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setInterval()</code><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">&nbsp;calls are throttled to a minimum of once every 4 ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals.</span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\"><br></span><strong>Note</strong><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); background-color: rgb(255, 243, 212); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">: 4 ms is&nbsp;</span><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers\" target=\"_blank\">specified by the HTML5 spec</a><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); background-color: rgb(255, 243, 212); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">&nbsp;and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.</span></p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这意味着如果我们仍然采用这种方式去执行 <span style=\"background-color: rgba(0, 0, 0, 0.06);\">async function（实际上就是 Promise)</span> ，性能会非常的糟糕。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">而且对于正在执行一些复杂任务的页面（例如绘制）就更加糟糕了，整个循环都会被这个任务直接阻塞。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">微任务就是为了适应这种场景，<strong>和宏任务最大的不同在于，如果在执行微任务的过程中我们往任务队列中新增了任务，浏览器会全部消费掉为止，再进入下一个循环</strong>。这也是为什么微任务和宏任务的时序上会存在差别。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">看一个例子：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"0bQ6j\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// setTimeout 版本</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>(){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">console</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">log</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'test'</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setTimeout</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Promise.resolve 版本</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 这会卡住你的标签页</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>(){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">console</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">log</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'test'</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Promise</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">resolve</span>().<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">then</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 同步版本</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 这会卡住你的标签页</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>(){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">console</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">log</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'test'</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>();</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">你会发现 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimeout</code> 版本的页面仍然能够操作，而控制台上 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">test</code> 的输出次数在不断增加。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">而 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> 和直接递归的表现是一样的（其实有一些区别， <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> 仍然是异步执行的），标签页被卡住，Chrome Devtools 上的输出次数隔一段时间蹦一下。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">不得不说 Chrome 的 Devtools 优化的确实不错，其实这里已经是死循环的状态了，JS 线程被完全阻塞</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"DWWPv\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">Promise 的性能</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">了解宏任务和微任务的差异有助于我们理解 Promise 的性能。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们在实际生产中常常发现某些环境下的 Promise 的性能表现非常不如意，有些是不同容器的实现，另一些则是不同版本的 polyfill 实现。尤其是一些开发者会更倾向于体积更小的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">polyfill</code> ，例如这个有 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">1.3k Star</code> 的实现</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">默认就是使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimout</code> 模拟的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> ，我们在 <a href=\"https://jsperf.com/promise-performance-with-timers\" target=\"_blank\">https://jsperf.com/promise-performance-with-timers</a> 可以看到性能的对比已经有了数量级的差距（事实上比较复杂的异步任务会感觉到明显的延迟）。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 650px; height: 406px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"czISa\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">如何正确的模拟 Promise.resolve</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">除了 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise</code> 是微任务外，还有很多 API 也是通过微任务设定的异步任务，其实如果有了解过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Vue</code> 源码的同学就会注意到 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Vue</code> 的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">$nextTick</code> 源码中，在没有 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> 时就是用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 模拟的。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">看一个简化的的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Vue.$nextTick</code> ：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"KFmnw\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">timerFunc</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> (<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">cb</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">observer</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">MutationObserver</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">cb</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">textNode</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">createTextNode</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">String</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span>))\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">observer</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">observe</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">textNode</span>, {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">characterData</span>: <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">true</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    })\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> (<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">%</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">2</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">textNode</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">data</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">String</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span>)\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">原理其实非常简单，手动构造一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 然后触发 DOM 元素的改变，从而触发异步任务。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">使用这种方式就明显把数量级拉了回来</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 650.667px; height: 359px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">由于这个 Promise 本身实现偏向于体积的缘故，这里的 benchmark 性能仍有数倍差距，但其实 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">bluebird</code> 等注重性能的实现方式在 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">timer</code> 函数用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 构造的情况下性能和原生不相上下，某些版本的浏览器下甚至更快</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 421.333px; height: 303px;\"></span></strong></p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当然实际上 Vue 中的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">NextTick</code> 实现要更细致一些，例如通过复用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 的方式避免多次创建等。<strong>不过能够让 Promise 实现在性能上拉开百倍差距的就只有宏任务和微任务之间的差异。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><br></strong></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">除 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 外还有很多其他的 API 使用的也是微任务，但从兼容性和性能角度 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 仍然是使用最广泛的。</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"uADje\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">总结</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">宏任务和微任务在机制上的差异会导致不同的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise</code> 实现产生巨大的性能差异，大到足以直接影响用户的直接体感。所以我们还是要避免暴力引入 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise polyfill</code> 的方式，在现代浏览器上优先使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Native Promise</code> ，而在需要 polyfill 的地方则需要避免性能出现破坏性下滑的情况。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">另外，哪条 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">console.log</code> 先执行看懂了就好了，真的不是问题的关键，因为你永远不应该依赖宏任务和微任务的时序差异来编程。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"71Z7C\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">拓展阅读</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>[视频]<a href=\"https://vimeo.com/254947206\" target=\"_blank\">&nbsp;Jake Archibald's talk The Event Loop</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting</a></li><li><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></li><li><a href=\"https://jsperf.com/promise-vs-bluebird\" target=\"_blank\">https://jsperf.com/promise-vs-bluebird</a></li></ul></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><h2 id=\"AK0O6\">背景</h2><p><br /></p><p>我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ <code>MacroTask</code> ），而后者属于微任务（ <code>MicroTask</code> ）。</p><p><br /></p><p>很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 <code>++i++++</code>  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理解宏任务和微任务的执行时序，但却让人对于它们之间真正的差异摸不着头脑。</p><p><br /></p><p>更重要的是，我们完全不应该依赖这个微小的时序差异进行开发（正如同在 c++ 中不应该依赖未定义行为一样）。虽然宏任务和微任务的定义是存在于标准中的，但是不同的运行环境并不一定能够精准的遵循标准，而且某些场景下的 <code>Promise</code> 是各种千奇百怪的 polyfill。</p><p><br /></p><p><strong>总之，本文不关注执行时序上的差异，只关注性能。</strong></p><p><strong><br /></strong></p><h2 id=\"R7Jsf\">异步</h2><p><br /></p><p>无论是宏任务还是微任务，首先都是异步任务。在 JavaScript 中的异步是靠事件循环来实现的，拿大家最常见的 setTimeout 为例。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%5Cnlet%20count%20%3D%201%3B%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%5Ct%2F%2F%20%E5%BC%82%E6%AD%A5%5Cn%20%20count%20%3D%202%3B%5Cn%7D%2C%200)%3B%5Cn%5Cn%2F%2F%20%E5%90%8C%E6%AD%A5%5Cncount%20%3D%203%3B%22%2C%22id%22%3A%22bTQtY%22%7D\"></card><p><br /></p><p>一个异步任务会被丢到事件循环的队列中，而这部分代码会在接下来同步执行的代码后面才执行（这个时序总是可靠的）。每次事件循环中，浏览器会执行队列中的任务，然后进入下一个事件循环。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>当浏览器需要做一些渲染工作时，会等待这一帧的渲染工作完成，再进入下一个事件循环</p></blockquote><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png%22%2C%22originWidth%22%3A1788%2C%22originHeight%22%3A912%2C%22name%22%3A%22image.png%22%2C%22size%22%3A336135%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A596%2C%22height%22%3A304%7D\"></card></p><p><br /></p><p>那么，为什么已经有了这么一个机制，为什么又要有所谓的微任务呢，难道只是为了让大家猜测不同异步任务的执行时序么？</p><p><br /></p><p>我们来看一个 <code>async function</code> 的例子</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20asyncTick%20%3D%20()%20%3D%3E%20Promise.resolve()%3B%5Cn%5Cn(async%20function()%7B%5Cn%5Ctfor%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%5Cn%20%20%5Ctawait%20asyncTick()%3B%5Cn%20%20%7D%5Cn%7D)()%22%2C%22id%22%3A%220lVzI%22%7D\"></card><p><br /></p><p>我们看到这里明明其实没有异步等待的任务，但是如果 <code>Promise.resolve</code> 每次都和 <code>setTimeout</code> 一样往异步队列里丢一个任务然后等待一个事件循环来执行。看起来似乎没有什么大的问题，因为『事件循环』和一个 <code>for</code> 循环听起来似乎并没有什么本质上的不同。</p><p><br /></p><p><strong>然后在事实上，一次事件循环的耗时是远远超出一次 for 循环的。</strong></p><p><strong><br /></strong></p><p>我们都知道 <code>setTimeout(fn, 0)</code> 并非真的是立即执行，而是要等待至少 <code>4ms</code> （事实上可能是 10ms）才会执行。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">MDN 相关文档</a></p><p><br /></p><p><span class=\"lake-fontsize-12\" style=\"color: #333333;\">In modern browsers, </span><code>setTimeout()</code><span class=\"lake-fontsize-12\" style=\"color: #333333;\">/</span><code>setInterval()</code><span class=\"lake-fontsize-12\" style=\"color: #333333;\"> calls are throttled to a minimum of once every 4 ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals.</span></p><p><span class=\"lake-fontsize-12\" style=\"color: #333333;\"><br /></span><strong>Note</strong><span class=\"lake-fontsize-12\" style=\"color: #333333; background-color: #FFF3D4;\">: 4 ms is </span><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers\" target=\"_blank\">specified by the HTML5 spec</a><span class=\"lake-fontsize-12\" style=\"color: #333333; background-color: #FFF3D4;\"> and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.</span></p></blockquote><p><br /></p><p>这意味着如果我们仍然采用这种方式去执行 <span style=\"background-color: rgba(0, 0, 0, 0.06);\">async function（实际上就是 Promise)</span> ，性能会非常的糟糕。</p><p><br /></p><p>而且对于正在执行一些复杂任务的页面（例如绘制）就更加糟糕了，整个循环都会被这个任务直接阻塞。</p><p><br /></p><p>微任务就是为了适应这种场景，<strong>和宏任务最大的不同在于，如果在执行微任务的过程中我们往任务队列中新增了任务，浏览器会全部消费掉为止，再进入下一个循环</strong>。这也是为什么微任务和宏任务的时序上会存在差别。</p><p><br /></p><p>看一个例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20setTimeout%20%E7%89%88%E6%9C%AC%5Cnfunction%20test()%7B%5Cn%20%20%20console.log('test')%3B%5Cn%20%20%20setTimeout(test)%3B%5Cn%7D%5Cntest()%3B%5Cn%5Cn%2F%2F%20Promise.resolve%20%E7%89%88%E6%9C%AC%5Cn%2F%2F%20%E8%BF%99%E4%BC%9A%E5%8D%A1%E4%BD%8F%E4%BD%A0%E7%9A%84%E6%A0%87%E7%AD%BE%E9%A1%B5%5Cnfunction%20test()%7B%5Cn%20%20%20console.log('test')%3B%5Cn%20%20%20Promise.resolve().then(test)%3B%5Cn%7D%5Cntest()%3B%5Cn%5Cn%2F%2F%20%E5%90%8C%E6%AD%A5%E7%89%88%E6%9C%AC%5Cn%2F%2F%20%E8%BF%99%E4%BC%9A%E5%8D%A1%E4%BD%8F%E4%BD%A0%E7%9A%84%E6%A0%87%E7%AD%BE%E9%A1%B5%5Cnfunction%20test()%7B%5Cn%20%20%20console.log('test')%3B%5Cn%20%20%20test()%3B%5Cn%7D%5Cntest()%3B%22%2C%22id%22%3A%220bQ6j%22%7D\"></card><p><br /></p><p>你会发现 <code>setTimeout</code> 版本的页面仍然能够操作，而控制台上 <code>test</code> 的输出次数在不断增加。</p><p><br /></p><p>而 <code>Promise.resolve</code> 和直接递归的表现是一样的（其实有一些区别， <code>Promise.resolve</code> 仍然是异步执行的），标签页被卡住，Chrome Devtools 上的输出次数隔一段时间蹦一下。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>不得不说 Chrome 的 Devtools 优化的确实不错，其实这里已经是死循环的状态了，JS 线程被完全阻塞</p></blockquote><p><br /></p><h3 id=\"DWWPv\">Promise 的性能</h3><p><br /></p><p>了解宏任务和微任务的差异有助于我们理解 Promise 的性能。</p><p><br /></p><p>我们在实际生产中常常发现某些环境下的 Promise 的性能表现非常不如意，有些是不同容器的实现，另一些则是不同版本的 polyfill 实现。尤其是一些开发者会更倾向于体积更小的 <code>polyfill</code> ，例如这个有 <code>1.3k Star</code> 的实现</p><p><br /></p><p><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></p><p><br /></p><p>默认就是使用 <code>setTimout</code> 模拟的 <code>Promise.resolve</code> ，我们在 <a href=\"https://jsperf.com/promise-performance-with-timers\" target=\"_blank\">https://jsperf.com/promise-performance-with-timers</a> 可以看到性能的对比已经有了数量级的差距（事实上比较复杂的异步任务会感觉到明显的延迟）。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png%22%2C%22originWidth%22%3A1950%2C%22originHeight%22%3A1218%2C%22name%22%3A%22image.png%22%2C%22size%22%3A202161%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A650%2C%22height%22%3A406%7D\"></card></p><p><br /></p><p><br /></p><h3 id=\"czISa\">如何正确的模拟 Promise.resolve</h3><p><br /></p><p>除了 <code>Promise</code> 是微任务外，还有很多 API 也是通过微任务设定的异步任务，其实如果有了解过 <code>Vue</code> 源码的同学就会注意到 <code>Vue</code> 的 <code>$nextTick</code> 源码中，在没有 <code>Promise.resolve</code> 时就是用 <code>MutationObserver</code> 模拟的。</p><p><br /></p><p>看一个简化的的 <code>Vue.$nextTick</code> ：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20timerFunc%20%3D%20(cb)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20counter%20%3D%201%5Cn%20%20%20%20const%20observer%20%3D%20new%20MutationObserver(cb)%3B%5Cn%20%20%20%20const%20textNode%20%3D%20document.createTextNode(String(counter))%5Cn%20%20%20%20observer.observe(textNode%2C%20%7B%5Cn%20%20%20%20%20%20characterData%3A%20true%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20counter%20%3D%20(counter%20%2B%201)%20%25%202%5Cn%20%20%20%20textNode.data%20%3D%20String(counter)%5Cn%7D%22%2C%22id%22%3A%22KFmnw%22%7D\"></card><p><br /></p><p>原理其实非常简单，手动构造一个 <code>MutationObserver</code> 然后触发 DOM 元素的改变，从而触发异步任务。</p><p><br /></p><p>使用这种方式就明显把数量级拉了回来</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png%22%2C%22originWidth%22%3A1952%2C%22originHeight%22%3A1076%2C%22name%22%3A%22image.png%22%2C%22size%22%3A173379%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A650.6666666666666%2C%22height%22%3A359%7D\"></card></p><p><br /></p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>由于这个 Promise 本身实现偏向于体积的缘故，这里的 benchmark 性能仍有数倍差距，但其实 <code>bluebird</code> 等注重性能的实现方式在 <code>timer</code> 函数用 <code>MutationObserver</code> 构造的情况下性能和原生不相上下，某些版本的浏览器下甚至更快</p><p><br /></p><p><strong><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png%22%2C%22originWidth%22%3A1264%2C%22originHeight%22%3A908%2C%22name%22%3A%22image.png%22%2C%22size%22%3A58867%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A421.3333333333333%2C%22height%22%3A303%7D\"></card></strong></p></blockquote><p><br /></p><p><br /></p><p>当然实际上 Vue 中的 <code>NextTick</code> 实现要更细致一些，例如通过复用 <code>MutationObserver</code> 的方式避免多次创建等。<strong>不过能够让 Promise 实现在性能上拉开百倍差距的就只有宏任务和微任务之间的差异。</strong></p><p><strong><br /></strong></p><blockquote style=\"padding-left: 1em;\"><p>除 <code>MutationObserver</code> 外还有很多其他的 API 使用的也是微任务，但从兼容性和性能角度 <code>MutationObserver</code> 仍然是使用最广泛的。</p></blockquote><p><br /></p><h3 id=\"uADje\">总结</h3><p><br /></p><p>宏任务和微任务在机制上的差异会导致不同的 <code>Promise</code> 实现产生巨大的性能差异，大到足以直接影响用户的直接体感。所以我们还是要避免暴力引入 <code>Promise polyfill</code> 的方式，在现代浏览器上优先使用 <code>Native Promise</code> ，而在需要 polyfill 的地方则需要避免性能出现破坏性下滑的情况。</p><p><br /></p><p>另外，哪条 <code>console.log</code> 先执行看懂了就好了，真的不是问题的关键，因为你永远不应该依赖宏任务和微任务的时序差异来编程。</p><p><br /></p><h2 id=\"71Z7C\">拓展阅读</h2><p><br /></p><ul><li>[视频]<a href=\"https://vimeo.com/254947206\" target=\"_blank\"> Jake Archibald's talk The Event Loop</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting</a></li><li><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></li><li><a href=\"https://jsperf.com/promise-vs-bluebird\" target=\"_blank\">https://jsperf.com/promise-vs-bluebird</a></li></ul>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><h2 id=\"AK0O6\">背景</h2><p><br /></p><p>我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ <code>MacroTask</code> ），而后者属于微任务（ <code>MicroTask</code> ）。</p><p><br /></p><p>很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 <code>++i++++</code>  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理解宏任务和微任务的执行时序，但却让人对于它们之间真正的差异摸不着头脑。</p><p><br /></p><p>更重要的是，我们完全不应该依赖这个微小的时序差异进行开发（正如同在 c++ 中不应该依赖未定义行为一样）。虽然宏任务和微任务的定义是存在于标准中的，但是不同的运行环境并不一定能够精准的遵循标准，而且某些场景下的 <code>Promise</code> 是各种千奇百怪的 polyfill。</p><p><br /></p><p><strong>总之，本文不关注执行时序上的差异，只关注性能。</strong></p><p><strong><br /></strong></p><h2 id=\"R7Jsf\">异步</h2><p><br /></p><p>无论是宏任务还是微任务，首先都是异步任务。在 JavaScript 中的异步是靠事件循环来实现的，拿大家最常见的 setTimeout 为例。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%5Cnlet%20count%20%3D%201%3B%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%5Ct%2F%2F%20%E5%BC%82%E6%AD%A5%5Cn%20%20count%20%3D%202%3B%5Cn%7D%2C%200)%3B%5Cn%5Cn%2F%2F%20%E5%90%8C%E6%AD%A5%5Cncount%20%3D%203%3B%22%2C%22id%22%3A%22bTQtY%22%7D\"></card><p><br /></p><p>一个异步任务会被丢到事件循环的队列中，而这部分代码会在接下来同步执行的代码后面才执行（这个时序总是可靠的）。每次事件循环中，浏览器会执行队列中的任务，然后进入下一个事件循环。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>当浏览器需要做一些渲染工作时，会等待这一帧的渲染工作完成，再进入下一个事件循环</p></blockquote><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png%22%2C%22originWidth%22%3A1788%2C%22originHeight%22%3A912%2C%22name%22%3A%22image.png%22%2C%22size%22%3A336135%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A596%2C%22height%22%3A304%7D\"></card></p><p><br /></p><p>那么，为什么已经有了这么一个机制，为什么又要有所谓的微任务呢，难道只是为了让大家猜测不同异步任务的执行时序么？</p><p><br /></p><p>我们来看一个 <code>async function</code> 的例子</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20asyncTick%20%3D%20()%20%3D%3E%20Promise.resolve()%3B%5Cn%5Cn(async%20function()%7B%5Cn%5Ctfor%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%5Cn%20%20%5Ctawait%20asyncTick()%3B%5Cn%20%20%7D%5Cn%7D)()%22%2C%22id%22%3A%220lVzI%22%7D\"></card><p><br /></p><p>我们看到这里明明其实没有异步等待的任务，但是如果 <code>Promise.resolve</code> 每次都和 <code>setTimeout</code> 一样往异步队列里丢一个任务然后等待一个事件循环来执行。看起来似乎没有什么大的问题，因为『事件循环』和一个 <code>for</code> 循环听起来似乎并没有什么本质上的不同。</p><p><br /></p><p><strong>然后在事实上，一次事件循环的耗时是远远超出一次 for 循环的。</strong></p><p><strong><br /></strong></p><p>我们都知道 <code>setTimeout(fn, 0)</code> 并非真的是立即执行，而是要等待至少 <code>4ms</code> （事实上可能是 10ms）才会执行。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">MDN 相关文档</a></p><p><br /></p><p><span class=\"lake-fontsize-12\" style=\"color: #333333;\">In modern browsers, </span><code>setTimeout()</code><span class=\"lake-fontsize-12\" style=\"color: #333333;\">/</span><code>setInterval()</code><span class=\"lake-fontsize-12\" style=\"color: #333333;\"> calls are throttled to a minimum of once every 4 ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals.</span></p><p><span class=\"lake-fontsize-12\" style=\"color: #333333;\"><br /></span><strong>Note</strong><span class=\"lake-fontsize-12\" style=\"color: #333333; background-color: #FFF3D4;\">: 4 ms is </span><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers\" target=\"_blank\">specified by the HTML5 spec</a><span class=\"lake-fontsize-12\" style=\"color: #333333; background-color: #FFF3D4;\"> and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.</span></p></blockquote><p><br /></p><p>这意味着如果我们仍然采用这种方式去执行 <span style=\"background-color: rgba(0, 0, 0, 0.06);\">async function（实际上就是 Promise)</span> ，性能会非常的糟糕。</p><p><br /></p><p>而且对于正在执行一些复杂任务的页面（例如绘制）就更加糟糕了，整个循环都会被这个任务直接阻塞。</p><p><br /></p><p>微任务就是为了适应这种场景，<strong>和宏任务最大的不同在于，如果在执行微任务的过程中我们往任务队列中新增了任务，浏览器会全部消费掉为止，再进入下一个循环</strong>。这也是为什么微任务和宏任务的时序上会存在差别。</p><p><br /></p><p>看一个例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20setTimeout%20%E7%89%88%E6%9C%AC%5Cnfunction%20test()%7B%5Cn%20%20%20console.log('test')%3B%5Cn%20%20%20setTimeout(test)%3B%5Cn%7D%5Cntest()%3B%5Cn%5Cn%2F%2F%20Promise.resolve%20%E7%89%88%E6%9C%AC%5Cn%2F%2F%20%E8%BF%99%E4%BC%9A%E5%8D%A1%E4%BD%8F%E4%BD%A0%E7%9A%84%E6%A0%87%E7%AD%BE%E9%A1%B5%5Cnfunction%20test()%7B%5Cn%20%20%20console.log('test')%3B%5Cn%20%20%20Promise.resolve().then(test)%3B%5Cn%7D%5Cntest()%3B%5Cn%5Cn%2F%2F%20%E5%90%8C%E6%AD%A5%E7%89%88%E6%9C%AC%5Cn%2F%2F%20%E8%BF%99%E4%BC%9A%E5%8D%A1%E4%BD%8F%E4%BD%A0%E7%9A%84%E6%A0%87%E7%AD%BE%E9%A1%B5%5Cnfunction%20test()%7B%5Cn%20%20%20console.log('test')%3B%5Cn%20%20%20test()%3B%5Cn%7D%5Cntest()%3B%22%2C%22id%22%3A%220bQ6j%22%7D\"></card><p><br /></p><p>你会发现 <code>setTimeout</code> 版本的页面仍然能够操作，而控制台上 <code>test</code> 的输出次数在不断增加。</p><p><br /></p><p>而 <code>Promise.resolve</code> 和直接递归的表现是一样的（其实有一些区别， <code>Promise.resolve</code> 仍然是异步执行的），标签页被卡住，Chrome Devtools 上的输出次数隔一段时间蹦一下。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>不得不说 Chrome 的 Devtools 优化的确实不错，其实这里已经是死循环的状态了，JS 线程被完全阻塞</p></blockquote><p><br /></p><h3 id=\"DWWPv\">Promise 的性能</h3><p><br /></p><p>了解宏任务和微任务的差异有助于我们理解 Promise 的性能。</p><p><br /></p><p>我们在实际生产中常常发现某些环境下的 Promise 的性能表现非常不如意，有些是不同容器的实现，另一些则是不同版本的 polyfill 实现。尤其是一些开发者会更倾向于体积更小的 <code>polyfill</code> ，例如这个有 <code>1.3k Star</code> 的实现</p><p><br /></p><p><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></p><p><br /></p><p>默认就是使用 <code>setTimout</code> 模拟的 <code>Promise.resolve</code> ，我们在 <a href=\"https://jsperf.com/promise-performance-with-timers\" target=\"_blank\">https://jsperf.com/promise-performance-with-timers</a> 可以看到性能的对比已经有了数量级的差距（事实上比较复杂的异步任务会感觉到明显的延迟）。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png%22%2C%22originWidth%22%3A1950%2C%22originHeight%22%3A1218%2C%22name%22%3A%22image.png%22%2C%22size%22%3A202161%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A650%2C%22height%22%3A406%7D\"></card></p><p><br /></p><p><br /></p><h3 id=\"czISa\">如何正确的模拟 Promise.resolve</h3><p><br /></p><p>除了 <code>Promise</code> 是微任务外，还有很多 API 也是通过微任务设定的异步任务，其实如果有了解过 <code>Vue</code> 源码的同学就会注意到 <code>Vue</code> 的 <code>$nextTick</code> 源码中，在没有 <code>Promise.resolve</code> 时就是用 <code>MutationObserver</code> 模拟的。</p><p><br /></p><p>看一个简化的的 <code>Vue.$nextTick</code> ：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20timerFunc%20%3D%20(cb)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20counter%20%3D%201%5Cn%20%20%20%20const%20observer%20%3D%20new%20MutationObserver(cb)%3B%5Cn%20%20%20%20const%20textNode%20%3D%20document.createTextNode(String(counter))%5Cn%20%20%20%20observer.observe(textNode%2C%20%7B%5Cn%20%20%20%20%20%20characterData%3A%20true%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20counter%20%3D%20(counter%20%2B%201)%20%25%202%5Cn%20%20%20%20textNode.data%20%3D%20String(counter)%5Cn%7D%22%2C%22id%22%3A%22KFmnw%22%7D\"></card><p><br /></p><p>原理其实非常简单，手动构造一个 <code>MutationObserver</code> 然后触发 DOM 元素的改变，从而触发异步任务。</p><p><br /></p><p>使用这种方式就明显把数量级拉了回来</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png%22%2C%22originWidth%22%3A1952%2C%22originHeight%22%3A1076%2C%22name%22%3A%22image.png%22%2C%22size%22%3A173379%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A650.6666666666666%2C%22height%22%3A359%7D\"></card></p><p><br /></p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>由于这个 Promise 本身实现偏向于体积的缘故，这里的 benchmark 性能仍有数倍差距，但其实 <code>bluebird</code> 等注重性能的实现方式在 <code>timer</code> 函数用 <code>MutationObserver</code> 构造的情况下性能和原生不相上下，某些版本的浏览器下甚至更快</p><p><br /></p><p><strong><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png%22%2C%22originWidth%22%3A1264%2C%22originHeight%22%3A908%2C%22name%22%3A%22image.png%22%2C%22size%22%3A58867%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A421.3333333333333%2C%22height%22%3A303%7D\"></card></strong></p></blockquote><p><br /></p><p><br /></p><p>当然实际上 Vue 中的 <code>NextTick</code> 实现要更细致一些，例如通过复用 <code>MutationObserver</code> 的方式避免多次创建等。<strong>不过能够让 Promise 实现在性能上拉开百倍差距的就只有宏任务和微任务之间的差异。</strong></p><p><strong><br /></strong></p><blockquote style=\"padding-left: 1em;\"><p>除 <code>MutationObserver</code> 外还有很多其他的 API 使用的也是微任务，但从兼容性和性能角度 <code>MutationObserver</code> 仍然是使用最广泛的。</p></blockquote><p><br /></p><h3 id=\"uADje\">总结</h3><p><br /></p><p>宏任务和微任务在机制上的差异会导致不同的 <code>Promise</code> 实现产生巨大的性能差异，大到足以直接影响用户的直接体感。所以我们还是要避免暴力引入 <code>Promise polyfill</code> 的方式，在现代浏览器上优先使用 <code>Native Promise</code> ，而在需要 polyfill 的地方则需要避免性能出现破坏性下滑的情况。</p><p><br /></p><p>另外，哪条 <code>console.log</code> 先执行看懂了就好了，真的不是问题的关键，因为你永远不应该依赖宏任务和微任务的时序差异来编程。</p><p><br /></p><h2 id=\"71Z7C\">拓展阅读</h2><p><br /></p><ul><li>[视频]<a href=\"https://vimeo.com/254947206\" target=\"_blank\"> Jake Archibald's talk The Event Loop</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting</a></li><li><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></li><li><a href=\"https://jsperf.com/promise-vs-bluebird\" target=\"_blank\">https://jsperf.com/promise-vs-bluebird</a></li></ul>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-12-24T16:20:44.000Z",
    "deleted_at": null,
    "created_at": "2019-12-24T14:26:54.000Z",
    "updated_at": "2019-12-24T16:20:44.000Z",
    "published_at": "2019-12-24T16:20:44.000Z",
    "first_published_at": "2019-12-24T14:27:21.000Z",
    "word_count": 1981,
    "cover": "",
    "description": "背景我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ MacroTask ），而后者属于微任务（ MicroTask ）。很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 ++i++++  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以...",
    "custom_description": "背景我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（MacroTask），而后者属于微任务（MicroTask）。很多文章在介绍宏任务和微任务的差异时，往往用一个类似于 ++i++++  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理...",
    "_serializer": "v2.doc_detail"
  }
]