[
  {
    "id": 3820165,
    "slug": "micro-macro-task-and-promise-perf",
    "title": "宏任务、微任务和 Promise 的性能",
    "book_id": 653495,
    "book": {
      "id": 653495,
      "type": "Column",
      "slug": "blog",
      "name": "blog",
      "user_id": 236311,
      "description": "",
      "creator_id": 236311,
      "public": 0,
      "items_count": 1,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-12-24T16:20:44.496Z",
      "updated_at": "2019-12-24T16:20:44.000Z",
      "created_at": "2019-12-24T14:26:42.000Z",
      "namespace": "xcodebuild/blog",
      "user": {
        "id": 236311,
        "type": "User",
        "login": "xcodebuild",
        "name": "xcodebuIld",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 0,
        "followers_count": 1,
        "following_count": 0,
        "created_at": "2019-01-03T03:16:21.000Z",
        "updated_at": "2019-12-24T14:26:42.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 236311,
    "creator": {
      "id": 236311,
      "type": "User",
      "login": "xcodebuild",
      "name": "xcodebuIld",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 0,
      "followers_count": 1,
      "following_count": 0,
      "created_at": "2019-01-03T03:16:21.000Z",
      "updated_at": "2019-12-24T14:26:42.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"AK0O6\"></a>\n## 背景\n\n我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ `MacroTask` ），而后者属于微任务（ `MicroTask` ）。\n\n很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 `++i++++`  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理解宏任务和微任务的执行时序，但却让人对于它们之间真正的差异摸不着头脑。\n\n更重要的是，我们完全不应该依赖这个微小的时序差异进行开发（正如同在 c++ 中不应该依赖未定义行为一样）。虽然宏任务和微任务的定义是存在于标准中的，但是不同的运行环境并不一定能够精准的遵循标准，而且某些场景下的 `Promise` 是各种千奇百怪的 polyfill。\n\n**总之，本文不关注执行时序上的差异，只关注性能。**<br />**\n<a name=\"R7Jsf\"></a>\n## 异步\n\n无论是宏任务还是微任务，首先都是异步任务。在 JavaScript 中的异步是靠事件循环来实现的，拿大家最常见的 setTimeout 为例。\n\n```javascript\n// 同步代码\nlet count = 1;\n\nsetTimeout(() => {\n\t// 异步\n  count = 2;\n}, 0);\n\n// 同步\ncount = 3;\n```\n\n一个异步任务会被丢到事件循环的队列中，而这部分代码会在接下来同步执行的代码后面才执行（这个时序总是可靠的）。每次事件循环中，浏览器会执行队列中的任务，然后进入下一个事件循环。\n\n> 当浏览器需要做一些渲染工作时，会等待这一帧的渲染工作完成，再进入下一个事件循环\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png#align=left&display=inline&height=304&name=image.png&originHeight=912&originWidth=1788&size=336135&status=done&style=none&width=596)\n\n那么，为什么已经有了这么一个机制，为什么又要有所谓的微任务呢，难道只是为了让大家猜测不同异步任务的执行时序么？\n\n我们来看一个 `async function` 的例子\n\n```javascript\nconst asyncTick = () => Promise.resolve();\n\n(async function(){\n\tfor (let i = 0; i < 10; i++) {\n  \tawait asyncTick();\n  }\n})()\n```\n\n我们看到这里明明其实没有异步等待的任务，但是如果 `Promise.resolve` 每次都和 `setTimeout` 一样往异步队列里丢一个任务然后等待一个事件循环来执行。看起来似乎没有什么大的问题，因为『事件循环』和一个 `for` 循环听起来似乎并没有什么本质上的不同。\n\n**然后在事实上，一次事件循环的耗时是远远超出一次 for 循环的。**<br />**<br />我们都知道 `setTimeout(fn, 0)` 并非真的是立即执行，而是要等待至少 `4ms` （事实上可能是 10ms）才会执行。\n\n> [MDN 相关文档](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting)\n> \n> In modern browsers, `setTimeout()`/`setInterval()` calls are throttled to a minimum of once every 4 ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals.\n> <br />**Note**: 4 ms is [specified by the HTML5 spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers) and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.\n\n\n这意味着如果我们仍然采用这种方式去执行 async function（实际上就是 Promise) ，性能会非常的糟糕。\n\n而且对于正在执行一些复杂任务的页面（例如绘制）就更加糟糕了，整个循环都会被这个任务直接阻塞。\n\n微任务就是为了适应这种场景，**和宏任务最大的不同在于，如果在执行微任务的过程中我们往任务队列中新增了任务，浏览器会全部消费掉为止，再进入下一个循环**。这也是为什么微任务和宏任务的时序上会存在差别。\n\n看一个例子：\n\n```javascript\n// setTimeout 版本\nfunction test(){\n   console.log('test');\n   setTimeout(test);\n}\ntest();\n\n// Promise.resolve 版本\n// 这会卡住你的标签页\nfunction test(){\n   console.log('test');\n   Promise.resolve().then(test);\n}\ntest();\n\n// 同步版本\n// 这会卡住你的标签页\nfunction test(){\n   console.log('test');\n   test();\n}\ntest();\n```\n\n你会发现 `setTimeout` 版本的页面仍然能够操作，而控制台上 `test` 的输出次数在不断增加。\n\n而 `Promise.resolve` 和直接递归的表现是一样的（其实有一些区别， `Promise.resolve` 仍然是异步执行的），标签页被卡住，Chrome Devtools 上的输出次数隔一段时间蹦一下。\n\n> 不得不说 Chrome 的 Devtools 优化的确实不错，其实这里已经是死循环的状态了，JS 线程被完全阻塞\n\n\n<a name=\"DWWPv\"></a>\n### Promise 的性能\n\n了解宏任务和微任务的差异有助于我们理解 Promise 的性能。\n\n我们在实际生产中常常发现某些环境下的 Promise 的性能表现非常不如意，有些是不同容器的实现，另一些则是不同版本的 polyfill 实现。尤其是一些开发者会更倾向于体积更小的 `polyfill` ，例如这个有 `1.3k Star` 的实现\n\n[https://github.com/taylorhakes/promise-polyfill](https://github.com/taylorhakes/promise-polyfill)\n\n默认就是使用 `setTimout` 模拟的 `Promise.resolve` ，我们在 [https://jsperf.com/promise-performance-with-timers](https://jsperf.com/promise-performance-with-timers) 可以看到性能的对比已经有了数量级的差距（事实上比较复杂的异步任务会感觉到明显的延迟）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png#align=left&display=inline&height=406&name=image.png&originHeight=1218&originWidth=1950&size=202161&status=done&style=none&width=650)\n\n\n<a name=\"czISa\"></a>\n### 如何正确的模拟 Promise.resolve\n\n除了 `Promise` 是微任务外，还有很多 API 也是通过微任务设定的异步任务，其实如果有了解过 `Vue` 源码的同学就会注意到 `Vue` 的 `$nextTick` 源码中，在没有 `Promise.resolve` 时就是用 `MutationObserver` 模拟的。\n\n看一个简化的的 `Vue.$nextTick` ：\n\n```javascript\nconst timerFunc = (cb) => {\n    let counter = 1\n    const observer = new MutationObserver(cb);\n    const textNode = document.createTextNode(String(counter))\n    observer.observe(textNode, {\n      characterData: true\n    })\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n}\n```\n\n原理其实非常简单，手动构造一个 `MutationObserver` 然后触发 DOM 元素的改变，从而触发异步任务。\n\n使用这种方式就明显把数量级拉了回来\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png#align=left&display=inline&height=359&name=image.png&originHeight=1076&originWidth=1952&size=173379&status=done&style=none&width=650.6666666666666)\n\n\n> 由于这个 Promise 本身实现偏向于体积的缘故，这里的 benchmark 性能仍有数倍差距，但其实 `bluebird` 等注重性能的实现方式在 `timer` 函数用 `MutationObserver` 构造的情况下性能和原生不相上下，某些版本的浏览器下甚至更快\n> \n> **![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png#align=left&display=inline&height=303&name=image.png&originHeight=908&originWidth=1264&size=58867&status=done&style=none&width=421.3333333333333)**\n\n\n\n当然实际上 Vue 中的 `NextTick` 实现要更细致一些，例如通过复用 `MutationObserver` 的方式避免多次创建等。**不过能够让 Promise 实现在性能上拉开百倍差距的就只有宏任务和微任务之间的差异。**<br />**\n> 除 `MutationObserver` 外还有很多其他的 API 使用的也是微任务，但从兼容性和性能角度 `MutationObserver` 仍然是使用最广泛的。\n\n\n<a name=\"uADje\"></a>\n### 总结\n\n宏任务和微任务在机制上的差异会导致不同的 `Promise` 实现产生巨大的性能差异，大到足以直接影响用户的直接体感。所以我们还是要避免暴力引入 `Promise polyfill` 的方式，在现代浏览器上优先使用 `Native Promise` ，而在需要 polyfill 的地方则需要避免性能出现破坏性下滑的情况。\n\n另外，哪条 `console.log` 先执行看懂了就好了，真的不是问题的关键，因为你永远不应该依赖宏任务和微任务的时序差异来编程。\n\n<a name=\"71Z7C\"></a>\n## 拓展阅读\n\n- [视频][ Jake Archibald's talk The Event Loop](https://vimeo.com/254947206)\n- [https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting)\n- [https://github.com/taylorhakes/promise-polyfill](https://github.com/taylorhakes/promise-polyfill)\n- [https://jsperf.com/promise-vs-bluebird](https://jsperf.com/promise-vs-bluebird)\n",
    "body_draft": "<a name=\"AK0O6\"></a>\n## 背景\n\n我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ `MacroTask` ），而后者属于微任务（ `MicroTask` ）。\n\n很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 `++i++++`  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理解宏任务和微任务的执行时序，但却让人对于它们之间真正的差异摸不着头脑。\n\n更重要的是，我们完全不应该依赖这个微小的时序差异进行开发（正如同在 c++ 中不应该依赖未定义行为一样）。虽然宏任务和微任务的定义是存在于标准中的，但是不同的运行环境并不一定能够精准的遵循标准，而且某些场景下的 `Promise` 是各种千奇百怪的 polyfill。\n\n**总之，本文不关注执行时序上的差异，只关注性能。**<br />**\n<a name=\"R7Jsf\"></a>\n## 异步\n\n无论是宏任务还是微任务，首先都是异步任务。在 JavaScript 中的异步是靠事件循环来实现的，拿大家最常见的 setTimeout 为例。\n\n```javascript\n// 同步代码\nlet count = 1;\n\nsetTimeout(() => {\n\t// 异步\n  count = 2;\n}, 0);\n\n// 同步\ncount = 3;\n```\n\n一个异步任务会被丢到事件循环的队列中，而这部分代码会在接下来同步执行的代码后面才执行（这个时序总是可靠的）。每次事件循环中，浏览器会执行队列中的任务，然后进入下一个事件循环。\n\n> 当浏览器需要做一些渲染工作时，会等待这一帧的渲染工作完成，再进入下一个事件循环\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png#align=left&display=inline&height=304&name=image.png&originHeight=912&originWidth=1788&size=336135&status=done&style=none&width=596)\n\n那么，为什么已经有了这么一个机制，为什么又要有所谓的微任务呢，难道只是为了让大家猜测不同异步任务的执行时序么？\n\n我们来看一个 `async function` 的例子\n\n```javascript\nconst asyncTick = () => Promise.resolve();\n\n(async function(){\n\tfor (let i = 0; i < 10; i++) {\n  \tawait asyncTick();\n  }\n})()\n```\n\n我们看到这里明明其实没有异步等待的任务，但是如果 `Promise.resolve` 每次都和 `setTimeout` 一样往异步队列里丢一个任务然后等待一个事件循环来执行。看起来似乎没有什么大的问题，因为『事件循环』和一个 `for` 循环听起来似乎并没有什么本质上的不同。\n\n**然后在事实上，一次事件循环的耗时是远远超出一次 for 循环的。**<br />**<br />我们都知道 `setTimeout(fn, 0)` 并非真的是立即执行，而是要等待至少 `4ms` （事实上可能是 10ms）才会执行。\n\n> [MDN 相关文档](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting)\n> \n> In modern browsers, `setTimeout()`/`setInterval()` calls are throttled to a minimum of once every 4 ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals.\n> <br />**Note**: 4 ms is [specified by the HTML5 spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers) and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.\n\n\n这意味着如果我们仍然采用这种方式去执行 async function（实际上就是 Promise) ，性能会非常的糟糕。\n\n而且对于正在执行一些复杂任务的页面（例如绘制）就更加糟糕了，整个循环都会被这个任务直接阻塞。\n\n微任务就是为了适应这种场景，**和宏任务最大的不同在于，如果在执行微任务的过程中我们往任务队列中新增了任务，浏览器会全部消费掉为止，再进入下一个循环**。这也是为什么微任务和宏任务的时序上会存在差别。\n\n看一个例子：\n\n```javascript\n// setTimeout 版本\nfunction test(){\n   console.log('test');\n   setTimeout(test);\n}\ntest();\n\n// Promise.resolve 版本\n// 这会卡住你的标签页\nfunction test(){\n   console.log('test');\n   Promise.resolve().then(test);\n}\ntest();\n\n// 同步版本\n// 这会卡住你的标签页\nfunction test(){\n   console.log('test');\n   test();\n}\ntest();\n```\n\n你会发现 `setTimeout` 版本的页面仍然能够操作，而控制台上 `test` 的输出次数在不断增加。\n\n而 `Promise.resolve` 和直接递归的表现是一样的（其实有一些区别， `Promise.resolve` 仍然是异步执行的），标签页被卡住，Chrome Devtools 上的输出次数隔一段时间蹦一下。\n\n> 不得不说 Chrome 的 Devtools 优化的确实不错，其实这里已经是死循环的状态了，JS 线程被完全阻塞\n\n\n<a name=\"DWWPv\"></a>\n### Promise 的性能\n\n了解宏任务和微任务的差异有助于我们理解 Promise 的性能。\n\n我们在实际生产中常常发现某些环境下的 Promise 的性能表现非常不如意，有些是不同容器的实现，另一些则是不同版本的 polyfill 实现。尤其是一些开发者会更倾向于体积更小的 `polyfill` ，例如这个有 `1.3k Star` 的实现\n\n[https://github.com/taylorhakes/promise-polyfill](https://github.com/taylorhakes/promise-polyfill)\n\n默认就是使用 `setTimout` 模拟的 `Promise.resolve` ，我们在 [https://jsperf.com/promise-performance-with-timers](https://jsperf.com/promise-performance-with-timers) 可以看到性能的对比已经有了数量级的差距（事实上比较复杂的异步任务会感觉到明显的延迟）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png#align=left&display=inline&height=406&name=image.png&originHeight=1218&originWidth=1950&size=202161&status=done&style=none&width=650)\n\n\n<a name=\"czISa\"></a>\n### 如何正确的模拟 Promise.resolve\n\n除了 `Promise` 是微任务外，还有很多 API 也是通过微任务设定的异步任务，其实如果有了解过 `Vue` 源码的同学就会注意到 `Vue` 的 `$nextTick` 源码中，在没有 `Promise.resolve` 时就是用 `MutationObserver` 模拟的。\n\n看一个简化的的 `Vue.$nextTick` ：\n\n```javascript\nconst timerFunc = (cb) => {\n    let counter = 1\n    const observer = new MutationObserver(cb);\n    const textNode = document.createTextNode(String(counter))\n    observer.observe(textNode, {\n      characterData: true\n    })\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n}\n```\n\n原理其实非常简单，手动构造一个 `MutationObserver` 然后触发 DOM 元素的改变，从而触发异步任务。\n\n使用这种方式就明显把数量级拉了回来\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png#align=left&display=inline&height=359&name=image.png&originHeight=1076&originWidth=1952&size=173379&status=done&style=none&width=650.6666666666666)\n\n\n> 由于这个 Promise 本身实现偏向于体积的缘故，这里的 benchmark 性能仍有数倍差距，但其实 `bluebird` 等注重性能的实现方式在 `timer` 函数用 `MutationObserver` 构造的情况下性能和原生不相上下，某些版本的浏览器下甚至更快\n> \n> **![image.png](https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png#align=left&display=inline&height=303&name=image.png&originHeight=908&originWidth=1264&size=58867&status=done&style=none&width=421.3333333333333)**\n\n\n\n当然实际上 Vue 中的 `NextTick` 实现要更细致一些，例如通过复用 `MutationObserver` 的方式避免多次创建等。**不过能够让 Promise 实现在性能上拉开百倍差距的就只有宏任务和微任务之间的差异。**<br />**\n> 除 `MutationObserver` 外还有很多其他的 API 使用的也是微任务，但从兼容性和性能角度 `MutationObserver` 仍然是使用最广泛的。\n\n\n<a name=\"uADje\"></a>\n### 总结\n\n宏任务和微任务在机制上的差异会导致不同的 `Promise` 实现产生巨大的性能差异，大到足以直接影响用户的直接体感。所以我们还是要避免暴力引入 `Promise polyfill` 的方式，在现代浏览器上优先使用 `Native Promise` ，而在需要 polyfill 的地方则需要避免性能出现破坏性下滑的情况。\n\n另外，哪条 `console.log` 先执行看懂了就好了，真的不是问题的关键，因为你永远不应该依赖宏任务和微任务的时序差异来编程。\n\n<a name=\"71Z7C\"></a>\n## 拓展阅读\n\n- [视频][ Jake Archibald's talk The Event Loop](https://vimeo.com/254947206)\n- [https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting)\n- [https://github.com/taylorhakes/promise-polyfill](https://github.com/taylorhakes/promise-polyfill)\n- [https://jsperf.com/promise-vs-bluebird](https://jsperf.com/promise-vs-bluebird)\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine\" data-lake-element=\"root\" data-selection-236311=\"%7B%22path%22%3A%5B%5B2%2C4%2C1%5D%2C%5B2%2C4%2C1%5D%5D%2C%22uuid%22%3A%22236311%22%2C%22active%22%3Atrue%7D\"><h2 id=\"AK0O6\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">背景</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MacroTask</code>&nbsp;），而后者属于微任务（ <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MicroTask</code>&nbsp;）。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">++i++++</code>&nbsp; 一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理解宏任务和微任务的执行时序，但却让人对于它们之间真正的差异摸不着头脑。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">更重要的是，我们完全不应该依赖这个微小的时序差异进行开发（正如同在 c++ 中不应该依赖未定义行为一样）。虽然宏任务和微任务的定义是存在于标准中的，但是不同的运行环境并不一定能够精准的遵循标准，而且某些场景下的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise</code> 是各种千奇百怪的 polyfill。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>总之，本文不关注执行时序上的差异，只关注性能。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><br></strong></p><h2 id=\"R7Jsf\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">异步</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">无论是宏任务还是微任务，首先都是异步任务。在 JavaScript 中的异步是靠事件循环来实现的，拿大家最常见的 setTimeout 为例。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"bTQtY\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 同步代码</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setTimeout</span>(() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 异步</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">2</span>;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}, <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 同步</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">3</span>;</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">一个异步任务会被丢到事件循环的队列中，而这部分代码会在接下来同步执行的代码后面才执行（这个时序总是可靠的）。每次事件循环中，浏览器会执行队列中的任务，然后进入下一个事件循环。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当浏览器需要做一些渲染工作时，会等待这一帧的渲染工作完成，再进入下一个事件循环</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 596px; height: 304px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">那么，为什么已经有了这么一个机制，为什么又要有所谓的微任务呢，难道只是为了让大家猜测不同异步任务的执行时序么？</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们来看一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">async function</code> 的例子</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"0lVzI\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">asyncTick</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Promise</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">resolve</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">(<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">async</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span>(){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">for</span> (<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">i</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>; <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">i</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">10</span>; <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">i</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">++</span>) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">await</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">asyncTick</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">})()</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们看到这里明明其实没有异步等待的任务，但是如果 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> 每次都和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimeout</code> 一样往异步队列里丢一个任务然后等待一个事件循环来执行。看起来似乎没有什么大的问题，因为『事件循环』和一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">for</code> 循环听起来似乎并没有什么本质上的不同。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>然后在事实上，一次事件循环的耗时是远远超出一次 for 循环的。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><br></strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们都知道 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimeout(fn, 0)</code> 并非真的是立即执行，而是要等待至少 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">4ms</code> （事实上可能是 10ms）才会执行。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">MDN 相关文档</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">In modern browsers,&nbsp;</span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimeout()</code><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">/</span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setInterval()</code><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">&nbsp;calls are throttled to a minimum of once every 4 ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals.</span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\"><br></span><strong>Note</strong><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); background-color: rgb(255, 243, 212); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">: 4 ms is&nbsp;</span><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers\" target=\"_blank\">specified by the HTML5 spec</a><span class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51); background-color: rgb(255, 243, 212); font-size: 16px; line-height: 24px;\" data-mce-style=\"font-size: 12px\">&nbsp;and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.</span></p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这意味着如果我们仍然采用这种方式去执行 <span style=\"background-color: rgba(0, 0, 0, 0.06);\">async function（实际上就是 Promise)</span> ，性能会非常的糟糕。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">而且对于正在执行一些复杂任务的页面（例如绘制）就更加糟糕了，整个循环都会被这个任务直接阻塞。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">微任务就是为了适应这种场景，<strong>和宏任务最大的不同在于，如果在执行微任务的过程中我们往任务队列中新增了任务，浏览器会全部消费掉为止，再进入下一个循环</strong>。这也是为什么微任务和宏任务的时序上会存在差别。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">看一个例子：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"0bQ6j\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// setTimeout 版本</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>(){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">console</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">log</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'test'</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setTimeout</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Promise.resolve 版本</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 这会卡住你的标签页</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>(){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">console</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">log</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'test'</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Promise</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">resolve</span>().<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">then</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 同步版本</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 这会卡住你的标签页</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>(){\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">console</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">log</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'test'</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">   <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">test</span>();</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">你会发现 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimeout</code> 版本的页面仍然能够操作，而控制台上 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">test</code> 的输出次数在不断增加。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">而 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> 和直接递归的表现是一样的（其实有一些区别， <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> 仍然是异步执行的），标签页被卡住，Chrome Devtools 上的输出次数隔一段时间蹦一下。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">不得不说 Chrome 的 Devtools 优化的确实不错，其实这里已经是死循环的状态了，JS 线程被完全阻塞</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"DWWPv\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">Promise 的性能</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">了解宏任务和微任务的差异有助于我们理解 Promise 的性能。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们在实际生产中常常发现某些环境下的 Promise 的性能表现非常不如意，有些是不同容器的实现，另一些则是不同版本的 polyfill 实现。尤其是一些开发者会更倾向于体积更小的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">polyfill</code> ，例如这个有 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">1.3k Star</code> 的实现</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">默认就是使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setTimout</code> 模拟的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> ，我们在 <a href=\"https://jsperf.com/promise-performance-with-timers\" target=\"_blank\">https://jsperf.com/promise-performance-with-timers</a> 可以看到性能的对比已经有了数量级的差距（事实上比较复杂的异步任务会感觉到明显的延迟）。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 650px; height: 406px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"czISa\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">如何正确的模拟 Promise.resolve</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">除了 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise</code> 是微任务外，还有很多 API 也是通过微任务设定的异步任务，其实如果有了解过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Vue</code> 源码的同学就会注意到 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Vue</code> 的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">$nextTick</code> 源码中，在没有 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise.resolve</code> 时就是用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 模拟的。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">看一个简化的的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Vue.$nextTick</code> ：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"KFmnw\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">timerFunc</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> (<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">cb</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">observer</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">MutationObserver</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">cb</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">textNode</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">createTextNode</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">String</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span>))\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">observer</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">observe</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">textNode</span>, {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">characterData</span>: <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">true</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    })\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> (<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">%</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">2</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">textNode</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">data</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">String</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">counter</span>)\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">原理其实非常简单，手动构造一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 然后触发 DOM 元素的改变，从而触发异步任务。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">使用这种方式就明显把数量级拉了回来</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 650.667px; height: 359px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">由于这个 Promise 本身实现偏向于体积的缘故，这里的 benchmark 性能仍有数倍差距，但其实 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">bluebird</code> 等注重性能的实现方式在 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">timer</code> 函数用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 构造的情况下性能和原生不相上下，某些版本的浏览器下甚至更快</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/236311/1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 421.333px; height: 303px;\"></span></strong></p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当然实际上 Vue 中的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">NextTick</code> 实现要更细致一些，例如通过复用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 的方式避免多次创建等。<strong>不过能够让 Promise 实现在性能上拉开百倍差距的就只有宏任务和微任务之间的差异。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><br></strong></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">除 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 外还有很多其他的 API 使用的也是微任务，但从兼容性和性能角度 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">MutationObserver</code> 仍然是使用最广泛的。</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"uADje\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">总结</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">宏任务和微任务在机制上的差异会导致不同的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise</code> 实现产生巨大的性能差异，大到足以直接影响用户的直接体感。所以我们还是要避免暴力引入 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Promise polyfill</code> 的方式，在现代浏览器上优先使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Native Promise</code> ，而在需要 polyfill 的地方则需要避免性能出现破坏性下滑的情况。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">另外，哪条 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">console.log</code> 先执行看懂了就好了，真的不是问题的关键，因为你永远不应该依赖宏任务和微任务的时序差异来编程。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"71Z7C\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">拓展阅读</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>[视频]<a href=\"https://vimeo.com/254947206\" target=\"_blank\">&nbsp;Jake Archibald's talk The Event Loop</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting</a></li><li><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></li><li><a href=\"https://jsperf.com/promise-vs-bluebird\" target=\"_blank\">https://jsperf.com/promise-vs-bluebird</a></li></ul></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><h2 id=\"AK0O6\">背景</h2><p><br /></p><p>我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ <code>MacroTask</code> ），而后者属于微任务（ <code>MicroTask</code> ）。</p><p><br /></p><p>很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 <code>++i++++</code>  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理解宏任务和微任务的执行时序，但却让人对于它们之间真正的差异摸不着头脑。</p><p><br /></p><p>更重要的是，我们完全不应该依赖这个微小的时序差异进行开发（正如同在 c++ 中不应该依赖未定义行为一样）。虽然宏任务和微任务的定义是存在于标准中的，但是不同的运行环境并不一定能够精准的遵循标准，而且某些场景下的 <code>Promise</code> 是各种千奇百怪的 polyfill。</p><p><br /></p><p><strong>总之，本文不关注执行时序上的差异，只关注性能。</strong></p><p><strong><br /></strong></p><h2 id=\"R7Jsf\">异步</h2><p><br /></p><p>无论是宏任务还是微任务，首先都是异步任务。在 JavaScript 中的异步是靠事件循环来实现的，拿大家最常见的 setTimeout 为例。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%5Cnlet%20count%20%3D%201%3B%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%5Ct%2F%2F%20%E5%BC%82%E6%AD%A5%5Cn%20%20count%20%3D%202%3B%5Cn%7D%2C%200)%3B%5Cn%5Cn%2F%2F%20%E5%90%8C%E6%AD%A5%5Cncount%20%3D%203%3B%22%2C%22id%22%3A%22bTQtY%22%7D\"></card><p><br /></p><p>一个异步任务会被丢到事件循环的队列中，而这部分代码会在接下来同步执行的代码后面才执行（这个时序总是可靠的）。每次事件循环中，浏览器会执行队列中的任务，然后进入下一个事件循环。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>当浏览器需要做一些渲染工作时，会等待这一帧的渲染工作完成，再进入下一个事件循环</p></blockquote><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618038-db7d48f3-aaa0-454c-b75d-976ee1deca9f.png%22%2C%22originWidth%22%3A1788%2C%22originHeight%22%3A912%2C%22name%22%3A%22image.png%22%2C%22size%22%3A336135%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A596%2C%22height%22%3A304%7D\"></card></p><p><br /></p><p>那么，为什么已经有了这么一个机制，为什么又要有所谓的微任务呢，难道只是为了让大家猜测不同异步任务的执行时序么？</p><p><br /></p><p>我们来看一个 <code>async function</code> 的例子</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20asyncTick%20%3D%20()%20%3D%3E%20Promise.resolve()%3B%5Cn%5Cn(async%20function()%7B%5Cn%5Ctfor%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%5Cn%20%20%5Ctawait%20asyncTick()%3B%5Cn%20%20%7D%5Cn%7D)()%22%2C%22id%22%3A%220lVzI%22%7D\"></card><p><br /></p><p>我们看到这里明明其实没有异步等待的任务，但是如果 <code>Promise.resolve</code> 每次都和 <code>setTimeout</code> 一样往异步队列里丢一个任务然后等待一个事件循环来执行。看起来似乎没有什么大的问题，因为『事件循环』和一个 <code>for</code> 循环听起来似乎并没有什么本质上的不同。</p><p><br /></p><p><strong>然后在事实上，一次事件循环的耗时是远远超出一次 for 循环的。</strong></p><p><strong><br /></strong></p><p>我们都知道 <code>setTimeout(fn, 0)</code> 并非真的是立即执行，而是要等待至少 <code>4ms</code> （事实上可能是 10ms）才会执行。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">MDN 相关文档</a></p><p><br /></p><p><span class=\"lake-fontsize-12\" style=\"color: #333333;\">In modern browsers, </span><code>setTimeout()</code><span class=\"lake-fontsize-12\" style=\"color: #333333;\">/</span><code>setInterval()</code><span class=\"lake-fontsize-12\" style=\"color: #333333;\"> calls are throttled to a minimum of once every 4 ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals.</span></p><p><span class=\"lake-fontsize-12\" style=\"color: #333333;\"><br /></span><strong>Note</strong><span class=\"lake-fontsize-12\" style=\"color: #333333; background-color: #FFF3D4;\">: 4 ms is </span><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers\" target=\"_blank\">specified by the HTML5 spec</a><span class=\"lake-fontsize-12\" style=\"color: #333333; background-color: #FFF3D4;\"> and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.</span></p></blockquote><p><br /></p><p>这意味着如果我们仍然采用这种方式去执行 <span style=\"background-color: rgba(0, 0, 0, 0.06);\">async function（实际上就是 Promise)</span> ，性能会非常的糟糕。</p><p><br /></p><p>而且对于正在执行一些复杂任务的页面（例如绘制）就更加糟糕了，整个循环都会被这个任务直接阻塞。</p><p><br /></p><p>微任务就是为了适应这种场景，<strong>和宏任务最大的不同在于，如果在执行微任务的过程中我们往任务队列中新增了任务，浏览器会全部消费掉为止，再进入下一个循环</strong>。这也是为什么微任务和宏任务的时序上会存在差别。</p><p><br /></p><p>看一个例子：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20setTimeout%20%E7%89%88%E6%9C%AC%5Cnfunction%20test()%7B%5Cn%20%20%20console.log('test')%3B%5Cn%20%20%20setTimeout(test)%3B%5Cn%7D%5Cntest()%3B%5Cn%5Cn%2F%2F%20Promise.resolve%20%E7%89%88%E6%9C%AC%5Cn%2F%2F%20%E8%BF%99%E4%BC%9A%E5%8D%A1%E4%BD%8F%E4%BD%A0%E7%9A%84%E6%A0%87%E7%AD%BE%E9%A1%B5%5Cnfunction%20test()%7B%5Cn%20%20%20console.log('test')%3B%5Cn%20%20%20Promise.resolve().then(test)%3B%5Cn%7D%5Cntest()%3B%5Cn%5Cn%2F%2F%20%E5%90%8C%E6%AD%A5%E7%89%88%E6%9C%AC%5Cn%2F%2F%20%E8%BF%99%E4%BC%9A%E5%8D%A1%E4%BD%8F%E4%BD%A0%E7%9A%84%E6%A0%87%E7%AD%BE%E9%A1%B5%5Cnfunction%20test()%7B%5Cn%20%20%20console.log('test')%3B%5Cn%20%20%20test()%3B%5Cn%7D%5Cntest()%3B%22%2C%22id%22%3A%220bQ6j%22%7D\"></card><p><br /></p><p>你会发现 <code>setTimeout</code> 版本的页面仍然能够操作，而控制台上 <code>test</code> 的输出次数在不断增加。</p><p><br /></p><p>而 <code>Promise.resolve</code> 和直接递归的表现是一样的（其实有一些区别， <code>Promise.resolve</code> 仍然是异步执行的），标签页被卡住，Chrome Devtools 上的输出次数隔一段时间蹦一下。</p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>不得不说 Chrome 的 Devtools 优化的确实不错，其实这里已经是死循环的状态了，JS 线程被完全阻塞</p></blockquote><p><br /></p><h3 id=\"DWWPv\">Promise 的性能</h3><p><br /></p><p>了解宏任务和微任务的差异有助于我们理解 Promise 的性能。</p><p><br /></p><p>我们在实际生产中常常发现某些环境下的 Promise 的性能表现非常不如意，有些是不同容器的实现，另一些则是不同版本的 polyfill 实现。尤其是一些开发者会更倾向于体积更小的 <code>polyfill</code> ，例如这个有 <code>1.3k Star</code> 的实现</p><p><br /></p><p><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></p><p><br /></p><p>默认就是使用 <code>setTimout</code> 模拟的 <code>Promise.resolve</code> ，我们在 <a href=\"https://jsperf.com/promise-performance-with-timers\" target=\"_blank\">https://jsperf.com/promise-performance-with-timers</a> 可以看到性能的对比已经有了数量级的差距（事实上比较复杂的异步任务会感觉到明显的延迟）。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618078-d26207a8-f401-4bcc-8049-5859303cf138.png%22%2C%22originWidth%22%3A1950%2C%22originHeight%22%3A1218%2C%22name%22%3A%22image.png%22%2C%22size%22%3A202161%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A650%2C%22height%22%3A406%7D\"></card></p><p><br /></p><p><br /></p><h3 id=\"czISa\">如何正确的模拟 Promise.resolve</h3><p><br /></p><p>除了 <code>Promise</code> 是微任务外，还有很多 API 也是通过微任务设定的异步任务，其实如果有了解过 <code>Vue</code> 源码的同学就会注意到 <code>Vue</code> 的 <code>$nextTick</code> 源码中，在没有 <code>Promise.resolve</code> 时就是用 <code>MutationObserver</code> 模拟的。</p><p><br /></p><p>看一个简化的的 <code>Vue.$nextTick</code> ：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20timerFunc%20%3D%20(cb)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20counter%20%3D%201%5Cn%20%20%20%20const%20observer%20%3D%20new%20MutationObserver(cb)%3B%5Cn%20%20%20%20const%20textNode%20%3D%20document.createTextNode(String(counter))%5Cn%20%20%20%20observer.observe(textNode%2C%20%7B%5Cn%20%20%20%20%20%20characterData%3A%20true%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20counter%20%3D%20(counter%20%2B%201)%20%25%202%5Cn%20%20%20%20textNode.data%20%3D%20String(counter)%5Cn%7D%22%2C%22id%22%3A%22KFmnw%22%7D\"></card><p><br /></p><p>原理其实非常简单，手动构造一个 <code>MutationObserver</code> 然后触发 DOM 元素的改变，从而触发异步任务。</p><p><br /></p><p>使用这种方式就明显把数量级拉了回来</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618165-bce37f3c-a859-4312-8e3f-7f717c0757dd.png%22%2C%22originWidth%22%3A1952%2C%22originHeight%22%3A1076%2C%22name%22%3A%22image.png%22%2C%22size%22%3A173379%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A650.6666666666666%2C%22height%22%3A359%7D\"></card></p><p><br /></p><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>由于这个 Promise 本身实现偏向于体积的缘故，这里的 benchmark 性能仍有数倍差距，但其实 <code>bluebird</code> 等注重性能的实现方式在 <code>timer</code> 函数用 <code>MutationObserver</code> 构造的情况下性能和原生不相上下，某些版本的浏览器下甚至更快</p><p><br /></p><p><strong><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F236311%2F1577197618171-ffb74451-d0c7-417c-8655-8ef5ae500449.png%22%2C%22originWidth%22%3A1264%2C%22originHeight%22%3A908%2C%22name%22%3A%22image.png%22%2C%22size%22%3A58867%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A421.3333333333333%2C%22height%22%3A303%7D\"></card></strong></p></blockquote><p><br /></p><p><br /></p><p>当然实际上 Vue 中的 <code>NextTick</code> 实现要更细致一些，例如通过复用 <code>MutationObserver</code> 的方式避免多次创建等。<strong>不过能够让 Promise 实现在性能上拉开百倍差距的就只有宏任务和微任务之间的差异。</strong></p><p><strong><br /></strong></p><blockquote style=\"padding-left: 1em;\"><p>除 <code>MutationObserver</code> 外还有很多其他的 API 使用的也是微任务，但从兼容性和性能角度 <code>MutationObserver</code> 仍然是使用最广泛的。</p></blockquote><p><br /></p><h3 id=\"uADje\">总结</h3><p><br /></p><p>宏任务和微任务在机制上的差异会导致不同的 <code>Promise</code> 实现产生巨大的性能差异，大到足以直接影响用户的直接体感。所以我们还是要避免暴力引入 <code>Promise polyfill</code> 的方式，在现代浏览器上优先使用 <code>Native Promise</code> ，而在需要 polyfill 的地方则需要避免性能出现破坏性下滑的情况。</p><p><br /></p><p>另外，哪条 <code>console.log</code> 先执行看懂了就好了，真的不是问题的关键，因为你永远不应该依赖宏任务和微任务的时序差异来编程。</p><p><br /></p><h2 id=\"71Z7C\">拓展阅读</h2><p><br /></p><ul><li>[视频]<a href=\"https://vimeo.com/254947206\" target=\"_blank\"> Jake Archibald's talk The Event Loop</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Minimum_delay_and_timeout_nesting</a></li><li><a href=\"https://github.com/taylorhakes/promise-polyfill\" target=\"_blank\">https://github.com/taylorhakes/promise-polyfill</a></li><li><a href=\"https://jsperf.com/promise-vs-bluebird\" target=\"_blank\">https://jsperf.com/promise-vs-bluebird</a></li></ul>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-12-24T16:20:44.000Z",
    "deleted_at": null,
    "created_at": "2019-12-24T14:26:54.000Z",
    "updated_at": "2019-12-24T16:20:44.000Z",
    "published_at": "2019-12-24T16:20:44.000Z",
    "first_published_at": "2019-12-24T14:27:21.000Z",
    "word_count": 1981,
    "cover": "",
    "description": "背景我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（ MacroTask ），而后者属于微任务（ MicroTask ）。很多地方在介绍宏任务和微任务的差异时，往往用一个类似于 ++i++++  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以...",
    "custom_description": "背景我们都知道 setTimeout 和 Promise 并不在一个异步队列中，前者属于宏任务（MacroTask），而后者属于微任务（MicroTask）。很多文章在介绍宏任务和微任务的差异时，往往用一个类似于 ++i++++  一样的题目让大家猜测不同任务的执行先后。这么做虽然可以精确的理...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 3982499,
    "slug": "epfdqv",
    "title": "LightProxy 全能代理抓包工具",
    "book_id": 653495,
    "book": {
      "id": 653495,
      "type": "Column",
      "slug": "blog",
      "name": "blog",
      "user_id": 236311,
      "description": "",
      "creator_id": 236311,
      "public": 0,
      "items_count": 2,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2020-01-06T02:30:12.919Z",
      "updated_at": "2020-01-06T02:30:12.000Z",
      "created_at": "2019-12-24T14:26:42.000Z",
      "namespace": "xcodebuild/blog",
      "user": {
        "id": 236311,
        "type": "User",
        "login": "xcodebuild",
        "name": "xcodebuIld",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 0,
        "followers_count": 1,
        "following_count": 0,
        "created_at": "2019-01-03T03:16:21.000Z",
        "updated_at": "2019-12-24T14:26:42.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 236311,
    "creator": {
      "id": 236311,
      "type": "User",
      "login": "xcodebuild",
      "name": "xcodebuIld",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 0,
      "followers_count": 1,
      "following_count": 0,
      "created_at": "2019-01-03T03:16:21.000Z",
      "updated_at": "2019-12-24T14:26:42.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"td67O\"></a>\n## ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png#align=left&display=inline&height=75&name=image.png&originHeight=150&originWidth=400&size=12307&status=done&style=none&width=200)\n\n`LightProxy` 是 `IFE` 团队开发的一款基于 `Electron` 和 `whistle` 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 `HTTP` 代理使用规则转发、修改每一个请求和响应的内容。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png#align=left&display=inline&height=352&name=image.png&originHeight=1005&originWidth=1500&size=224010&status=done&style=none&width=525)\n<a name=\"vz7QC\"></a>\n## \n<a name=\"NJPM5\"></a>\n## 为什么需要一个代理工具\n**因为代理工具能够让你随心所欲的掌控自己当前的开发环境。**\n\n**开发环境**是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都**让一个非常简单的需求轻松消耗掉数天的时间**。\n\n当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 `build` 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。\n\n> ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png#align=left&display=inline&height=120&name=image.png&originHeight=239&originWidth=211&size=134204&status=done&style=none&width=105.5)\n> \n> 希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。\n\n\n当你的接口和页面突然不能工作时，代理工具可以快速 `mock` 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。\n\n<a name=\"CJSHA\"></a>\n## 什么是好的开发环境\n既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。\n\n<a name=\"UmNIw\"></a>\n### 稳定\n好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。<br />依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。\n\n<a name=\"JgdYr\"></a>\n### 快速验证\n修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 `Hot reload` 和更高级的 `HMR` 。\n\n有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。\n\n这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png#align=left&display=inline&height=112&name=image.png&originHeight=224&originWidth=225&size=100533&status=done&style=none&width=112.5)\n\n<a name=\"r9l9z\"></a>\n### 和线上的一致性\n很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 `DEMO` 页面，最后开发完再搬到线上。\n\n这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 `if-else` 的逻辑，例如最常见的：\n\n```javascript\nconst API_BASE = utils.isDaily ? 'http://localhost:7001:': 'https://xxxx/';\n```\n\n这种情况也往往导致 `Bug` 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。\n\n<a name=\"3MNL0\"></a>\n### 确定性\n开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。\n\n有些情况下我们利用 `hosts` 切换工具来进行联调，但在切完 `hosts` 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。\n\n这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。\n\n<a name=\"6aYPs\"></a>\n## LightProxy 如何解决这些问题\n那么 `LightProxy` 要如何解决上面的这些问题呢\n\n`LightProxy` 通过基于 `whistle` 的代理能力，能够任意修改开发环境中的 `request` 和 `response` 。\n\n<a name=\"WxTiC\"></a>\n### 举个例子\n例如当我们需要在线上页面中加入一个 `DIV` ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 `LightProxy` 我们只需要使用：\n\n```javascript\nhttps://www.alibaba.com/ htmlPrepend://(<div>test</div>)\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png#align=left&display=inline&height=139&name=image.png&originHeight=278&originWidth=1099&size=93886&status=done&style=none&width=549.5)\n\n就可以在一个线上的页面中插入一个 `div` 。\n\n同样的，我们可以直接把页面中的一个 `JS` 转发到本地一个开发中的文件\n\n```javascript\nhttps://www.google.com/xx.js file:///User/xxx/xxx.js\n```\n\n当后端缺少 `CORS` 头时，我们可以直接给它先加上 `CORS` 头\n\n```javascript\nhttps://xxx.com/xx.json resCors:// # 给响应的请求增加 CORS header\n```\n\n也可以直接把某个文件变成一个内联的文字，只要用类似 `ES6` 字符串框起来\n\n```javascript\nhttps://xxx.com/xx.json `test text`\n```\n\n总体来说，`LightProxy` 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。\n\n甚至于，你可以自己用 `NodeJS` 书写针对某个规则的响应：[使用 NodeJS 编写规则](https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8)\n\n<a name=\"DTTMJ\"></a>\n## 快速确认\n为了能够快速确认代理是否按预期工作，我们在经过 `LightProxy` 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png#align=left&display=inline&height=85&name=image.png&originHeight=170&originWidth=1022&size=29831&status=done&style=none&width=511)\n\n<a name=\"SASae\"></a>\n## 没有银弹\n虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。\n\n这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。\n\n<a name=\"19TAe\"></a>\n## 开始 & 下载\n说了这么多，开始使用 `LightProxy` 控制你的开发环境吧：[https://github.com/alibaba/lightproxy](https://github.com/alibaba/lightproxy)\n\n<a name=\"B9W04\"></a>\n### 下载\n[**macOS 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg)<br />[**Windows 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe)<br />\n<a name=\"ddxHZ\"></a>\n## 问题反馈\n欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：[https://github.com/alibaba/lightproxy/issues](https://github.com/alibaba/lightproxy/issues)\n\n> ps: Whistle 的作者也在群里，欢迎来撩\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png#align=left&display=inline&height=248&name=image.png&originHeight=1280&originWidth=970&size=338210&status=done&style=none&width=188)\n",
    "body_draft": "<a name=\"td67O\"></a>\n## ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png#align=left&display=inline&height=75&name=image.png&originHeight=150&originWidth=400&size=12307&status=done&style=none&width=200)\n\n`LightProxy` 是 `IFE` 团队开发的一款基于 `Electron` 和 `whistle` 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 `HTTP` 代理使用规则转发、修改每一个请求和响应的内容。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png#align=left&display=inline&height=352&name=image.png&originHeight=1005&originWidth=1500&size=224010&status=done&style=none&width=525)\n<a name=\"vz7QC\"></a>\n## \n<a name=\"NJPM5\"></a>\n## 为什么需要一个代理工具\n**因为代理工具能够让你随心所欲的掌控自己当前的开发环境。**\n\n**开发环境**是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都**让一个非常简单的需求轻松消耗掉数天的时间**。\n\n当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 `build` 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。\n\n> ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png#align=left&display=inline&height=120&name=image.png&originHeight=239&originWidth=211&size=134204&status=done&style=none&width=105.5)\n> \n> 希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。\n\n\n当你的接口和页面突然不能工作时，代理工具可以快速 `mock` 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。\n\n<a name=\"CJSHA\"></a>\n## 什么是好的开发环境\n既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。\n\n<a name=\"UmNIw\"></a>\n### 稳定\n好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。<br />依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。\n\n<a name=\"JgdYr\"></a>\n### 快速验证\n修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 `Hot reload` 和更高级的 `HMR` 。\n\n有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。\n\n这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png#align=left&display=inline&height=112&name=image.png&originHeight=224&originWidth=225&size=100533&status=done&style=none&width=112.5)\n\n<a name=\"r9l9z\"></a>\n### 和线上的一致性\n很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 `DEMO` 页面，最后开发完再搬到线上。\n\n这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 `if-else` 的逻辑，例如最常见的：\n\n```javascript\nconst API_BASE = utils.isDaily ? 'http://localhost:7001:': 'https://xxxx/';\n```\n\n这种情况也往往导致 `Bug` 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。\n\n<a name=\"3MNL0\"></a>\n### 确定性\n开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。\n\n有些情况下我们利用 `hosts` 切换工具来进行联调，但在切完 `hosts` 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。\n\n这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。\n\n<a name=\"6aYPs\"></a>\n## LightProxy 如何解决这些问题\n那么 `LightProxy` 要如何解决上面的这些问题呢\n\n`LightProxy` 通过基于 `whistle` 的代理能力，能够任意修改开发环境中的 `request` 和 `response` 。\n\n<a name=\"WxTiC\"></a>\n### 举个例子\n例如当我们需要在线上页面中加入一个 `DIV` ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 `LightProxy` 我们只需要使用：\n\n```javascript\nhttps://www.alibaba.com/ htmlPrepend://(<div>test</div>)\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png#align=left&display=inline&height=139&name=image.png&originHeight=278&originWidth=1099&size=93886&status=done&style=none&width=549.5)\n\n就可以在一个线上的页面中插入一个 `div` 。\n\n同样的，我们可以直接把页面中的一个 `JS` 转发到本地一个开发中的文件\n\n```javascript\nhttps://www.google.com/xx.js file:///User/xxx/xxx.js\n```\n\n当后端缺少 `CORS` 头时，我们可以直接给它先加上 `CORS` 头\n\n```javascript\nhttps://xxx.com/xx.json resCors:// # 给响应的请求增加 CORS header\n```\n\n也可以直接把某个文件变成一个内联的文字，只要用类似 `ES6` 字符串框起来\n\n```javascript\nhttps://xxx.com/xx.json `test text`\n```\n\n总体来说，`LightProxy` 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。\n\n甚至于，你可以自己用 `NodeJS` 书写针对某个规则的响应：[使用 NodeJS 编写规则](https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8)\n\n<a name=\"DTTMJ\"></a>\n## 快速确认\n为了能够快速确认代理是否按预期工作，我们在经过 `LightProxy` 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png#align=left&display=inline&height=85&name=image.png&originHeight=170&originWidth=1022&size=29831&status=done&style=none&width=511)\n\n<a name=\"SASae\"></a>\n## 没有银弹\n虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。\n\n这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。\n\n<a name=\"19TAe\"></a>\n## 开始 & 下载\n说了这么多，开始使用 `LightProxy` 控制你的开发环境吧：[https://github.com/alibaba/lightproxy](https://github.com/alibaba/lightproxy)\n\n<a name=\"B9W04\"></a>\n### 下载\n[**macOS 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg)<br />[**Windows 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe)<br />\n<a name=\"ddxHZ\"></a>\n## 问题反馈\n欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：[https://github.com/alibaba/lightproxy/issues](https://github.com/alibaba/lightproxy/issues)\n\n> ps: Whistle 的作者也在群里，欢迎来撩\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png#align=left&display=inline&height=248&name=image.png&originHeight=1280&originWidth=970&size=338210&status=done&style=none&width=188)\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine\" data-lake-element=\"root\" data-selection-236311=\"%7B%22path%22%3A%5B%5B0%5D%2C%5B101%5D%5D%2C%22uuid%22%3A%22236311%22%2C%22active%22%3Atrue%7D\"><h2 id=\"td67O\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-selected\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 200px; height: 75px;\"></span></h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;是 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">IFE</code>&nbsp;团队开发的一款基于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Electron</code>&nbsp;和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">whistle</code>&nbsp;的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">HTTP</code>&nbsp;代理使用规则转发、修改每一个请求和响应的内容。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-selected\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 525px; height: 352px;\"></span></p><h2 id=\"vz7QC\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><br></h2><h2 id=\"NJPM5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">为什么需要一个代理工具</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>因为代理工具能够让你随心所欲的掌控自己当前的开发环境。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>开发环境</strong>是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都<strong>让一个非常简单的需求轻松消耗掉数天的时间</strong>。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">build</code> 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-selected\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 105.5px; height: 120px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span style=\"color: #222222;\"><span>希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。</span></span></p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当你的接口和页面突然不能工作时，代理工具可以快速 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">mock</code>&nbsp;一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"CJSHA\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">什么是好的开发环境</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"UmNIw\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">稳定</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"JgdYr\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">快速验证</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Hot reload</code>&nbsp;和更高级的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">HMR</code>&nbsp;。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-selected\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 112.5px; height: 112px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"r9l9z\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">和线上的一致性</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">DEMO</code>&nbsp;页面，最后开发完再搬到线上。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">if-else</code>&nbsp;的逻辑，例如最常见的：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"pYW11\" class=\"lake-selected\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">API_BASE</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">utils</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">isDaily</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">?</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'http://localhost:7001:'</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'https://xxxx/'</span>;</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种情况也往往导致 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Bug</code>&nbsp;非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"3MNL0\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">确定性</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">有些情况下我们利用&nbsp;<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">hosts</code>&nbsp;切换工具来进行联调，但在切完 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">hosts</code>&nbsp;后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"6aYPs\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">LightProxy 如何解决这些问题</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">那么&nbsp;<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;要如何解决上面的这些问题呢</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;通过基于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">whistle</code>&nbsp;的代理能力，能够任意修改开发环境中的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">request</code>&nbsp;和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">response</code>&nbsp;。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"WxTiC\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">举个例子</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">例如当我们需要在线上页面中加入一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">DIV</code>&nbsp;，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;我们只需要使用：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"HkZn9\" class=\"lake-selected\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//www.alibaba.com/ htmlPrepend://(&lt;div&gt;test&lt;/div&gt;)</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-selected\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 549.5px; height: 139px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">就可以在一个线上的页面中插入一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">div</code>&nbsp;。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">同样的，我们可以直接把页面中的一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">JS</code>&nbsp;转发到本地一个开发中的文件</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"bDifr\" class=\"lake-selected\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//www.google.com/xx.js file:///User/xxx/xxx.js</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当后端缺少 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">CORS</code>&nbsp;头时，我们可以直接给它先加上 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">CORS</code>&nbsp;头</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"Zw7hJ\" class=\"lake-selected\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//xxx.com/xx.json resCors:// # 给响应的请求增加 CORS header</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">也可以直接把某个文件变成一个内联的文字，只要用类似 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">ES6</code>&nbsp;字符串框起来</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"3rzMc\" class=\"lake-selected\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//xxx.com/xx.json `test text`</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">总体来说，<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>LightProxy</span></code> 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">甚至于，你可以自己用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">NodeJS</code>&nbsp;书写针对某个规则的响应：<a href=\"https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8\" target=\"_blank\">使用 NodeJS 编写规则</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"DTTMJ\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">快速确认</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">为了能够快速确认代理是否按预期工作，我们在经过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>LightProxy</span></code> 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-selected\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 511px; height: 85px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"SASae\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">没有银弹</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"19TAe\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">开始 &amp; 下载</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">说了这么多，开始使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;控制你的开发环境吧：<a href=\"https://github.com/alibaba/lightproxy\" target=\"_blank\">https://github.com/alibaba/lightproxy</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"B9W04\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">下载</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg\" target=\"_blank\"><span class=\"lake-fontsize-12\" data-mce-style=\"font-size: 12px\" style=\"font-size: 16px; line-height: 24px;\"><strong><u>macOS 版</u></strong></span></a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe\" target=\"_blank\"><span class=\"lake-fontsize-12\" data-mce-style=\"font-size: 12px\" style=\"font-size: 16px; line-height: 24px;\"><strong><u>Windows 版</u></strong></span></a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span class=\"lake-fontsize-12\" data-mce-style=\"font-size: 12px\" style=\"font-size: 16px; line-height: 24px;\">​</span></p><h2 id=\"ddxHZ\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">问题反馈</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：<a href=\"https://github.com/alibaba/lightproxy/issues\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">ps: Whistle 的作者也在群里，欢迎来撩</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-selected\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 188px; height: 248px;\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><h2 id=\"td67O\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png%22%2C%22originWidth%22%3A400%2C%22originHeight%22%3A150%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12307%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A151.33333%2C%22y%22%3A52%2C%22width%22%3A222.66667%2C%22height%22%3A66.666664%2C%22text%22%3A%22shtproxy%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22shtproxy%22%2C%22width%22%3A200%2C%22height%22%3A75%7D\"></card></h2><p><br /></p><p><code>LightProxy</code> 是 <code>IFE</code> 团队开发的一款基于 <code>Electron</code> 和 <code>whistle</code> 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 <code>HTTP</code> 代理使用规则转发、修改每一个请求和响应的内容。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png%22%2C%22originWidth%22%3A1500%2C%22originHeight%22%3A1005%2C%22name%22%3A%22image.png%22%2C%22size%22%3A224010%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A225%2C%22y%22%3A54.6875%2C%22width%22%3A32.8125%2C%22height%22%3A21.875%2C%22text%22%3A%22%E5%8C%95%22%7D%2C%7B%22x%22%3A1245.3125%2C%22y%22%3A56.25%2C%22width%22%3A93.75%2C%22height%22%3A17.1875%2C%22text%22%3A%22%E8%BE%93%E5%85%A5%2F%E7%BB%86%E5%85%A5%E8%A7%82%E5%88%99%22%7D%2C%7B%22x%22%3A304.6875%2C%22y%22%3A82.8125%2C%22width%22%3A384.375%2C%22height%22%3A21.875%2C%22text%22%3A%221%23LightProxyDetaultRules%2C%E5%85%A5%2F%E6%8F%92%E5%85%A5%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A84.375%2C%22y%22%3A98.4375%2C%22width%22%3A64.0625%2C%22height%22%3A17.1875%2C%22text%22%3A%22Default%22%7D%2C%7B%22x%22%3A306.25%2C%22y%22%3A104.6875%2C%22width%22%3A360.9375%2C%22height%22%3A21.875%2C%22text%22%3A%222%E5%88%9D%E5%A7%8B%E8%A7%84%E5%88%99%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%B8%80%E4%BA%9B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8B%E5%B7%A5%E4%BD%9C%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A129.6875%2C%22width%22%3A162.5%2C%22height%22%3A18.75%2C%22text%22%3A%223%23%E5%9C%A8%E6%AF%94%E8%BE%93%E5%85%A5%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A310.9375%2C%22y%22%3A151.5625%2C%22width%22%3A150%2C%22height%22%3A17.1875%2C%22text%22%3A%224%23command%2Bs%E4%BF%9D%E5%AD%98%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A173.4375%2C%22width%22%3A175%2C%22height%22%3A18.75%2C%22text%22%3A%225%23%E5%8F%8C%E5%87%BB%E5%90%AF%E7%94%A8%E6%88%96%E8%80%85%E7%A6%81%E7%94%A8%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A1354.6875%2C%22y%22%3A217.1875%2C%22width%22%3A54.6875%2C%22height%22%3A15.625%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%22%7D%2C%7B%22x%22%3A318.75%2C%22y%22%3A218.75%2C%22width%22%3A110.9375%2C%22height%22%3A18.75%2C%22text%22%3A%22%23hosts%E7%BB%91%E5%AE%9A%22%7D%2C%7B%22x%22%3A309.375%2C%22y%22%3A240.625%2C%22width%22%3A245.3125%2C%22height%22%3A18.75%2C%22text%22%3A%22810.101.73189g.al1cdn.co%22%7D%2C%7B%22x%22%3A307.8125%2C%22y%22%3A259.375%2C%22width%22%3A268.75%2C%22height%22%3A26.5625%2C%22text%22%3A%22148205.215168alicnc%22%7D%2C%7B%22x%22%3A601.5625%2C%22y%22%3A264.0625%2C%22width%22%3A243.75%2C%22height%22%3A20.3125%2C%22text%22%3A%22cmb.alicdn.comu.alicdn.com%22%7D%2C%7B%22x%22%3A1356.25%2C%22y%22%3A300%2C%22width%22%3A53.125%2C%22height%22%3A15.625%2C%22text%22%3A%22%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86%22%7D%2C%7B%22x%22%3A312.5%2C%22y%22%3A306.25%2C%22width%22%3A154.6875%2C%22height%22%3A18.75%2C%22text%22%3A%221%E6%9D%A5%E7%9B%B4%E6%8E%A5%E8%BD%AC%E5%8F%91%E7%BD%91%E9%A1%B5%22%7D%2C%7B%22x%22%3A339.0625%2C%22y%22%3A329.6875%2C%22width%22%3A409.375%2C%22height%22%3A20.3125%2C%22text%22%3A%222H%3A%2F%2FWMAOQGLECOTS%3A%22%7D%2C%7B%22x%22%3A307.8125%2C%22y%22%3A375%2C%22width%22%3A153.125%2C%22height%22%3A15.625%2C%22text%22%3A%2214%E8%BD%AC%E5%8F%91%E5%88%B0%E6%96%87%E4%BB%B6%22%7D%2C%7B%22x%22%3A1365.625%2C%22y%22%3A382.8125%2C%22width%22%3A32.8125%2C%22height%22%3A17.1875%2C%22text%22%3A%22%E8%AE%BE%E7%BD%AE%22%7D%2C%7B%22x%22%3A312.5%2C%22y%22%3A396.875%2C%22width%22%3A454.6875%2C%22height%22%3A18.75%2C%22text%22%3A%2215%23https%3A%2F%2FwwgooqlecofleeXxxxx.html%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A464.0625%2C%22width%22%3A401.5625%2C%22height%22%3A18.75%2C%22text%22%3A%2218https%3A%2F%2F*XXXcomAAeALER%2FXXXXXXhTMI%22%7D%2C%7B%22x%22%3A304.6875%2C%22y%22%3A506.25%2C%22width%22%3A200%2C%22height%22%3A20.3125%2C%22text%22%3A%2220%23%E6%9B%B4%E5%A4%9A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88%E5%8F%82%E7%85%A7%E6%96%87%E6%A1%A3%22%7D%2C%7B%22x%22%3A368.75%2C%22y%22%3A551.5625%2C%22width%22%3A707.8125%2C%22height%22%3A20.3125%2C%22text%22%3A%222disable%3A%2F%2Finterceptattandekont.chh%22%7D%2C%7B%22x%22%3A342.1875%2C%22y%22%3A576.5625%2C%22width%22%3A635.9375%2C%22height%22%3A18.75%2C%22text%22%3A%22stttang.tbaba-ln.comuth-.mmom%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A598.4375%2C%22width%22%3A332.8125%2C%22height%22%3A18.75%2C%22text%22%3A%22static.dingtalk.commac%22%7D%2C%7B%22x%22%3A314.0625%2C%22y%22%3A639.0625%2C%22width%22%3A301.5625%2C%22height%22%3A20.3125%2C%22text%22%3A%2224%23APPLEMacStoreUpdateeTc%22%7D%2C%7B%22x%22%3A332.8125%2C%22y%22%3A662.5%2C%22width%22%3A509.375%2C%22height%22%3A20.3125%2C%22text%22%3A%2225d1sable%3A%2F%2FInterceptppLe.comcomc%22%7D%2C%7B%22x%22%3A287.5%2C%22y%22%3A684.375%2C%22width%22%3A28.125%2C%22height%22%3A21.875%2C%22text%22%3A%2226%22%7D%2C%7B%22x%22%3A1128.125%2C%22y%22%3A884.375%2C%22width%22%3A289.0625%2C%22height%22%3A20.3125%2C%22text%22%3A%22%E4%BB%A3%E7%90%86%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%26%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%3A12338%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%8C%95%20%E8%BE%93%E5%85%A5%2F%E7%BB%86%E5%85%A5%E8%A7%82%E5%88%99%201%23LightProxyDetaultRules%2C%E5%85%A5%2F%E6%8F%92%E5%85%A5%E8%A7%84%E5%88%99%20Default%202%E5%88%9D%E5%A7%8B%E8%A7%84%E5%88%99%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%B8%80%E4%BA%9B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8B%E5%B7%A5%E4%BD%9C%203%23%E5%9C%A8%E6%AF%94%E8%BE%93%E5%85%A5%E8%A7%84%E5%88%99%204%23command%2Bs%E4%BF%9D%E5%AD%98%205%23%E5%8F%8C%E5%87%BB%E5%90%AF%E7%94%A8%E6%88%96%E8%80%85%E7%A6%81%E7%94%A8%E8%A7%84%E5%88%99%20%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%20%23hosts%E7%BB%91%E5%AE%9A%20810.101.73189g.al1cdn.co%20148205.215168alicnc%20cmb.alicdn.comu.alicdn.com%20%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86%201%E6%9D%A5%E7%9B%B4%E6%8E%A5%E8%BD%AC%E5%8F%91%E7%BD%91%E9%A1%B5%202H%3A%2F%2FWMAOQGLECOTS%3A%2014%E8%BD%AC%E5%8F%91%E5%88%B0%E6%96%87%E4%BB%B6%20%E8%AE%BE%E7%BD%AE%2015%23https%3A%2F%2FwwgooqlecofleeXxxxx.html%2018https%3A%2F%2F*XXXcomAAeALER%2FXXXXXXhTMI%2020%23%E6%9B%B4%E5%A4%9A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88%E5%8F%82%E7%85%A7%E6%96%87%E6%A1%A3%202disable%3A%2F%2Finterceptattandekont.chh%20stttang.tbaba-ln.comuth-.mmom%20static.dingtalk.commac%2024%23APPLEMacStoreUpdateeTc%2025d1sable%3A%2F%2FInterceptppLe.comcomc%2026%20%E4%BB%A3%E7%90%86%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%26%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%3A12338%22%2C%22width%22%3A525%2C%22height%22%3A352%7D\"></card></p><h2 id=\"vz7QC\"><br /></h2><h2 id=\"NJPM5\">为什么需要一个代理工具</h2><p><strong>因为代理工具能够让你随心所欲的掌控自己当前的开发环境。</strong></p><p><br /></p><p><strong>开发环境</strong>是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都<strong>让一个非常简单的需求轻松消耗掉数天的时间</strong>。</p><p><br /></p><p>当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 <code>build</code> 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。</p><p><br /></p><blockquote><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png%22%2C%22originWidth%22%3A211%2C%22originHeight%22%3A239%2C%22name%22%3A%22image.png%22%2C%22size%22%3A134204%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A105.5%2C%22height%22%3A120%7D\"></card></p><p><br /></p><p><span style=\"color: #222222;\"><span>希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。</span></span></p></blockquote><p><br /></p><p>当你的接口和页面突然不能工作时，代理工具可以快速 <code>mock</code> 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。</p><p><br /></p><h2 id=\"CJSHA\">什么是好的开发环境</h2><p>既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。</p><p><br /></p><h3 id=\"UmNIw\">稳定</h3><p>好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。</p><p>依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。</p><p><br /></p><h3 id=\"JgdYr\">快速验证</h3><p>修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 <code>Hot reload</code> 和更高级的 <code>HMR</code> 。</p><p><br /></p><p>有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。</p><p><br /></p><p>这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png%22%2C%22originWidth%22%3A225%2C%22originHeight%22%3A224%2C%22name%22%3A%22image.png%22%2C%22size%22%3A100533%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1.3333334%2C%22y%22%3A0.6666667%2C%22width%22%3A121.3333306%2C%22height%22%3A19.3333333%2C%22text%22%3A%22%E4%B8%80%E6%9D%AF%E8%8C%B6%2C%E4%B8%80%E5%8C%85%E7%83%9F%2C%22%7D%2C%7B%22x%22%3A89.333336%2C%22y%22%3A22%2C%22width%22%3A122.666664%2C%22height%22%3A18.666668%2C%22text%22%3A%22%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E5%A4%A9.%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%80%E6%9D%AF%E8%8C%B6%2C%E4%B8%80%E5%8C%85%E7%83%9F%2C%20%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E5%A4%A9.%22%2C%22width%22%3A112.5%2C%22height%22%3A112%7D\"></card></p><p><br /></p><h3 id=\"r9l9z\">和线上的一致性</h3><p>很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 <code>DEMO</code> 页面，最后开发完再搬到线上。</p><p><br /></p><p>这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 <code>if-else</code> 的逻辑，例如最常见的：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20API_BASE%20%3D%20utils.isDaily%20%3F%20'http%3A%2F%2Flocalhost%3A7001%3A'%3A%20'https%3A%2F%2Fxxxx%2F'%3B%22%2C%22id%22%3A%22pYW11%22%7D\"></card><p><br /></p><p>这种情况也往往导致 <code>Bug</code> 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。</p><p><br /></p><h3 id=\"3MNL0\">确定性</h3><p>开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。</p><p><br /></p><p>有些情况下我们利用 <code>hosts</code> 切换工具来进行联调，但在切完 <code>hosts</code> 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。</p><p><br /></p><p>这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。</p><p><br /></p><h2 id=\"6aYPs\">LightProxy 如何解决这些问题</h2><p>那么 <code>LightProxy</code> 要如何解决上面的这些问题呢</p><p><br /></p><p><code>LightProxy</code> 通过基于 <code>whistle</code> 的代理能力，能够任意修改开发环境中的 <code>request</code> 和 <code>response</code> 。</p><p><br /></p><h3 id=\"WxTiC\">举个例子</h3><p>例如当我们需要在线上页面中加入一个 <code>DIV</code> ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 <code>LightProxy</code> 我们只需要使用：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fwww.alibaba.com%2F%20htmlPrepend%3A%2F%2F(%3Cdiv%3Etest%3C%2Fdiv%3E)%22%2C%22id%22%3A%22HkZn9%22%7D\"></card><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png%22%2C%22originWidth%22%3A1099%2C%22originHeight%22%3A278%2C%22name%22%3A%22image.png%22%2C%22size%22%3A93886%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A22.895834%2C%22y%22%3A11.447917%2C%22width%22%3A138.51978599999998%2C%22height%22%3A16.027083%2C%22text%22%3A%22cdivtest%2Fdiv%E4%B8%80%24%22%7D%2C%7B%22x%22%3A288.4875%2C%22y%22%3A26.330208%2C%22width%22%3A477.37809999999996%2C%22height%22%3A17.171875%2C%22text%22%3A%22%2F%2FINGOLCRK4%22%7D%2C%7B%22x%22%3A44.646873%2C%22y%22%3A43.502083%2C%22width%22%3A485.39162699999997%2C%22height%22%3A16.027084000000002%2C%22text%22%3A%22metacontent%5C%22text%2Fhtml%3Bcharseteutf-8%5C%22httpequivontnt-Type%22%7D%2C%7B%22x%22%3A18.316666%2C%22y%22%3A58.384377%2C%22width%22%3A373.202074%2C%22height%22%3A16.027083000000005%2C%22text%22%3A%22titleentitleo%22%7D%2C%7B%22x%22%3A38.922916%2C%22y%22%3A75.55625%2C%22width%22%3A493.40518399999996%2C%22height%22%3A14.882289999999998%2C%22text%22%3A%22netaname%5C%22kewwordscontent%5C%22MnUfacturersSup%22%7D%2C%7B%22x%22%3A540.3417%2C%22y%22%3A75.55625%2C%22width%22%3A512.8667%2C%22height%22%3A16.027085999999997%2C%22text%22%3A%22smotersuc%22%7D%2C%7B%22x%22%3A65.25313%2C%22y%22%3A92.72813%2C%22width%22%3A469.36457%2C%22height%22%3A13.737490000000008%2C%22text%22%3A%22metaname%5C%22descriptioncontent%5C%22FindquattyMuoctures%2CSue%22%7D%2C%7B%22x%22%3A554.07916%2C%22y%22%3A92.72813%2C%22width%22%3A523.16974%2C%22height%22%3A14.882280000000009%2C%22text%22%3A%22iers%2CEXpoRtRSmte%2C%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A106.46562%2C%22width%22%3A127.071876%2C%22height%22%3A13.737504999999999%2C%22text%22%3A%22alibaba.com%3E%22%7D%2C%7B%22x%22%3A35.48854%2C%22y%22%3A123.6375%2C%22width%22%3A368.62291%2C%22height%22%3A14.882289999999998%2C%22text%22%3A%22metahttp-equiv%5C%22x-dnsprefetch-controtucontente%5C%22on%22%7D%2C%7B%22x%22%3A36.63333%2C%22y%22%3A139.66458%2C%22width%22%3A317.1073%2C%22height%22%3A13.737500000000011%2C%22text%22%3A%22cuinkrel-%5C%22dns-prefetch%5C%22href-%5C%22u%2Fi.alicdn.com%5C%22%22%7D%2C%7B%22x%22%3A32.054165%2C%22y%22%3A154.54688%2C%22width%22%3A331.989595%2C%22height%22%3A16.027080000000012%2C%22text%22%3A%22%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2Fbealicdn.com%22%7D%2C%7B%22x%22%3A27.475%2C%22y%22%3A170.57396%2C%22width%22%3A325.12082999999996%2C%22height%22%3A14.882290000000012%2C%22text%22%3A%22clinkrel-%5C%22dns-prefetch%5C%22href-%2F%2Fis.olicdn.com%5C%22%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A186.60104%2C%22width%22%3A356.03019600000005%2C%22height%22%3A14.882299999999987%2C%22text%22%3A%22linkrel-%5C%22dns-prefetch%5C%22href-y%2Fu.alicdn.com%5C%22%22%7D%2C%7B%22x%22%3A20.60625%2C%22y%22%3A203.77292%2C%22width%22%3A326.26565%2C%22height%22%3A12.592710000000011%2C%22text%22%3A%22%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fg.alicdn.com'%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A219.8%2C%22width%22%3A322.831246%2C%22height%22%3A11.447909999999979%2C%22text%22%3A%22%3Ciinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fassetslicdn.co%22%7D%2C%7B%22x%22%3A24.040625%2C%22y%22%3A235.82709%2C%22width%22%3A389.22915500000005%2C%22height%22%3A12.592690000000005%2C%22text%22%3A%22Linkrel-%5C%22dns-prefetch%5C%22href%5C%22%2Fimg.aticdn.com%22%7D%2C%7B%22x%22%3A27.475%2C%22y%22%3A251.85417%2C%22width%22%3A394.95313%2C%22height%22%3A13.737500000000011%2C%22text%22%3A%22linkrei%5C%22dns-prefetch%5C%22href-%5C%22%2Fcmap.atibaba.com%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22cdivtest%2Fdiv%E4%B8%80%24%20%2F%2FINGOLCRK4%20metacontent%5C%22text%2Fhtml%3Bcharseteutf-8%5C%22httpequivontnt-Type%20titleentitleo%20netaname%5C%22kewwordscontent%5C%22MnUfacturersSup%20smotersuc%20metaname%5C%22descriptioncontent%5C%22FindquattyMuoctures%2CSue%20iers%2CEXpoRtRSmte%2C%20alibaba.com%3E%20metahttp-equiv%5C%22x-dnsprefetch-controtucontente%5C%22on%20cuinkrel-%5C%22dns-prefetch%5C%22href-%5C%22u%2Fi.alicdn.com%5C%22%20%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2Fbealicdn.com%20clinkrel-%5C%22dns-prefetch%5C%22href-%2F%2Fis.olicdn.com%5C%22%20linkrel-%5C%22dns-prefetch%5C%22href-y%2Fu.alicdn.com%5C%22%20%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fg.alicdn.com'%20%3Ciinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fassetslicdn.co%20Linkrel-%5C%22dns-prefetch%5C%22href%5C%22%2Fimg.aticdn.com%20linkrei%5C%22dns-prefetch%5C%22href-%5C%22%2Fcmap.atibaba.com%22%2C%22width%22%3A549.5%2C%22height%22%3A139%7D\"></card></p><p><br /></p><p>就可以在一个线上的页面中插入一个 <code>div</code> 。</p><p><br /></p><p>同样的，我们可以直接把页面中的一个 <code>JS</code> 转发到本地一个开发中的文件</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fwww.google.com%2Fxx.js%20file%3A%2F%2F%2FUser%2Fxxx%2Fxxx.js%22%2C%22id%22%3A%22bDifr%22%7D\"></card><p><br /></p><p>当后端缺少 <code>CORS</code> 头时，我们可以直接给它先加上 <code>CORS</code> 头</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fxxx.com%2Fxx.json%20resCors%3A%2F%2F%20%23%20%E7%BB%99%E5%93%8D%E5%BA%94%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A2%9E%E5%8A%A0%20CORS%20header%22%2C%22id%22%3A%22Zw7hJ%22%7D\"></card><p><br /></p><p>也可以直接把某个文件变成一个内联的文字，只要用类似 <code>ES6</code> 字符串框起来</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fxxx.com%2Fxx.json%20%60test%20text%60%22%2C%22id%22%3A%223rzMc%22%7D\"></card><p><br /></p><p>总体来说，<code><span>LightProxy</span></code> 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。</p><p><br /></p><p>甚至于，你可以自己用 <code>NodeJS</code> 书写针对某个规则的响应：<a href=\"https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8\" target=\"_blank\">使用 NodeJS 编写规则</a></p><p><br /></p><h2 id=\"DTTMJ\">快速确认</h2><p>为了能够快速确认代理是否按预期工作，我们在经过 <code><span>LightProxy</span></code> 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png%22%2C%22originWidth%22%3A1022%2C%22originHeight%22%3A170%2C%22name%22%3A%22image.png%22%2C%22size%22%3A29831%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A229.95%2C%22y%22%3A2.1291666%2C%22width%22%3A540.80836%2C%22height%22%3A26.614583399999997%2C%22text%22%3A%22lp%3ASeehttps%3A%2F%2Fgithub.com%2Fatibaba%2Flightrox%22%7D%2C%7B%22x%22%3A29.808334%2C%22y%22%3A3.19375%2C%22width%22%3A178.850006%2C%22height%22%3A24.485416999999998%2C%22text%22%3A%22lightproxy-help_%22%7D%2C%7B%22x%22%3A59.61667%2C%22y%22%3A45.777084%2C%22width%22%3A409.86459%2C%22height%22%3A23.420829999999995%2C%22text%22%3A%22lightproxy-host-ip_180101.12%22%7D%2C%7B%22x%22%3A86.23125%2C%22y%22%3A87.29584%2C%22width%22%3A472.675%2C%22height%22%3A23.420829999999995%2C%22text%22%3A%22ghtproxy-real-urlhttp%2Fwww.aidu.com%22%7D%2C%7B%22x%22%3A25.55%2C%22y%22%3A130.94376%2C%22width%22%3A301.27709999999996%2C%22height%22%3A22.356240000000014%2C%22text%22%3A%22lightproxy-rulesone%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22lp%3ASeehttps%3A%2F%2Fgithub.com%2Fatibaba%2Flightrox%20lightproxy-help_%20lightproxy-host-ip_180101.12%20ghtproxy-real-urlhttp%2Fwww.aidu.com%20lightproxy-rulesone%22%2C%22width%22%3A511%2C%22height%22%3A85%7D\"></card></p><p><br /></p><h2 id=\"SASae\">没有银弹</h2><p>虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。</p><p><br /></p><p>这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。</p><p><br /></p><h2 id=\"19TAe\">开始 &amp; 下载</h2><p>说了这么多，开始使用 <code>LightProxy</code> 控制你的开发环境吧：<a href=\"https://github.com/alibaba/lightproxy\" target=\"_blank\">https://github.com/alibaba/lightproxy</a></p><p><br /></p><h3 id=\"B9W04\">下载</h3><p><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg\" target=\"_blank\"><span class=\"lake-fontsize-12\"><strong><u>macOS 版</u></strong></span></a></p><p><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe\" target=\"_blank\"><span class=\"lake-fontsize-12\"><strong><u>Windows 版</u></strong></span></a></p><p><span class=\"lake-fontsize-12\"></span></p><h2 id=\"ddxHZ\">问题反馈</h2><p>欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：<a href=\"https://github.com/alibaba/lightproxy/issues\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues</a></p><p><br /></p><blockquote><p>ps: Whistle 的作者也在群里，欢迎来撩</p></blockquote><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png%22%2C%22originWidth%22%3A970%2C%22originHeight%22%3A1280%2C%22name%22%3A%22image.png%22%2C%22size%22%3A338210%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A118.666664%2C%22y%22%3A129.33333%2C%22width%22%3A416.000036%2C%22height%22%3A50.66667000000001%2C%22text%22%3A%22LightProxy%E5%BC%80%E6%BA%90%E7%BE%A4%22%7D%2C%7B%22x%22%3A766.6667%2C%22y%22%3A129.33333%2C%22width%22%3A60%2C%22height%22%3A60%2C%22text%22%3A%22L%22%7D%2C%7B%22x%22%3A117.333336%2C%22y%22%3A190.66667%2C%22width%22%3A58.666664%2C%22height%22%3A32%2C%22text%22%3A%223%E4%BA%BA%22%7D%2C%7B%22x%22%3A264%2C%22y%22%3A1144%2C%22width%22%3A470.6667%2C%22height%22%3A33.33339999999998%2C%22text%22%3A%22%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22LightProxy%E5%BC%80%E6%BA%90%E7%BE%A4%20L%203%E4%BA%BA%20%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%2C%22width%22%3A188%2C%22height%22%3A248%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-01-06T02:30:12.000Z",
    "deleted_at": null,
    "created_at": "2020-01-05T06:21:54.000Z",
    "updated_at": "2020-01-06T02:30:13.000Z",
    "published_at": "2020-01-06T02:30:12.000Z",
    "first_published_at": "2020-01-06T02:30:12.000Z",
    "word_count": 1755,
    "cover": "",
    "description": "LightProxy 是 IFE 团队开发的一款基于 Electron 和 whistle 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 HTTP 代理使用规则转发、修改每一个请求和响应的内容。为什么需要一个代理工具因为代理工具能够让你随心所欲的掌控自己当前的开发...",
    "custom_description": "LightProxy 是 IFE 团队开发的一款基于 Electron 和 whistle 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 HTTP 代理使用规则转发、修改每一个请求和响应的内容。为什么需要一个代理工具因为代理工具能够让你随心所欲的掌控自己当前的开发...",
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 3982499,
    "slug": "lightproxy",
    "title": "LightProxy 全能代理抓包工具",
    "book_id": 653495,
    "book": {
      "id": 653495,
      "type": "Column",
      "slug": "blog",
      "name": "blog",
      "user_id": 236311,
      "description": "",
      "creator_id": 236311,
      "public": 0,
      "items_count": 2,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2020-01-06T03:11:10.356Z",
      "updated_at": "2020-01-06T03:11:10.000Z",
      "created_at": "2019-12-24T14:26:42.000Z",
      "namespace": "xcodebuild/blog",
      "user": {
        "id": 236311,
        "type": "User",
        "login": "xcodebuild",
        "name": "xcodebuIld",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 1,
        "public_books_count": 0,
        "followers_count": 1,
        "following_count": 0,
        "created_at": "2019-01-03T03:16:21.000Z",
        "updated_at": "2019-12-24T14:26:42.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 236311,
    "creator": {
      "id": 236311,
      "type": "User",
      "login": "xcodebuild",
      "name": "xcodebuIld",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/236311/1546508350871-89a1db68-50d3-4776-9b7b-97ba81a8dfbe.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 1,
      "public_books_count": 0,
      "followers_count": 1,
      "following_count": 0,
      "created_at": "2019-01-03T03:16:21.000Z",
      "updated_at": "2019-12-24T14:26:42.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "> 原文地址：[https://github.com/alibaba/lightproxy/issues/19](https://github.com/alibaba/lightproxy/issues/19)\n\n<a name=\"u8H7E\"></a>\n## ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png#align=left&display=inline&height=75&name=image.png&originHeight=150&originWidth=400&size=12307&status=done&style=none&width=200)\n\n`LightProxy` 是 `IFE` 团队开发的一款基于 `Electron` 和 `whistle` 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 `HTTP` 代理使用规则转发、修改每一个请求和响应的内容。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png#align=left&display=inline&height=352&name=image.png&originHeight=1005&originWidth=1500&size=224010&status=done&style=none&width=525)\n<a name=\"vz7QC\"></a>\n## \n<a name=\"NJPM5\"></a>\n## 为什么需要一个代理工具\n**因为代理工具能够让你随心所欲的掌控自己当前的开发环境。**\n\n**开发环境**是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都**让一个非常简单的需求轻松消耗掉数天的时间**。\n\n当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 `build` 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。\n\n> ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png#align=left&display=inline&height=120&name=image.png&originHeight=239&originWidth=211&size=134204&status=done&style=none&width=105.5)\n> \n> 希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。\n\n\n当你的接口和页面突然不能工作时，代理工具可以快速 `mock` 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。\n\n<a name=\"CJSHA\"></a>\n## 什么是好的开发环境\n既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。\n\n<a name=\"UmNIw\"></a>\n### 稳定\n好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。<br />依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。\n\n<a name=\"JgdYr\"></a>\n### 快速验证\n修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 `Hot reload` 和更高级的 `HMR` 。\n\n有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。\n\n这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png#align=left&display=inline&height=112&name=image.png&originHeight=224&originWidth=225&size=100533&status=done&style=none&width=112.5)\n\n<a name=\"r9l9z\"></a>\n### 和线上的一致性\n很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 `DEMO` 页面，最后开发完再搬到线上。\n\n这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 `if-else` 的逻辑，例如最常见的：\n\n```javascript\nconst API_BASE = utils.isDaily ? 'http://localhost:7001:': 'https://xxxx/';\n```\n\n这种情况也往往导致 `Bug` 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。\n\n<a name=\"3MNL0\"></a>\n### 确定性\n开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。\n\n有些情况下我们利用 `hosts` 切换工具来进行联调，但在切完 `hosts` 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。\n\n这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。\n\n<a name=\"6aYPs\"></a>\n## LightProxy 如何解决这些问题\n那么 `LightProxy` 要如何解决上面的这些问题呢\n\n`LightProxy` 通过基于 `whistle` 的代理能力，能够任意修改开发环境中的 `request` 和 `response` 。\n\n<a name=\"WxTiC\"></a>\n### 举个例子\n例如当我们需要在线上页面中加入一个 `DIV` ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 `LightProxy` 我们只需要使用：\n\n```javascript\nhttps://www.alibaba.com/ htmlPrepend://(<div>test</div>)\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png#align=left&display=inline&height=139&name=image.png&originHeight=278&originWidth=1099&size=93886&status=done&style=none&width=549.5)\n\n就可以在一个线上的页面中插入一个 `div` 。\n\n同样的，我们可以直接把页面中的一个 `JS` 转发到本地一个开发中的文件\n\n```javascript\nhttps://www.google.com/xx.js file:///User/xxx/xxx.js\n```\n\n当后端缺少 `CORS` 头时，我们可以直接给它先加上 `CORS` 头\n\n```javascript\nhttps://xxx.com/xx.json resCors:// # 给响应的请求增加 CORS header\n```\n\n也可以直接把某个文件变成一个内联的文字，只要用类似 `ES6` 字符串框起来\n\n```javascript\nhttps://xxx.com/xx.json `test text`\n```\n\n总体来说，`LightProxy` 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。\n\n甚至于，你可以自己用 `NodeJS` 书写针对某个规则的响应：[使用 NodeJS 编写规则](https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8)\n\n<a name=\"DTTMJ\"></a>\n## 快速确认\n为了能够快速确认代理是否按预期工作，我们在经过 `LightProxy` 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png#align=left&display=inline&height=85&name=image.png&originHeight=170&originWidth=1022&size=29831&status=done&style=none&width=511)\n\n<a name=\"SASae\"></a>\n## 没有银弹\n虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。\n\n这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。\n\n<a name=\"19TAe\"></a>\n## 开始 & 下载\n说了这么多，开始使用 `LightProxy` 控制你的开发环境吧：[https://github.com/alibaba/lightproxy](https://github.com/alibaba/lightproxy)\n\n<a name=\"B9W04\"></a>\n### 下载\n[**macOS 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg)<br />[**Windows 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe)\n\n<a name=\"ddxHZ\"></a>\n## 问题反馈\n欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：[https://github.com/alibaba/lightproxy/issues](https://github.com/alibaba/lightproxy/issues)\n\n> ps: Whistle 的作者也在群里，欢迎来撩\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png#align=left&display=inline&height=248&name=image.png&originHeight=1280&originWidth=970&size=338210&status=done&style=none&width=188)\n",
    "body_draft": "> 原文地址：[https://github.com/alibaba/lightproxy/issues/19](https://github.com/alibaba/lightproxy/issues/19)\n\n<a name=\"u8H7E\"></a>\n## ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png#align=left&display=inline&height=75&name=image.png&originHeight=150&originWidth=400&size=12307&status=done&style=none&width=200)\n\n`LightProxy` 是 `IFE` 团队开发的一款基于 `Electron` 和 `whistle` 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 `HTTP` 代理使用规则转发、修改每一个请求和响应的内容。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png#align=left&display=inline&height=352&name=image.png&originHeight=1005&originWidth=1500&size=224010&status=done&style=none&width=525)\n<a name=\"vz7QC\"></a>\n## \n<a name=\"NJPM5\"></a>\n## 为什么需要一个代理工具\n**因为代理工具能够让你随心所欲的掌控自己当前的开发环境。**\n\n**开发环境**是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都**让一个非常简单的需求轻松消耗掉数天的时间**。\n\n当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 `build` 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。\n\n> ![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png#align=left&display=inline&height=120&name=image.png&originHeight=239&originWidth=211&size=134204&status=done&style=none&width=105.5)\n> \n> 希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。\n\n\n当你的接口和页面突然不能工作时，代理工具可以快速 `mock` 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。\n\n<a name=\"CJSHA\"></a>\n## 什么是好的开发环境\n既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。\n\n<a name=\"UmNIw\"></a>\n### 稳定\n好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。<br />依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。\n\n<a name=\"JgdYr\"></a>\n### 快速验证\n修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 `Hot reload` 和更高级的 `HMR` 。\n\n有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。\n\n这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png#align=left&display=inline&height=112&name=image.png&originHeight=224&originWidth=225&size=100533&status=done&style=none&width=112.5)\n\n<a name=\"r9l9z\"></a>\n### 和线上的一致性\n很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 `DEMO` 页面，最后开发完再搬到线上。\n\n这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 `if-else` 的逻辑，例如最常见的：\n\n```javascript\nconst API_BASE = utils.isDaily ? 'http://localhost:7001:': 'https://xxxx/';\n```\n\n这种情况也往往导致 `Bug` 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。\n\n<a name=\"3MNL0\"></a>\n### 确定性\n开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。\n\n有些情况下我们利用 `hosts` 切换工具来进行联调，但在切完 `hosts` 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。\n\n这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。\n\n<a name=\"6aYPs\"></a>\n## LightProxy 如何解决这些问题\n那么 `LightProxy` 要如何解决上面的这些问题呢\n\n`LightProxy` 通过基于 `whistle` 的代理能力，能够任意修改开发环境中的 `request` 和 `response` 。\n\n<a name=\"WxTiC\"></a>\n### 举个例子\n例如当我们需要在线上页面中加入一个 `DIV` ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 `LightProxy` 我们只需要使用：\n\n```javascript\nhttps://www.alibaba.com/ htmlPrepend://(<div>test</div>)\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png#align=left&display=inline&height=139&name=image.png&originHeight=278&originWidth=1099&size=93886&status=done&style=none&width=549.5)\n\n就可以在一个线上的页面中插入一个 `div` 。\n\n同样的，我们可以直接把页面中的一个 `JS` 转发到本地一个开发中的文件\n\n```javascript\nhttps://www.google.com/xx.js file:///User/xxx/xxx.js\n```\n\n当后端缺少 `CORS` 头时，我们可以直接给它先加上 `CORS` 头\n\n```javascript\nhttps://xxx.com/xx.json resCors:// # 给响应的请求增加 CORS header\n```\n\n也可以直接把某个文件变成一个内联的文字，只要用类似 `ES6` 字符串框起来\n\n```javascript\nhttps://xxx.com/xx.json `test text`\n```\n\n总体来说，`LightProxy` 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。\n\n甚至于，你可以自己用 `NodeJS` 书写针对某个规则的响应：[使用 NodeJS 编写规则](https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8)\n\n<a name=\"DTTMJ\"></a>\n## 快速确认\n为了能够快速确认代理是否按预期工作，我们在经过 `LightProxy` 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png#align=left&display=inline&height=85&name=image.png&originHeight=170&originWidth=1022&size=29831&status=done&style=none&width=511)\n\n<a name=\"SASae\"></a>\n## 没有银弹\n虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。\n\n这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。\n\n<a name=\"19TAe\"></a>\n## 开始 & 下载\n说了这么多，开始使用 `LightProxy` 控制你的开发环境吧：[https://github.com/alibaba/lightproxy](https://github.com/alibaba/lightproxy)\n\n<a name=\"B9W04\"></a>\n### 下载\n[**macOS 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg)<br />[**Windows 版**](https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe)\n\n<a name=\"ddxHZ\"></a>\n## 问题反馈\n欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：[https://github.com/alibaba/lightproxy/issues](https://github.com/alibaba/lightproxy/issues)\n\n> ps: Whistle 的作者也在群里，欢迎来撩\n\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png#align=left&display=inline&height=248&name=image.png&originHeight=1280&originWidth=970&size=338210&status=done&style=none&width=188)\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine\" data-lake-element=\"root\" data-selection-236311=\"%7B%22path%22%3A%5B%5B0%2C0%2C1%2C0%2C47%5D%2C%5B0%2C0%2C1%2C0%2C47%5D%5D%2C%22uuid%22%3A%22236311%22%2C%22active%22%3Atrue%7D\"><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">原文地址：<a href=\"https://github.com/alibaba/lightproxy/issues/19\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues/19</a></p></blockquote><h2 id=\"u8H7E\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 200px; height: 75px;\"></span></h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;是 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">IFE</code>&nbsp;团队开发的一款基于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Electron</code>&nbsp;和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">whistle</code>&nbsp;的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">HTTP</code>&nbsp;代理使用规则转发、修改每一个请求和响应的内容。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 525px; height: 352px;\"></span></p><h2 id=\"vz7QC\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><br></h2><h2 id=\"NJPM5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">为什么需要一个代理工具</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>因为代理工具能够让你随心所欲的掌控自己当前的开发环境。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>开发环境</strong>是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都<strong>让一个非常简单的需求轻松消耗掉数天的时间</strong>。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">build</code> 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 105.5px; height: 120px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span style=\"color: #222222;\"><span>希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。</span></span></p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当你的接口和页面突然不能工作时，代理工具可以快速 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">mock</code>&nbsp;一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"CJSHA\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">什么是好的开发环境</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"UmNIw\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">稳定</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"JgdYr\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">快速验证</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Hot reload</code>&nbsp;和更高级的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">HMR</code>&nbsp;。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 112.5px; height: 112px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"r9l9z\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">和线上的一致性</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">DEMO</code>&nbsp;页面，最后开发完再搬到线上。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">if-else</code>&nbsp;的逻辑，例如最常见的：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"pYW11\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">API_BASE</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">utils</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">isDaily</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">?</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'http://localhost:7001:'</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'https://xxxx/'</span>;</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种情况也往往导致 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Bug</code>&nbsp;非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"3MNL0\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">确定性</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">有些情况下我们利用&nbsp;<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">hosts</code>&nbsp;切换工具来进行联调，但在切完 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">hosts</code>&nbsp;后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"6aYPs\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">LightProxy 如何解决这些问题</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">那么&nbsp;<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;要如何解决上面的这些问题呢</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;通过基于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">whistle</code>&nbsp;的代理能力，能够任意修改开发环境中的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">request</code>&nbsp;和 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">response</code>&nbsp;。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"WxTiC\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">举个例子</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">例如当我们需要在线上页面中加入一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">DIV</code>&nbsp;，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;我们只需要使用：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"HkZn9\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//www.alibaba.com/ htmlPrepend://(&lt;div&gt;test&lt;/div&gt;)</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 549.5px; height: 139px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">就可以在一个线上的页面中插入一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">div</code>&nbsp;。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">同样的，我们可以直接把页面中的一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">JS</code>&nbsp;转发到本地一个开发中的文件</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"bDifr\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//www.google.com/xx.js file:///User/xxx/xxx.js</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当后端缺少 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">CORS</code>&nbsp;头时，我们可以直接给它先加上 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">CORS</code>&nbsp;头</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"Zw7hJ\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//xxx.com/xx.json resCors:// # 给响应的请求增加 CORS header</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">也可以直接把某个文件变成一个内联的文字，只要用类似 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">ES6</code>&nbsp;字符串框起来</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"3rzMc\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https</span>:<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//xxx.com/xx.json `test text`</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">总体来说，<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>LightProxy</span></code> 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">甚至于，你可以自己用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">NodeJS</code>&nbsp;书写针对某个规则的响应：<a href=\"https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8\" target=\"_blank\">使用 NodeJS 编写规则</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"DTTMJ\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">快速确认</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">为了能够快速确认代理是否按预期工作，我们在经过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>LightProxy</span></code> 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 511px; height: 85px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"SASae\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">没有银弹</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"19TAe\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">开始 &amp; 下载</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">说了这么多，开始使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">LightProxy</code>&nbsp;控制你的开发环境吧：<a href=\"https://github.com/alibaba/lightproxy\" target=\"_blank\">https://github.com/alibaba/lightproxy</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"B9W04\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">下载</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg\" target=\"_blank\"><span class=\"lake-fontsize-12\" data-mce-style=\"font-size: 12px\" style=\"font-size: 16px; line-height: 24px;\"><strong><u>macOS 版</u></strong></span></a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe\" target=\"_blank\"><span class=\"lake-fontsize-12\" data-mce-style=\"font-size: 12px\" style=\"font-size: 16px; line-height: 24px;\"><strong><u>Windows 版</u></strong></span></a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"ddxHZ\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">问题反馈</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：<a href=\"https://github.com/alibaba/lightproxy/issues\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">ps: Whistle 的作者也在群里，欢迎来撩</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2020/png/236311/1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; border: none; box-shadow: none; width: 188px; height: 248px;\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><blockquote><p>原文地址：<a href=\"https://github.com/alibaba/lightproxy/issues/19\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues/19</a></p></blockquote><h2 id=\"u8H7E\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578205382432-2c9cc104-2fef-4ea8-b31e-951cbee73da4.png%22%2C%22originWidth%22%3A400%2C%22originHeight%22%3A150%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12307%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A151.33333%2C%22y%22%3A52%2C%22width%22%3A222.66667%2C%22height%22%3A66.666664%2C%22text%22%3A%22shtproxy%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22shtproxy%22%2C%22width%22%3A200%2C%22height%22%3A75%7D\"></card></h2><p><br /></p><p><code>LightProxy</code> 是 <code>IFE</code> 团队开发的一款基于 <code>Electron</code> 和 <code>whistle</code> 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 <code>HTTP</code> 代理使用规则转发、修改每一个请求和响应的内容。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578205761175-e5d216c9-dd52-4d73-98de-d8638791f017.png%22%2C%22originWidth%22%3A1500%2C%22originHeight%22%3A1005%2C%22name%22%3A%22image.png%22%2C%22size%22%3A224010%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A225%2C%22y%22%3A54.6875%2C%22width%22%3A32.8125%2C%22height%22%3A21.875%2C%22text%22%3A%22%E5%8C%95%22%7D%2C%7B%22x%22%3A1245.3125%2C%22y%22%3A56.25%2C%22width%22%3A93.75%2C%22height%22%3A17.1875%2C%22text%22%3A%22%E8%BE%93%E5%85%A5%2F%E7%BB%86%E5%85%A5%E8%A7%82%E5%88%99%22%7D%2C%7B%22x%22%3A304.6875%2C%22y%22%3A82.8125%2C%22width%22%3A384.375%2C%22height%22%3A21.875%2C%22text%22%3A%221%23LightProxyDetaultRules%2C%E5%85%A5%2F%E6%8F%92%E5%85%A5%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A84.375%2C%22y%22%3A98.4375%2C%22width%22%3A64.0625%2C%22height%22%3A17.1875%2C%22text%22%3A%22Default%22%7D%2C%7B%22x%22%3A306.25%2C%22y%22%3A104.6875%2C%22width%22%3A360.9375%2C%22height%22%3A21.875%2C%22text%22%3A%222%E5%88%9D%E5%A7%8B%E8%A7%84%E5%88%99%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%B8%80%E4%BA%9B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8B%E5%B7%A5%E4%BD%9C%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A129.6875%2C%22width%22%3A162.5%2C%22height%22%3A18.75%2C%22text%22%3A%223%23%E5%9C%A8%E6%AF%94%E8%BE%93%E5%85%A5%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A310.9375%2C%22y%22%3A151.5625%2C%22width%22%3A150%2C%22height%22%3A17.1875%2C%22text%22%3A%224%23command%2Bs%E4%BF%9D%E5%AD%98%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A173.4375%2C%22width%22%3A175%2C%22height%22%3A18.75%2C%22text%22%3A%225%23%E5%8F%8C%E5%87%BB%E5%90%AF%E7%94%A8%E6%88%96%E8%80%85%E7%A6%81%E7%94%A8%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A1354.6875%2C%22y%22%3A217.1875%2C%22width%22%3A54.6875%2C%22height%22%3A15.625%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%22%7D%2C%7B%22x%22%3A318.75%2C%22y%22%3A218.75%2C%22width%22%3A110.9375%2C%22height%22%3A18.75%2C%22text%22%3A%22%23hosts%E7%BB%91%E5%AE%9A%22%7D%2C%7B%22x%22%3A309.375%2C%22y%22%3A240.625%2C%22width%22%3A245.3125%2C%22height%22%3A18.75%2C%22text%22%3A%22810.101.73189g.al1cdn.co%22%7D%2C%7B%22x%22%3A307.8125%2C%22y%22%3A259.375%2C%22width%22%3A268.75%2C%22height%22%3A26.5625%2C%22text%22%3A%22148205.215168alicnc%22%7D%2C%7B%22x%22%3A601.5625%2C%22y%22%3A264.0625%2C%22width%22%3A243.75%2C%22height%22%3A20.3125%2C%22text%22%3A%22cmb.alicdn.comu.alicdn.com%22%7D%2C%7B%22x%22%3A1356.25%2C%22y%22%3A300%2C%22width%22%3A53.125%2C%22height%22%3A15.625%2C%22text%22%3A%22%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86%22%7D%2C%7B%22x%22%3A312.5%2C%22y%22%3A306.25%2C%22width%22%3A154.6875%2C%22height%22%3A18.75%2C%22text%22%3A%221%E6%9D%A5%E7%9B%B4%E6%8E%A5%E8%BD%AC%E5%8F%91%E7%BD%91%E9%A1%B5%22%7D%2C%7B%22x%22%3A339.0625%2C%22y%22%3A329.6875%2C%22width%22%3A409.375%2C%22height%22%3A20.3125%2C%22text%22%3A%222H%3A%2F%2FWMAOQGLECOTS%3A%22%7D%2C%7B%22x%22%3A307.8125%2C%22y%22%3A375%2C%22width%22%3A153.125%2C%22height%22%3A15.625%2C%22text%22%3A%2214%E8%BD%AC%E5%8F%91%E5%88%B0%E6%96%87%E4%BB%B6%22%7D%2C%7B%22x%22%3A1365.625%2C%22y%22%3A382.8125%2C%22width%22%3A32.8125%2C%22height%22%3A17.1875%2C%22text%22%3A%22%E8%AE%BE%E7%BD%AE%22%7D%2C%7B%22x%22%3A312.5%2C%22y%22%3A396.875%2C%22width%22%3A454.6875%2C%22height%22%3A18.75%2C%22text%22%3A%2215%23https%3A%2F%2FwwgooqlecofleeXxxxx.html%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A464.0625%2C%22width%22%3A401.5625%2C%22height%22%3A18.75%2C%22text%22%3A%2218https%3A%2F%2F*XXXcomAAeALER%2FXXXXXXhTMI%22%7D%2C%7B%22x%22%3A304.6875%2C%22y%22%3A506.25%2C%22width%22%3A200%2C%22height%22%3A20.3125%2C%22text%22%3A%2220%23%E6%9B%B4%E5%A4%9A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88%E5%8F%82%E7%85%A7%E6%96%87%E6%A1%A3%22%7D%2C%7B%22x%22%3A368.75%2C%22y%22%3A551.5625%2C%22width%22%3A707.8125%2C%22height%22%3A20.3125%2C%22text%22%3A%222disable%3A%2F%2Finterceptattandekont.chh%22%7D%2C%7B%22x%22%3A342.1875%2C%22y%22%3A576.5625%2C%22width%22%3A635.9375%2C%22height%22%3A18.75%2C%22text%22%3A%22stttang.tbaba-ln.comuth-.mmom%22%7D%2C%7B%22x%22%3A315.625%2C%22y%22%3A598.4375%2C%22width%22%3A332.8125%2C%22height%22%3A18.75%2C%22text%22%3A%22static.dingtalk.commac%22%7D%2C%7B%22x%22%3A314.0625%2C%22y%22%3A639.0625%2C%22width%22%3A301.5625%2C%22height%22%3A20.3125%2C%22text%22%3A%2224%23APPLEMacStoreUpdateeTc%22%7D%2C%7B%22x%22%3A332.8125%2C%22y%22%3A662.5%2C%22width%22%3A509.375%2C%22height%22%3A20.3125%2C%22text%22%3A%2225d1sable%3A%2F%2FInterceptppLe.comcomc%22%7D%2C%7B%22x%22%3A287.5%2C%22y%22%3A684.375%2C%22width%22%3A28.125%2C%22height%22%3A21.875%2C%22text%22%3A%2226%22%7D%2C%7B%22x%22%3A1128.125%2C%22y%22%3A884.375%2C%22width%22%3A289.0625%2C%22height%22%3A20.3125%2C%22text%22%3A%22%E4%BB%A3%E7%90%86%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%26%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%3A12338%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%8C%95%20%E8%BE%93%E5%85%A5%2F%E7%BB%86%E5%85%A5%E8%A7%82%E5%88%99%201%23LightProxyDetaultRules%2C%E5%85%A5%2F%E6%8F%92%E5%85%A5%E8%A7%84%E5%88%99%20Default%202%E5%88%9D%E5%A7%8B%E8%A7%84%E5%88%99%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%B8%80%E4%BA%9B%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%9C%A8%E4%BB%A3%E7%90%86%E4%B8%8B%E5%B7%A5%E4%BD%9C%203%23%E5%9C%A8%E6%AF%94%E8%BE%93%E5%85%A5%E8%A7%84%E5%88%99%204%23command%2Bs%E4%BF%9D%E5%AD%98%205%23%E5%8F%8C%E5%87%BB%E5%90%AF%E7%94%A8%E6%88%96%E8%80%85%E7%A6%81%E7%94%A8%E8%A7%84%E5%88%99%20%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%20%23hosts%E7%BB%91%E5%AE%9A%20810.101.73189g.al1cdn.co%20148205.215168alicnc%20cmb.alicdn.comu.alicdn.com%20%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86%201%E6%9D%A5%E7%9B%B4%E6%8E%A5%E8%BD%AC%E5%8F%91%E7%BD%91%E9%A1%B5%202H%3A%2F%2FWMAOQGLECOTS%3A%2014%E8%BD%AC%E5%8F%91%E5%88%B0%E6%96%87%E4%BB%B6%20%E8%AE%BE%E7%BD%AE%2015%23https%3A%2F%2FwwgooqlecofleeXxxxx.html%2018https%3A%2F%2F*XXXcomAAeALER%2FXXXXXXhTMI%2020%23%E6%9B%B4%E5%A4%9A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88%E5%8F%82%E7%85%A7%E6%96%87%E6%A1%A3%202disable%3A%2F%2Finterceptattandekont.chh%20stttang.tbaba-ln.comuth-.mmom%20static.dingtalk.commac%2024%23APPLEMacStoreUpdateeTc%2025d1sable%3A%2F%2FInterceptppLe.comcomc%2026%20%E4%BB%A3%E7%90%86%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%26%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%3A12338%22%2C%22width%22%3A525%2C%22height%22%3A352%7D\"></card></p><h2 id=\"vz7QC\"><br /></h2><h2 id=\"NJPM5\">为什么需要一个代理工具</h2><p><strong>因为代理工具能够让你随心所欲的掌控自己当前的开发环境。</strong></p><p><br /></p><p><strong>开发环境</strong>是影响研发效能最大的一个因素之一，不可用的环境，无法完成的部署，不稳定的上游环境等等都<strong>让一个非常简单的需求轻松消耗掉数天的时间</strong>。</p><p><br /></p><p>当开发环境陷入一种不健康的状态时，开发者就更容易破罐子破摔。宁可忍受每改一行代码重新手动 <code>build</code> 几分钟再开发也不愿意花时间让 watch 可用，然后发现自己越来越忙乱。</p><p><br /></p><blockquote><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578206007497-b7935205-d8a8-4fc3-866d-0bc62c5a2814.png%22%2C%22originWidth%22%3A211%2C%22originHeight%22%3A239%2C%22name%22%3A%22image.png%22%2C%22size%22%3A134204%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22width%22%3A105.5%2C%22height%22%3A120%7D\"></card></p><p><br /></p><p><span style=\"color: #222222;\"><span>希腊神话中有一个受到惩罚的人西西弗斯，他受罚的方式是：必须将一块巨石推上山顶，而每次到达山顶后巨石又滚回山下，如此永无止境地重复下去。在西方语境中，形容词“西西弗斯式的”（英语：sisyphean）形容“永无尽头而又徒劳无功的任务”。</span></span></p></blockquote><p><br /></p><p>当你的接口和页面突然不能工作时，代理工具可以快速 <code>mock</code> 一个。当你想测试一下线上页面改动可能会带来的后果，代理工具可以让你不经过复杂的发布过程快速在本地看到想要的效果。</p><p><br /></p><h2 id=\"CJSHA\">什么是好的开发环境</h2><p>既然我们在讨论开发环境对于研发效率的影响，那我们先来看一看什么是好的前端开发环境。</p><p><br /></p><h3 id=\"UmNIw\">稳定</h3><p>好的开发环境首先应该是稳定可用的，不应该在开发测试的过程中频繁挂掉或者频繁发生改变。</p><p>依赖于后端日常接口进行调试的前端对这点应该深有体会，自己的问题还没解决，环境就时常带来新的问题。</p><p><br /></p><h3 id=\"JgdYr\">快速验证</h3><p>修改代码能够在尽可能短的时间内得到验证也是一个基本诉求，这也是为什么大部分前端构建都会关注 <code>Hot reload</code> 和更高级的 <code>HMR</code> 。</p><p><br /></p><p>有些场景下的修改一次简单的修改就要经过长时间的等待，例如依赖上游修改接口的返回内容，需要修改后端的页面结构然后重新部署，需要走一遍完整的发布流程来测试某个修改在真实的线上页面会产生的影响等等。</p><p><br /></p><p>这种改一行等几十分钟的开发方式对效率的拖累是极其恐怖的。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578275488620-13ad673e-fa57-4715-b1d7-fd6adf8dbc5f.png%22%2C%22originWidth%22%3A225%2C%22originHeight%22%3A224%2C%22name%22%3A%22image.png%22%2C%22size%22%3A100533%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1.3333334%2C%22y%22%3A0.6666667%2C%22width%22%3A121.3333306%2C%22height%22%3A19.3333333%2C%22text%22%3A%22%E4%B8%80%E6%9D%AF%E8%8C%B6%2C%E4%B8%80%E5%8C%85%E7%83%9F%2C%22%7D%2C%7B%22x%22%3A89.333336%2C%22y%22%3A22%2C%22width%22%3A122.666664%2C%22height%22%3A18.666668%2C%22text%22%3A%22%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E5%A4%A9.%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%80%E6%9D%AF%E8%8C%B6%2C%E4%B8%80%E5%8C%85%E7%83%9F%2C%20%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E5%A4%A9.%22%2C%22width%22%3A112.5%2C%22height%22%3A112%7D\"></card></p><p><br /></p><h3 id=\"r9l9z\">和线上的一致性</h3><p>很多项目的线上环境极为复杂，为了解决日常开发中的问题，也会有一个线下的 <code>DEMO</code> 页面，最后开发完再搬到线上。</p><p><br /></p><p>这种方式相对来说较为稳定且能快速验证，但比较凸显的问题在于和线上并不一致。开发中会存在很多 <code>if-else</code> 的逻辑，例如最常见的：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20API_BASE%20%3D%20utils.isDaily%20%3F%20'http%3A%2F%2Flocalhost%3A7001%3A'%3A%20'https%3A%2F%2Fxxxx%2F'%3B%22%2C%22id%22%3A%22pYW11%22%7D\"></card><p><br /></p><p>这种情况也往往导致 <code>Bug</code> 非常难以被定位，最后逼着开发者退化到在线上环境低效的进行 debug。</p><p><br /></p><h3 id=\"3MNL0\">确定性</h3><p>开发者对于当前的环境应该是有确切认知的，而不是一直不停的怀疑自己的配置到底有没有生效，命中的是不是又是缓存等等。</p><p><br /></p><p>有些情况下我们利用 <code>hosts</code> 切换工具来进行联调，但在切完 <code>hosts</code> 后却又不得不来回确认自己的切换是否生效，清楚 Chrome 的 DNS Cache，清楚 Socket 之类的。</p><p><br /></p><p>这种非确定性不但提高了开发者心智负担，而且也会导致 Bug 难以定位。</p><p><br /></p><h2 id=\"6aYPs\">LightProxy 如何解决这些问题</h2><p>那么 <code>LightProxy</code> 要如何解决上面的这些问题呢</p><p><br /></p><p><code>LightProxy</code> 通过基于 <code>whistle</code> 的代理能力，能够任意修改开发环境中的 <code>request</code> 和 <code>response</code> 。</p><p><br /></p><h3 id=\"WxTiC\">举个例子</h3><p>例如当我们需要在线上页面中加入一个 <code>DIV</code> ，如果没有代理我们需要依赖后端一套类似的预发环境，而有了 <code>LightProxy</code> 我们只需要使用：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fwww.alibaba.com%2F%20htmlPrepend%3A%2F%2F(%3Cdiv%3Etest%3C%2Fdiv%3E)%22%2C%22id%22%3A%22HkZn9%22%7D\"></card><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578276397871-fcf46678-c2a3-48bb-83cd-02bf2bd7e201.png%22%2C%22originWidth%22%3A1099%2C%22originHeight%22%3A278%2C%22name%22%3A%22image.png%22%2C%22size%22%3A93886%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A22.895834%2C%22y%22%3A11.447917%2C%22width%22%3A138.51978599999998%2C%22height%22%3A16.027083%2C%22text%22%3A%22cdivtest%2Fdiv%E4%B8%80%24%22%7D%2C%7B%22x%22%3A288.4875%2C%22y%22%3A26.330208%2C%22width%22%3A477.37809999999996%2C%22height%22%3A17.171875%2C%22text%22%3A%22%2F%2FINGOLCRK4%22%7D%2C%7B%22x%22%3A44.646873%2C%22y%22%3A43.502083%2C%22width%22%3A485.39162699999997%2C%22height%22%3A16.027084000000002%2C%22text%22%3A%22metacontent%5C%22text%2Fhtml%3Bcharseteutf-8%5C%22httpequivontnt-Type%22%7D%2C%7B%22x%22%3A18.316666%2C%22y%22%3A58.384377%2C%22width%22%3A373.202074%2C%22height%22%3A16.027083000000005%2C%22text%22%3A%22titleentitleo%22%7D%2C%7B%22x%22%3A38.922916%2C%22y%22%3A75.55625%2C%22width%22%3A493.40518399999996%2C%22height%22%3A14.882289999999998%2C%22text%22%3A%22netaname%5C%22kewwordscontent%5C%22MnUfacturersSup%22%7D%2C%7B%22x%22%3A540.3417%2C%22y%22%3A75.55625%2C%22width%22%3A512.8667%2C%22height%22%3A16.027085999999997%2C%22text%22%3A%22smotersuc%22%7D%2C%7B%22x%22%3A65.25313%2C%22y%22%3A92.72813%2C%22width%22%3A469.36457%2C%22height%22%3A13.737490000000008%2C%22text%22%3A%22metaname%5C%22descriptioncontent%5C%22FindquattyMuoctures%2CSue%22%7D%2C%7B%22x%22%3A554.07916%2C%22y%22%3A92.72813%2C%22width%22%3A523.16974%2C%22height%22%3A14.882280000000009%2C%22text%22%3A%22iers%2CEXpoRtRSmte%2C%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A106.46562%2C%22width%22%3A127.071876%2C%22height%22%3A13.737504999999999%2C%22text%22%3A%22alibaba.com%3E%22%7D%2C%7B%22x%22%3A35.48854%2C%22y%22%3A123.6375%2C%22width%22%3A368.62291%2C%22height%22%3A14.882289999999998%2C%22text%22%3A%22metahttp-equiv%5C%22x-dnsprefetch-controtucontente%5C%22on%22%7D%2C%7B%22x%22%3A36.63333%2C%22y%22%3A139.66458%2C%22width%22%3A317.1073%2C%22height%22%3A13.737500000000011%2C%22text%22%3A%22cuinkrel-%5C%22dns-prefetch%5C%22href-%5C%22u%2Fi.alicdn.com%5C%22%22%7D%2C%7B%22x%22%3A32.054165%2C%22y%22%3A154.54688%2C%22width%22%3A331.989595%2C%22height%22%3A16.027080000000012%2C%22text%22%3A%22%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2Fbealicdn.com%22%7D%2C%7B%22x%22%3A27.475%2C%22y%22%3A170.57396%2C%22width%22%3A325.12082999999996%2C%22height%22%3A14.882290000000012%2C%22text%22%3A%22clinkrel-%5C%22dns-prefetch%5C%22href-%2F%2Fis.olicdn.com%5C%22%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A186.60104%2C%22width%22%3A356.03019600000005%2C%22height%22%3A14.882299999999987%2C%22text%22%3A%22linkrel-%5C%22dns-prefetch%5C%22href-y%2Fu.alicdn.com%5C%22%22%7D%2C%7B%22x%22%3A20.60625%2C%22y%22%3A203.77292%2C%22width%22%3A326.26565%2C%22height%22%3A12.592710000000011%2C%22text%22%3A%22%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fg.alicdn.com'%22%7D%2C%7B%22x%22%3A22.895834%2C%22y%22%3A219.8%2C%22width%22%3A322.831246%2C%22height%22%3A11.447909999999979%2C%22text%22%3A%22%3Ciinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fassetslicdn.co%22%7D%2C%7B%22x%22%3A24.040625%2C%22y%22%3A235.82709%2C%22width%22%3A389.22915500000005%2C%22height%22%3A12.592690000000005%2C%22text%22%3A%22Linkrel-%5C%22dns-prefetch%5C%22href%5C%22%2Fimg.aticdn.com%22%7D%2C%7B%22x%22%3A27.475%2C%22y%22%3A251.85417%2C%22width%22%3A394.95313%2C%22height%22%3A13.737500000000011%2C%22text%22%3A%22linkrei%5C%22dns-prefetch%5C%22href-%5C%22%2Fcmap.atibaba.com%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22cdivtest%2Fdiv%E4%B8%80%24%20%2F%2FINGOLCRK4%20metacontent%5C%22text%2Fhtml%3Bcharseteutf-8%5C%22httpequivontnt-Type%20titleentitleo%20netaname%5C%22kewwordscontent%5C%22MnUfacturersSup%20smotersuc%20metaname%5C%22descriptioncontent%5C%22FindquattyMuoctures%2CSue%20iers%2CEXpoRtRSmte%2C%20alibaba.com%3E%20metahttp-equiv%5C%22x-dnsprefetch-controtucontente%5C%22on%20cuinkrel-%5C%22dns-prefetch%5C%22href-%5C%22u%2Fi.alicdn.com%5C%22%20%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2Fbealicdn.com%20clinkrel-%5C%22dns-prefetch%5C%22href-%2F%2Fis.olicdn.com%5C%22%20linkrel-%5C%22dns-prefetch%5C%22href-y%2Fu.alicdn.com%5C%22%20%3Clinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fg.alicdn.com'%20%3Ciinkrel-%5C%22dns-prefetch%5C%22href-%5C%22%2F%2Fassetslicdn.co%20Linkrel-%5C%22dns-prefetch%5C%22href%5C%22%2Fimg.aticdn.com%20linkrei%5C%22dns-prefetch%5C%22href-%5C%22%2Fcmap.atibaba.com%22%2C%22width%22%3A549.5%2C%22height%22%3A139%7D\"></card></p><p><br /></p><p>就可以在一个线上的页面中插入一个 <code>div</code> 。</p><p><br /></p><p>同样的，我们可以直接把页面中的一个 <code>JS</code> 转发到本地一个开发中的文件</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fwww.google.com%2Fxx.js%20file%3A%2F%2F%2FUser%2Fxxx%2Fxxx.js%22%2C%22id%22%3A%22bDifr%22%7D\"></card><p><br /></p><p>当后端缺少 <code>CORS</code> 头时，我们可以直接给它先加上 <code>CORS</code> 头</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fxxx.com%2Fxx.json%20resCors%3A%2F%2F%20%23%20%E7%BB%99%E5%93%8D%E5%BA%94%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A2%9E%E5%8A%A0%20CORS%20header%22%2C%22id%22%3A%22Zw7hJ%22%7D\"></card><p><br /></p><p>也可以直接把某个文件变成一个内联的文字，只要用类似 <code>ES6</code> 字符串框起来</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22https%3A%2F%2Fxxx.com%2Fxx.json%20%60test%20text%60%22%2C%22id%22%3A%223rzMc%22%7D\"></card><p><br /></p><p>总体来说，<code><span>LightProxy</span></code> 能够让开发者完全掌控自己的开发环境，用极低的成本定制自己的开发环境，而不是总是在等待依赖方按照自己的需求提供相应的环境。</p><p><br /></p><p>甚至于，你可以自己用 <code>NodeJS</code> 书写针对某个规则的响应：<a href=\"https://alibaba.github.io/lightproxy/write-rule-with-nodejs.html#%E4%BD%BF%E7%94%A8\" target=\"_blank\">使用 NodeJS 编写规则</a></p><p><br /></p><h2 id=\"DTTMJ\">快速确认</h2><p>为了能够快速确认代理是否按预期工作，我们在经过 <code><span>LightProxy</span></code> 代理的网络请求的 Response Header 增加了一些相关的信息，用于协助开发人员快速确认当前请求命中了什么规则，以及这个请求是怎么来的（由谁响应，匹配什么规则，实际真正访问的来源）。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578276694637-f5b52b24-5e76-43c4-9425-3f2787c7e8c5.png%22%2C%22originWidth%22%3A1022%2C%22originHeight%22%3A170%2C%22name%22%3A%22image.png%22%2C%22size%22%3A29831%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A229.95%2C%22y%22%3A2.1291666%2C%22width%22%3A540.80836%2C%22height%22%3A26.614583399999997%2C%22text%22%3A%22lp%3ASeehttps%3A%2F%2Fgithub.com%2Fatibaba%2Flightrox%22%7D%2C%7B%22x%22%3A29.808334%2C%22y%22%3A3.19375%2C%22width%22%3A178.850006%2C%22height%22%3A24.485416999999998%2C%22text%22%3A%22lightproxy-help_%22%7D%2C%7B%22x%22%3A59.61667%2C%22y%22%3A45.777084%2C%22width%22%3A409.86459%2C%22height%22%3A23.420829999999995%2C%22text%22%3A%22lightproxy-host-ip_180101.12%22%7D%2C%7B%22x%22%3A86.23125%2C%22y%22%3A87.29584%2C%22width%22%3A472.675%2C%22height%22%3A23.420829999999995%2C%22text%22%3A%22ghtproxy-real-urlhttp%2Fwww.aidu.com%22%7D%2C%7B%22x%22%3A25.55%2C%22y%22%3A130.94376%2C%22width%22%3A301.27709999999996%2C%22height%22%3A22.356240000000014%2C%22text%22%3A%22lightproxy-rulesone%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22lp%3ASeehttps%3A%2F%2Fgithub.com%2Fatibaba%2Flightrox%20lightproxy-help_%20lightproxy-host-ip_180101.12%20ghtproxy-real-urlhttp%2Fwww.aidu.com%20lightproxy-rulesone%22%2C%22width%22%3A511%2C%22height%22%3A85%7D\"></card></p><p><br /></p><h2 id=\"SASae\">没有银弹</h2><p>虽然说代理工具可以快速的解决各种开发环境上的坑，但也并不是银弹。</p><p><br /></p><p>这种方案更加适合在开发阶段快速绕过各种拦路虎，但最终在多人协作中仍然需要有健康的环境来保障项目的协作流程流畅，不能因为有了代理工具后就完全无视开发环境的问题。</p><p><br /></p><h2 id=\"19TAe\">开始 &amp; 下载</h2><p>说了这么多，开始使用 <code>LightProxy</code> 控制你的开发环境吧：<a href=\"https://github.com/alibaba/lightproxy\" target=\"_blank\">https://github.com/alibaba/lightproxy</a></p><p><br /></p><h3 id=\"B9W04\">下载</h3><p><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy.dmg\" target=\"_blank\"><span class=\"lake-fontsize-12\"><strong><u>macOS 版</u></strong></span></a></p><p><a href=\"https://gw.alipayobjects.com/os/LightProxy/LightProxy-Setup.exe\" target=\"_blank\"><span class=\"lake-fontsize-12\"><strong><u>Windows 版</u></strong></span></a></p><p><br /></p><h2 id=\"ddxHZ\">问题反馈</h2><p>欢迎加入钉钉群讨论和反馈问题，或者直接在 issue 反馈问题：<a href=\"https://github.com/alibaba/lightproxy/issues\" target=\"_blank\">https://github.com/alibaba/lightproxy/issues</a></p><p><br /></p><blockquote><p>ps: Whistle 的作者也在群里，欢迎来撩</p></blockquote><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F236311%2F1578277057662-2ff248c8-7f29-4ad3-88ff-8381e8a99095.png%22%2C%22originWidth%22%3A970%2C%22originHeight%22%3A1280%2C%22name%22%3A%22image.png%22%2C%22size%22%3A338210%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A118.666664%2C%22y%22%3A129.33333%2C%22width%22%3A416.000036%2C%22height%22%3A50.66667000000001%2C%22text%22%3A%22LightProxy%E5%BC%80%E6%BA%90%E7%BE%A4%22%7D%2C%7B%22x%22%3A766.6667%2C%22y%22%3A129.33333%2C%22width%22%3A60%2C%22height%22%3A60%2C%22text%22%3A%22L%22%7D%2C%7B%22x%22%3A117.333336%2C%22y%22%3A190.66667%2C%22width%22%3A58.666664%2C%22height%22%3A32%2C%22text%22%3A%223%E4%BA%BA%22%7D%2C%7B%22x%22%3A264%2C%22y%22%3A1144%2C%22width%22%3A470.6667%2C%22height%22%3A33.33339999999998%2C%22text%22%3A%22%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22LightProxy%E5%BC%80%E6%BA%90%E7%BE%A4%20L%203%E4%BA%BA%20%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%2C%22width%22%3A188%2C%22height%22%3A248%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-01-06T03:11:10.000Z",
    "deleted_at": null,
    "created_at": "2020-01-05T06:21:54.000Z",
    "updated_at": "2020-01-06T03:11:10.000Z",
    "published_at": "2020-01-06T03:11:10.000Z",
    "first_published_at": "2020-01-06T02:30:12.000Z",
    "word_count": 1760,
    "cover": "",
    "description": "原文地址：https://github.com/alibaba/lightproxy/issues/19LightProxy 是 IFE 团队开发的一款基于 Electron 和 whistle 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 HTTP 代理使用规则...",
    "custom_description": "LightProxy 是 IFE 团队开发的一款基于 Electron 和 whistle 的开源桌面代理软件，致力于让前端开发人员能够精确的掌握自己的开发环境，通过 HTTP 代理使用规则转发、修改每一个请求和响应的内容。为什么需要一个代理工具因为代理工具能够让你随心所欲的掌控自己当前的开发...",
    "_serializer": "v2.doc_detail"
  }
]